{
  "name": "Sigma+Darkcyde",
  "description": "Adapted Version of Darkcyde's Persona",
  "scripts": {
    "AFMU repairs": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.item} \r\n{if event.repairedfully:\r\n    totalmente reparado\r\n|else:\r\n    parcialmente reparado \r\n    {Occasionally(2, cat(\r\n        OneOf(\"em \", \"a \"),\r\n        Humanise(event.health * 100),\r\n        \" por cento de funcionalidade\"\r\n    ))}\r\n}\r\n\r\n{Occasionally(2, \r\n    cat(OneOf(\", \", \"e está\"), \" pronto para reativação\")\r\n)}.",
      "default": true,
      "name": "AFMU repairs",
      "description": "Triggered when repairing modules using the Auto Field Maintenance Unit (AFMU)"
    },
    "Blueprint make report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain current inventory of a material}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{set canbemade to 999}\r\n\r\n{if blueprint:\r\n    {_ Find the smallest number of this blueprint that can be made }\r\n    \r\n    {set cur to 0}\r\n    {while cur < len(blueprint.materials):\r\n        {set inventory to _inventory(blueprint.materials[cur].material)}\r\n        {if !inventory:\r\n            {set canbemade to 0}\r\n        |else:\r\n            {if inventory.amount < canbemade:\r\n                {set canbemade to inventory.amount}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if canbemade = 0:\r\n        Você não pode faze um {blueprintname}\r\n    |elif canbemade = 1:\r\n        Você pode fazer um {blueprintname}\r\n    |else:\r\n        Você pode fazer {canbemade} {blueprintname}\r\n    }\r\n|else:\r\n    Sem informação disponível sobre os materiais necessários para {blueprintname}\r\n}.\r\n",
      "default": true,
      "name": "Blueprint make report",
      "description": "Report on how many of a particular blueprint we can make"
    },
    "Blueprint material report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch blueprint from state }\r\n{set blueprintname to state.blueprint}\r\n{if blueprintname:\r\n    {_ Fetch full blueprint details }\r\n    {set blueprint to BlueprintDetails(blueprintname)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'blueprint')}\r\n    {SetState('eddi_context_blueprint_name', blueprintname)}\r\n}\r\n\r\n{if !blueprint:\r\n    {_ Fetch from context }\r\n    {set blueprint to BlueprintDetails(state.eddi_context_blueprint_name)}\r\n}\r\n\r\n{if blueprint:\r\n    {blueprintname} requires\r\n    {set cur to 0}\r\n    {set length to len(blueprint.materials) - 1}\r\n    {while cur < len(blueprint.materials):\r\n        {blueprint.materials[cur].material}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }\r\n|else:\r\n    No information available on materials required for {blueprintname}\r\n}.\r\n",
      "default": false,
      "name": "Blueprint material report",
      "description": "Report on the material requirements for a blueprint"
    },
    "Body atmosphere report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportAtmoPressure to 1}   {_ Set to 1 to report atmospheric pressure. _}\r\n{set reportAtmoTempScale to 0}  {_ Set to 0 to report temperatures in Kelvin _}\r\n                                {_ Set to 1 to report temperatures in Celsius _}\r\n                                {_ Set to 2 to report temperatures in Fahrenheit _}\r\n                                {_ Set to 3 if you don't want to hear about the temperature of the body _}\r\n{set reportAtmoComp to 1}       {_ Set to 0 to report only the main atmospheric element. _}\r\n                                {_ Set to 1 to report full atmospheric composition. _}\r\n\r\n\r\n{_ Fetch from context }\r\n{if event:\r\n    {set reportbody to BodyDetails(event.name, system.name)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    {_ If it's still not possible to get the body name...  _}\r\n    I'm\r\n    {OneOf(\"not sure\",\"unsure\")}\r\n    {Occasionally(2,\"of\")}\r\n    which body\r\n    {OneOf(\"you are\",\"you're\")}\r\n    {OneOf(\"asking about\",\"referring to\")}.\r\n\r\n|else:\r\n    {_ Define functions for converting temperature scales _}\r\n    {set ToCelsius(kelvin) to: {round(kelvin - 273)}}\r\n    {set ToFahrenheit(kelvin) to: {round((kelvin-273)*9/5 + 32)}}\r\n    {set TempCalc(kelvin) to: \r\n        {if reportAtmoTempScale = 0: {round(kelvin)}}\r\n        {if reportAtmoTempScale = 1: {ToCelsius(kelvin)}}\r\n        {if reportAtmoTempScale = 2: {ToFahrenheit(kelvin)}}\r\n    }\r\n\r\n    {_ Name our temperature scale _}\r\n    {if reportAtmoTempScale = 0: {set tempscale to: Kelvin}}\r\n    {if reportAtmoTempScale = 1: {set tempscale to: degrees Celsius}}\r\n    {if reportAtmoTempScale = 2: {set tempscale to: degrees Fahrenheit}}\r\n\r\n    {if !body:\r\n        {F(\"Body Name Tidy\")}\r\n        For {body},\r\n    }\r\n\r\n    {if find(reportbody.planettype, \"giant\") > -1:\r\n        {if find(reportbody.planettype, \"Class\") > -1: \r\n            {set sudarsky to Occasionally(3, \"Sud-dar-ski\")}\r\n        }\r\n        {set planetdesc to OneOf(\"{sudarsky} Gas giants like this one have\", \"This {sudarsky} gas giant has\")}\r\n        {if find(reportbody.planettype, \"Class V\") > -1:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(1373)}}\r\n                temperatures above {Humanise(tempmin)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of {OneOf(\"vaporized silicates and iron\", \"silicate and iron vapors\")}.\r\n        |elif find(reportbody.planettype, \"Class IV\") > -1:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(354)}}\r\n                {set tempmax to: {TempCalc(903)}}\r\n                temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and\r\n                {Humanise(tempmax)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of {OneOf(\"alkali metals vapors\", \"vaporized alkali metals\")}.   \r\n        |elif find(reportbody.planettype, \"Class III\") > -1:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(251)}}\r\n                {set tempmax to: {TempCalc(353)}}\r\n                surface temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and\r\n                {Humanise(tempmax)} {tempscale},\r\n            }\r\n            a temperature at which\r\n            {OneOf(\"no gaseous elements will form any clouds\",\r\n                   \"suitable chemicals are not present in the atmosphere to form a sustained cloud layer\",\r\n                   \"the atmosphere cannot sustain a persistent cloud layer\")}.\r\n        |elif find(reportbody.planettype, \"Class II\") > -1:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(154)}}\r\n                {set tempmax to: {TempCalc(250)}}\r\n                surface temperatures {OneOf(\"of\", \"ranging\")} between {Humanise(tempmin)} and\r\n                {Humanise(tempmax)} {tempscale}, {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of water vapors.  \r\n        |elif find(reportbody.planettype, \"Class I\") > -1:\r\n            {planetdesc} \r\n            {if reportAtmoTempScale < 3: \r\n                {set tempmin to: {TempCalc(153)}}\r\n                {set tempmax to: {TempCalc(83)}}\r\n                surface temperatures of {Humanise(tempmax)} {tempscale}\r\n                {Occasionally(2, OneOf(\", or less,\", \", at most,\"))} {OneOf(\"and\", \"with\", \"forming\")}\r\n            }\r\n            a dense cloud layer of ammonia vapor.  \r\n        }\r\n\r\n    |elif reportbody.atmosphere = \"No atmosphere\" || !reportbody.atmosphere:\r\n        {Occasionally(4, OneOf(\"There is no atmosphere.\",\r\n                               \"It is devoid of any atmosphere.\",\r\n                               \"The years have scoured it clean of any atmosphere.\"))}\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            The surface temperature averages\r\n            {TempCalc(reportbody.temperature)} {tempscale}.\r\n        }\r\n\r\n    |elif reportbody.pressure: \r\n        {if reportbody.pressure < 0.1:\r\n            {set pressdesc to OneOf(\"trace gas\", \"super thin\")}\r\n        |elif reportbody.pressure < 0.25:\r\n            {set pressdesc to \"very thin\"}\r\n        |elif reportbody.pressure < 0.5:\r\n            {set pressdesc to \"thin\"}\r\n        |elif reportbody.pressure < 2:\r\n            {set pressdesc to \"\"}\r\n        |elif reportbody.pressure < 10:\r\n            {set pressdesc to \"thick\"}\r\n        |elif reportbody.pressure < 50:\r\n            {set pressdesc to OneOf(\"dense\", \"very thick\")}\r\n        |elif reportbody.pressure < 100:\r\n            {set pressdesc to OneOf(\"very dense\", \"super thick\")}\r\n        |elif reportbody.pressure >= 100:\r\n            {set pressdesc to OneOf(\"crushing\", \"super dense\")}\r\n        }\r\n\r\n        {if find(reportbody.atmosphere, \"-rich\") > -1:\r\n            {set element to token(reportbody.atmosphere, \"-rich\", \"\")}\r\n            {set desc to OneOf(\"It is a\", \"There is a\", \"Sensors detect a\")}\r\n            {OneOf(\"{desc} {pressdesc} {reportbody.atmospherecompositions[0].name} atmosphere\",\r\n                   \"The {pressdesc} atmosphere is {reportbody.atmospherecompositions[0].name}\")}\r\n            {if reportbody.atmospherecompositions[0].name != element:\r\n                , {OneOf(\"that is\",\"and\")}\r\n                {OneOf(\"rich in {element}\", \"{element}-rich\")}\r\n            }\r\n        |elif find(reportbody.atmosphere, \"vapour\") > -1:\r\n            The {pressdesc} atmosphere \r\n            {OneOf(\"is composed of {reportbody.atmosphere}s\",\r\n                   \"is rich in {reportbody.atmosphere}s\",\r\n                   \"contains high levels of {reportbody.atmosphere}s\")}\r\n        |else:\r\n            {if len(reportbody.atmospherecompositions) > 1:\r\n                {set mostly to OneOf(\"primarily\", \"mainly\", \"mostly\")}\r\n                {OneOf(\"The {pressdesc} atmosphere is composed {mostly} of\",\r\n                       \"Most prevalent in the {pressdesc} atmosphere is\")}\r\n            |else:\r\n                The {pressdesc} atmosphere is\r\n                {Occasionsally(2,\"composed of\")}\r\n\r\n            }\r\n            {reportbody.atmospherecompositions[0].name}\r\n        }\r\n\r\n        {_ Atmospheric Composition _}\r\n        {if reportAtmoComp = 1 && len(reportbody.atmospherecompositions) > 1:\r\n\r\n            {set atmocomp to []}\r\n            {set cur to 1}\r\n            \r\n            {while cur < len(reportbody.atmospherecompositions):\r\n                {if (reportbody.atmospherecompositions[cur].name != element):\r\n                    {set atmocomp to cat(atmocomp, [reportbody.atmospherecompositions[cur].name])}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n\r\n            {if len(atmocomp) = 1:\r\n                , with {OneOf(\"some\",\"an additional element of\")}\r\n                {atmocomp[0]}\r\n                {Occasionally(2,\"also present\")}\r\n            |elif len(atmocomp) > 1:\r\n                , with {OneOf(\"some\",\"additional elements of\")}\r\n                {set cur to 0}\r\n                {set length to len(atmocomp) - 1}\r\n                {while cur < len(atmocomp):\r\n                    {P(atmocomp[cur])}\r\n                    {set cur to cur + 1}\r\n                    {if cur = length: and\r\n                    |elif cur < length:,\r\n                    }\r\n                }\r\n                {Occasionally(2,\"also present\")}\r\n            }\r\n        }.\r\n\r\n        {if reportAtmoPressure = 1:\r\n            {if reportAtmoComp = 1 && len(reportbody.atmospherecompositions) > 0:\r\n                {OneOf(\"It has\", \"There is\", \"Sensors detect\")}\r\n            |else:\r\n                , with\r\n            }\r\n            a surface pressure of {Humanise(reportbody.pressure)}\r\n            Earth atmosphere{if Humanise(reportbody.pressure) != \"1\":s}\r\n        }\r\n\r\n        {if reportbody.temperature && reportAtmoTempScale < 3:\r\n            {set temp to: {TempCalc(reportbody.temperature)}}\r\n            {if reportAtmoPressure = 1: and |else: with }\r\n            an average surface temperature of {temp} {tempscale}\r\n        }.\r\n    }\r\n}\r\n\r\n",
      "default": false,
      "name": "Body atmosphere report",
      "description": "Report on the atmosphere of the contextual body"
    },
    "Body mapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Mapping\", \"{Occasionally(2, 'Surface')} Map\")}\r\n{Occasionally(2, \"of body {P(event.name)}\")}\r\n{OneOf(\"is\", \"is now\")}\r\n{OneOf(\"complete\", \"finished\")}.\r\n\r\n{if event.probesused <= event.efficiencytarget:\r\n    Efficiency bonus {OneOf(\"awarded\", \"granted\")}.\r\n}",
      "default": false,
      "name": "Body mapped",
      "description": "Triggered after mapping a body with the Surface Area Analysis scanner"
    },
    "Body materials report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportMats to 2} {_ Set to 0 if you only want to hear about materials below your minimum inventory level _}\r\n                      {_ Set to 1 if you also want to hear about materials below your desired inventory level _}\r\n                      {_ Set to 2 if you want to hear about all materials on the body _}\r\n\r\n{set reportMatConc to 2} {_ Set to 0 if you do not want to hear about material percent concentrations _}\r\n                         {_ Set to 1 if you only want to hear about great material percent concentrations _}\r\n                         {_ Set to 2 if you want to hear about good and great material percent concentrations _}\r\n                         {_ Set to 3 if you want to hear about all material percent concentrations _}\r\n\r\n\r\n{_ Fetch from context }\r\n{if event:\r\n    {set reportbody to BodyDetails(event.name, system.name)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    {_ If it's still not possible to get the body name...  _}\r\n    I'm\r\n    {OneOf(\"not sure\",\"unsure\")}\r\n    {Occasionally(2,\"of\")}\r\n    which body\r\n    {OneOf(\"you are\",\"you're\")}\r\n    {OneOf(\"asking about\",\"referring to\")}.\r\n\r\n|else:\r\n    {_ Define a function to obtain a material from inventory}\r\n    {set _inventory(required) to:\r\n        {for material in materials:\r\n            {if material.material = required:\r\n                {return material}\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportbody.landable:\r\n\r\n        {set goodmaterials to []}\r\n        {set greatmaterials to []}\r\n        {set allmaterials to []}\r\n        {for material in reportbody.materials:\r\n            {set inventoryMat to _inventory(material.material)}\r\n            {if (reportMats >= 0 && inventoryMat.amount < inventoryMat.minimum && inventoryMat.minimum > 0)\r\n              || (reportMats >= 1 && inventoryMat.amount < inventoryMat.desired && inventoryMat.desired > 0)\r\n              || (reportMats >= 2):\r\n                {if material.percentage >= material.definition.greatpctbody:\r\n                    {set greatmaterials to cat(greatmaterials, [material])}\r\n                |elif material.percentage >= material.definition.goodpctbody:\r\n                    {set goodmaterials to cat(goodmaterials, [material])}\r\n                |else:\r\n                    {set allmaterials to cat(allmaterials, [material])}\r\n                }\r\n            }\r\n        }\r\n\r\n        {if len(goodmaterials) > 0 || len(greatmaterials) > 0 || len(allmaterials) > 0:\r\n            {if !body:\r\n                {F(\"Body Name Tidy\")}\r\n                {body}\r\n            |else:\r\n                This body\r\n            }\r\n            contains\r\n\r\n            {if len(greatmaterials) > 0:\r\n                very high levels of\r\n                {set cur to 0}\r\n                {set length to len(greatmaterials) - 1}\r\n                {while cur < len(greatmaterials):\r\n                    {P(greatmaterials[cur].material)}\r\n                    {if reportMatConc > 0: at {round(greatmaterials[cur].percentage, 1)}% }\r\n                    {set cur to cur + 1}\r\n                    {if cur = length: and\r\n                    |elif cur < length:,\r\n                    }\r\n                }\r\n            }\r\n\r\n            {if len(goodmaterials) > 0:\r\n                {if len(greatmaterials) > 0: and }\r\n                high levels of\r\n                {set cur to 0}\r\n                {set length to len(goodmaterials) - 1}\r\n                {while cur < len(goodmaterials):\r\n                    {P(goodmaterials[cur].material)}\r\n                    {if reportMatConc > 1: at {round(goodmaterials[cur].percentage, 1)}% }\r\n                    {set cur to cur + 1}\r\n                    {if cur = length: and\r\n                    |elif cur < length:,\r\n                    }\r\n                }\r\n            }\r\n\r\n            {if len(greatmaterials) > 0 || len(goodmaterials) > 0:. }\r\n\r\n            {if len(allmaterials) > 0 && reportMats >= 2:\r\n                {if len(greatmaterials) > 0 || len(goodmaterials) > 0:\r\n                    It is also {OneOf(\"comprised of\",\"made up from\")}\r\n                |else:\r\n                    moderate amounts of\r\n                }\r\n                {set cur to 0}\r\n                {set length to len(allmaterials) - 1}\r\n                {while cur < len(allmaterials):\r\n                    {P(allmaterials[cur].material)}\r\n                    {if reportMatConc > 2: at {round(allmaterials[cur].percentage, 1)}% }\r\n                    {set cur to cur + 1}\r\n                    {if cur = length: and\r\n                    |elif cur < length:,\r\n                    }\r\n                }.\r\n            }\r\n        }\r\n    }\r\n}",
      "default": false,
      "name": "Body materials report",
      "description": "Report on the materials available from the contextual body"
    },
    "Body Name Tidy": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Body Name Tidy _}\r\n{_ Tidy up body names _}\r\n{_ If the body name contains the system name, it is removed _}\r\n{_ Adds Star, Planet, or Moon depending on body location within the system _}\r\n{_ Corrects pronunciation of letters in body names. No more 'hour' for 'h' with some TTS voices _}\r\n{_ Returns 'body' and 'body_type 'for use in other scripts _}\r\n\r\n\r\n{if len(reportbody.shortname) = 0:\r\n    {if event:\r\n        {set reportbody to BodyDetails(event.name, system.name)}\r\n    |elif reportbody.stellarclass:\r\n        {set reportbody to BodyDetails(state.eddi_context_star_name, state.eddi_context_star_system)}\r\n    |else:\r\n        {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_system_system)}\r\n    }\r\n}\r\n\r\n{set body to reportbody.name}\r\n{set system to reportbody.systemname}\r\n{set type to reportbody.type}\r\n{set parent to BodyDetails(slice(body, 0, len(body)-2), system).type}\r\n\r\n{if body = system:\r\n    {set body to \"The primary star\"}\r\n    {set body_type to \"Star\"}\r\n\r\n|elif find(body, system) > -1:\r\n\r\n    {_ Remove system name from the body name _}\r\n    {if len(reportbody.shortname) > 0:\r\n        {set body to reportbody.shortname}\r\n    |else:\r\n        {set body to slice(body, len(system)+1)}\r\n    }\r\n\r\n    {_ Remove Ring designation if it's a ring _}\r\n    {if find(body, \"Ring\") > -1:\r\n        {set body to split(body, \" \") _}\r\n        {set body to join(except(body, [len(body)-1:\"\", len(body)-2:\"\"]), \" \")}\r\n    }\r\n\r\n    {_ Replacing spaces with dashes makes letters spoken as alphabetic letters _}\r\n    {set body to ucase(join(split(body, \" \"), \"-\"))}\r\n    {set last_char to ord(slice(body, len(body)-1))}\r\n\r\n    {if find(body, \"+\") > -1:\r\n        {set body to List(split(body, \"+\"))}\r\n        {set body_type to \"Planets\"}\r\n    |elif type = \"Star\" || (last_char > 64 && find(body, \"-\", 1) = -1):\r\n        {set body_type to \"Star\"}\r\n    |elif parent = \"Planet\" || last_char > 64:\r\n        {set body_type to \"Moon\"}\r\n    |elif type = \"Planet\" || last_char > 48:\r\n        {set body_type to \"Planet\"}\r\n    }\r\n\r\n    {set body to cat(body_type, \"-\", body)}\r\n}\r\n",
      "default": false,
      "name": "Body Name Tidy",
      "description": "Function to shorten body names, and pronounce body name letters"
    },
    "Body report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportGravity to 1}        {_ Set to 1 to report the body's gravity. _} \r\n{set reportTerraformState to 1} {_ Set to 1 to report the body's terraform state. _}\r\n{set reportRings to 1}          {_ Set to 1 to report the body's rings. _}\r\n{set reportRadius to 1}         {_ Set to 1 to report the body's radius. _}\r\n{set reportMass to 1}           {_ Set to 1 to report the body's mass. _}\r\n{set reportRotation to 1}       {_ Set to 1 to report the body's rotation. _}\r\n{set reportVolcanism to 1}      {_ Set to 1 to report the body's volcanism. _}\r\n{set reportAtmosphere to 1}     {_ Set to 1 to report the body's atmosphere. _}\r\n{set reportMaterials to 1}      {_ Set to 1 to report the body's materials. _}\r\n{set reportScanValue to 1}      {_ Set to 1 to report the body's estimated value. _}\r\n\r\n\r\n{_ Fetch from context }\r\n{if event:\r\n    {set reportbody to BodyDetails(event.name, system.name)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    {_ If it's still not possible to get the body name...  _}\r\n    I'm\r\n    {OneOf(\"not sure\",\"unsure\")}\r\n    {Occasionally(2,\"of\")}\r\n    which body\r\n    {OneOf(\"you are\",\"you're\")}\r\n    {OneOf(\"asking about\",\"referring to\")}.\r\n\r\n|else:\r\n    {set compare(stat) to:\r\n        {if stat > 0.95 && stat < 1.05:\r\n            {OneOf(\"approximately\",\"roughly\",\"nearly\")} equal to \r\n        |elif stat > 1:\r\n            {Humanise(stat)} times\r\n        |elif stat < 1:\r\n            {if stat > 0.89: {OneOf(\"fractionally\",\"just\")}}\r\n            less than\r\n        }\r\n\r\n        {if stat < 0.01:\r\n            one percent of\r\n        |elif stat < 0.1:\r\n            ten percent of\r\n        |elif stat < 0.2:\r\n            one fifth of\r\n        |elif stat < 0.3:\r\n            one third of\r\n        |elif stat < 0.4:\r\n            forty percent of\r\n        |elif stat < 0.5:\r\n            half of\r\n        |elif stat < 0.6:\r\n            two thirds of\r\n        |elif stat < 0.7:\r\n            seventy percent of\r\n        |elif stat < 0.8:\r\n            eighty percent of\r\n        |elif stat < 0.9:\r\n            ninety percent of\r\n        }\r\n    }\r\n\r\n    {set class_check(body) to:\r\n        {_ Fix roman numerals being spoken as letters _}\r\n        {set body_array to split(body, \" \")}\r\n        {set pos to find(body_array, \"Class\") + 1}\r\n\r\n        {if pos > 0:\r\n            {if body_array[pos] = \"I\":\r\n                {set num to 1}\r\n            |elif body_array[pos] = \"II\":\r\n                {set num to 2}\r\n            |elif body_array[pos] = \"III\":\r\n                {set num to 3}\r\n            |elif body_array[pos] = \"IV\":\r\n                {set num to 4}\r\n            |elif body_array[pos] = \"V\":\r\n                {set num to 5}\r\n            }\r\n            {set body to token(body, \" \", pos, num)}\r\n        }\r\n        {body}\r\n    }\r\n\r\n    {F(\"Body Name Tidy\")}\r\n    {body} is\r\n\r\n    {if reportgravity > 0:\r\n        {if reportbody.gravity < 0.5:\r\n            a low-gravity\r\n        |elif reportbody.gravity < 2:\r\n            a medium-gravity\r\n        |elif reportbody.gravity < 4:\r\n            a high-gravity\r\n        |else:\r\n            an extremely high-gravity\r\n        }\r\n    |else:\r\n        a\r\n    }\r\n\r\n    {if reportTerraformState = 1:\r\n        {if reportbody.terraformstate = \"Candidate for terraforming\":\r\n            terraformable\r\n        |elif reportbody.terraformstate = \"Terraformed\":\r\n            terraformed\r\n        }\r\n    }\r\n\r\n    {if reportbody.planettype:\r\n        {class_check(reportbody.planettype)}\r\n    |else:\r\n        {body_type}\r\n    }\r\n\r\n    {if reportRings = 1 && len(reportbody.rings) > 0:\r\n        with {if len(reportbody.rings) = 1: a}\r\n        {if find(reportbody.reserves, \"Pristine\") > -1:\r\n            pristine\r\n        |elif find(reportbody.reserves, \"Major\") > -1:\r\n            rich\r\n        }\r\n        {set ringname to []}\r\n        {set ringcomposition to []}\r\n        {for Ring in reportbody.rings:\r\n            {set ringcomposition to cat(ringcomposition, [Ring.composition])}\r\n        }\r\n        {if len(ringcomposition) > 0:\r\n            {List(ringcomposition)}\r\n        }\r\n        {if find(ringname[0], \"Belt\") > -1: \r\n            {set ring to \"belt\"}\r\n        |else:\r\n            {set ring to \"ring\"}\r\n        }\r\n        {ring}{if len(reportbody.rings) > 1:s}\r\n    }\r\n\r\n    {if reportTerraformState = 1 && reportbody.terraformstate = \"Terraforming\":\r\n      in the process of being terraformed\r\n    }\r\n\r\n    {if type(reportbody.landable) != \"void\": \r\n        that is\r\n        {if !reportbody.landable:un}suitable\r\n        for landing\r\n    }\r\n    . {_ note the full stop}\r\n\r\n    {_ Radius}\r\n    {if reportRadius = 1 && reportbody.radius:\r\n        {set radius to round(reportbody.radius)}\r\n\r\n        It has a radius of {radius} kilometers,\r\n\r\n        {set compare_radius to radius / 6371}\r\n        {compare(compare_radius)}\r\n        the {OneOf(\"size\",\"radius\")} of Earth\r\n        {if reportMass = 0:.}\r\n    }\r\n\r\n    {_ Earth Mass}\r\n    {if reportMass = 1 && reportbody.earthmass:\r\n        {if reportRadius = 1 && reportbody.radius:\r\n            and\r\n        |else:\r\n            It is\r\n        }\r\n        {compare(reportbody.earthmass)}\r\n        Earth's mass.\r\n    }\r\n\r\n    {if reportRotation = 1 && reportbody.rotationalperiod:\r\n        {set rotation to round(reportbody.rotationalperiod, 1)}\r\n        It has a\r\n        {if rotation < -20.0:\r\n            slow retrograde\r\n        |elif rotation < -0.5:\r\n            retrograde\r\n        |elif rotation < 0:\r\n            fast retrograde\r\n        |elif rotation <= 0.5:\r\n            fast\r\n        |elif rotation > 20.0:\r\n            slow\r\n        }\r\n        rotational period of {Humanise(rotation)}\r\n        day{if Humanise(rotation) != \"1\":s}\r\n        {if reportbody.tidallylocked:\r\n           and is tidally-locked\r\n        }.\r\n    }\r\n\r\n    {if reportVolcanism: {F(\"Body volcanism report\")} }\r\n\r\n    {if reportAtmosphere: {F(\"Body atmosphere report\")} }\r\n\r\n    {if reportMaterials: {F(\"Body materials report\")} }\r\n\r\n    {if reportScanValue: {F(\"Report last scan value\")} }\r\n}\r\n\r\n{SetState('scanned_yet', reportbody.name)}\r\n",
      "default": false,
      "name": "Body report",
      "description": "Function to report on the details of the contextual body"
    },
    "Body scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'body')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_body_system', system.name)}\r\n{SetState('eddi_context_body_name', event.name)}\r\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\r\n\r\n\r\n{if state.lastscanbody != event.name:\r\n\r\n    {if event.estimatedvalue:\r\n        {SetState(\"eddi_context_system_value\", state.eddi_context_system_value + event.estimatedvalue)}\r\n        {SetState(\"eddi_context_session_scan_value\", state.eddi_context_session_scan_value + event.estimatedvalue)}\r\n    }\r\n\r\n    {Pause(1000)}\r\n\r\n    {OneOf(\"Scan\", \"Analysis\", \"Scan and analysis\")}\r\n    {Occasionally(3, \"of body\")} {OneOf(\"complete\", \"completed\")}.\r\n\r\n    {if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n        {F(\"Body report\")}\r\n    }\r\n\r\n    {SetState('lastscanbody', event.name)}\r\n}\r\n",
      "default": false,
      "name": "Body scanned",
      "description": "Triggered when you complete a scan of a planetary body"
    },
    "Body volcanism report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{_ Fetch from context }\r\n{if event:\r\n    {set reportbody to BodyDetails(event.name, system.name)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    {_ If it's still not possible to get the body name...  _}\r\n    I'm\r\n    {OneOf(\"not sure\",\"unsure\")}\r\n    {Occasionally(2,\"of\")}\r\n    which body\r\n    {OneOf(\"you are\",\"you're\")}\r\n    {OneOf(\"asking about\",\"referring to\")}.\r\n\r\n|else:\r\n    {if (reportbody.volcanism && len(reportbody.volcanism) > 0):\r\n\r\n        {if !body:\r\n            {F(\"Body Name Tidy\")}\r\n            {body} has\r\n        |else:\r\n            {OneOf(\"Sensors detect\", \"This {body_type} has\")}\r\n        }\r\n\r\n        {if reportbody.volcanism.type = \"Geysers\":\r\n            {set amount to \"numbers\"}\r\n            {set type to \"geysers\"}\r\n        |else:\r\n            {set amount to \"levels\"}\r\n            {set type to OneOf(\"lava flows\", \"magma flows\")}\r\n        }\r\n\r\n        {if reportbody.volcanism.invariantAmount = \"Major\":\r\n            high {amount} of\r\n        |elif reportbody.volcanism.invariantAmount = \"Minor\":\r\n            low {amount} of\r\n        }\r\n        active {reportbody.volcanism.composition} {type}\r\n        {Occasionally(2, \"{OneOf('at', 'on')} the surface\")}.\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Body volcanism report",
      "description": "Report on the volcanism of the contextual body"
    },
    "Bond awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.awardingfaction)}\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Add\")}\r\n\r\n{OneOf(\"Target\",\"Enemy combatant\",\"Band it\",\"{P('Bo-ghee')}\",\"Target {event.victimfaction}\",\"{event.victimfaction} ship\")}\r\n{OneOf(\"destroyed\",\"eliminated\",\"is toast\",\"down\")},\r\n\r\n{OneOf(\"That's another {event.reward} credits\",\"{event.reward} credits awarded\",\"{event.reward} credits more in the bank\",\"collected {event.reward} credits\")}\r\n\r\n{Occasionally(3,\"from {event.awardingfaction}\")}.\r\n\r\n{Pause(250)}\r\n\r\n{Occasionally(20,\"Commander Darkcyde would be proud!\")}\r\n\r\n{Occasionally(3,\"{OneOf('Keep an-eye on your six','Stay frosty out here','Check your six','Pick your next target')} Commander!\")}\r\n",
      "default": false,
      "name": "Bond awarded",
      "description": "Triggered when you are awarded a combat bond"
    },
    "Bond redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bond')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bond_amount', event.amount)}\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Delete\")}\r\n\r\nCombat bonds for {Humanise(event.amount)} credits \r\n{Occasionally(2, OneOf(\"have been\", \"have now been\"))}\r\n{OneOf(\"redeemed\", \"claimed\")}\r\n\r\n{Occasionally(2, \"\r\n   {if len(event.rewards) = 1:\r\n      from {event.rewards[0].faction}\r\n   |else:\r\n      , with\r\n      {set cur to 0}\r\n      {set length to len(event.rewards) - 1}\r\n      {while cur < len(event.rewards):\r\n         {Humanise(event.rewards[cur].amount)} credits from\r\n         {event.rewards[cur].faction}\r\n         {set cur to cur + 1}\r\n         {if cur = length: and\r\n         |elif cur < length:,\r\n         }\r\n      }\r\n   }\r\n\")}.\r\n\r\n{if event.brokerpercentage && event.brokerpercentage > 0:\r\n   after deducting {OneOf(\"payments\", \"fees\")} of\r\n   {ceil((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage)} credits.\r\n}\r\n",
      "default": false,
      "name": "Bond redeemed",
      "description": "Triggered when you redeem a combat bond"
    },
    "Bounty awarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bounty_name', event.target)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.reward)}\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Add\")}\r\n\r\n{Pause(500)}\r\n{if len(event.rewards) = 1:\r\n   Bounty {OneOf(\"voucher\",\"claim\")} of {Humanise(event.reward)} credits \r\n   {OneOf(\"received from\",\"awarded by\")} the {event.rewards[0].faction}\r\n|elif len(event.rewards) > 1:\r\n   {len(event.rewards)} bounty {OneOf(\"vouchers\",\"claims\")} {OneOf(\"received\",\"awarded\")} for\r\n   {OneOf(\"a total\",\"the sum\")} of {Humanise(event.reward)} credits from\r\n\r\n   {set cur to 0}\r\n   {set length to len(event.rewards) - 1}\r\n   {for rewards in event.rewards:\r\n      {if rewards.faction = \"Alliance\" || rewards.faction = \"Empire\" || rewards.faction = \"Federation\": the}\r\n      {rewards.faction}\r\n      {set cur to cur + 1}\r\n      {if cur = length: and\r\n      |elif cur < length:,\r\n      }\r\n   }\r\n}\r\n\r\n{if event.shared: {OneOf(\"to share between yourself and\",\"shared with\")} your wing-mates,}\r\n\r\nfor the {OneOf(\"destruction\",\"termination\")} of\r\n\r\n{OneOf(\"your target,\",\"target\")}\r\n\r\n{if event.target = \"skimmer\":\r\n   {P(event.faction)} Skimmer\r\n|else:\r\n   {set shiptype to ShipDetails(event.target).model}\r\n   {F(\"TargetType\")}\r\n   {Occasionally(2,\"{Occasionally(2,'{P(ShipDetails(event.target).manufacturer)}')} {P(shiptype)}\")}\r\n   {Occasionally(2,\", a {OneOf('criminal','wanted','wanted criminal')}\r\n   {OneOf('ship','vessel')} \")}\r\n   {Occasionally(2,\"{OneOf('aligned with','a member of')} {P(event.faction)}\")}\r\n}.\r\n",
      "default": false,
      "name": "Bounty awarded",
      "description": "Triggered when you are awarded a bounty"
    },
    "Bounty incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_bounty_name', event.victim)}\r\n{SetState('eddi_context_bounty_faction', event.faction)}\r\n{SetState('eddi_context_bounty_amount', event.bounty)}\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Add\")}\r\n\r\n{OneOf(\"{P(event.faction)} just put a bounty of {event.bounty} credits on your head for {event.crime}.\",\r\n       \"You {Occasionally(2,'just')} {OneOf('incurred','recieved')} a bounty of {event.bounty} credits\r\n        {OneOf('from {P(event.faction)} for {event.crime}','for {event.crime} from {P(event.faction)}')}\"\r\n      )}.\r\n",
      "default": false,
      "name": "Bounty incurred",
      "description": "Triggered when you incur a bounty"
    },
    "Bounty paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\n\r\nPaid bounty of {Humanise(event.amount)} credits.\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Delete\")}\r\n\r\n{if event.brokerpercentage:\r\n  {Pause(1000)}\r\n  The Broker has taken\r\n  {floor((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage)} credits.\r\n}",
      "default": false,
      "name": "Bounty paid",
      "description": "Triggered when you pay a bounty"
    },
    "Bounty redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'bounty')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_bounty_amount', event.amount)}\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Delete\")}\r\n\r\nBounty vouchers for {Humanise(event.amount)} credits redeemed\r\n\r\n{if len(event.rewards[0].faction) > 0:\r\n    {Occasionally(2, \"by\r\n        {set cur to 0}\r\n        {set length to len(event.rewards) - 1}\r\n        {while cur < len(event.rewards):\r\n            {set faction to event.rewards[cur].faction}\r\n            {if faction = 'Alliance' || faction = 'Empire' || faction = 'Federation': the}\r\n            {faction}\r\n            {set cur to cur + 1}\r\n            {if cur = length: and\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n    \")}\r\n}\r\n\r\n{if event.brokerpercentage && event.brokerpercentage > 0:\r\n    after deducting\r\n    {OneOf(\"payments\", \"fees\")} of\r\n    {ceil((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage)} credits.\r\n}.\r\n",
      "default": false,
      "name": "Bounty redeemed",
      "description": "Triggered when you redeem a bounty voucher"
    },
    "Cargo depot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo depot }\r\n{_ Triggered when engaging with a mission depot }\r\n\r\n\r\n{if event.updatetype = \"Collect\":\r\n    You have collected {event.amount} tonne{if event.amount != 1:s} of {event.commodity} from the mission depot.\r\n|elif event.updatetype = \"Deliver\":\r\n    You have delivered {event.amount} tonne{if event.amount != 1:s} of {event.commodity} to the mission depot.\r\n\r\n    {Pause(200)}\r\n    {set remaining to event.totaltodeliver - event.delivered}\r\n    {set haulage to HaulageDetails(event.missionid)}\r\n\r\n    {if find(haulage.name, \"Wing\") > -1:\r\n        Wing\r\n    |elif find(haulage.name, \"Rank\") > -1:\r\n        Naval\r\n    |else:\r\n        Solo\r\n    }\r\n\r\n    {if remaining = 0:\r\n        mission requirements are now completed.\r\n    |else:\r\n        mission is now {round(event.delivered / event.totaltodeliver * 100, 0)} percent complete.\r\n    }\r\n}\r\n\r\n",
      "default": false,
      "name": "Cargo depot",
      "description": "Triggered when engaging with a mission depot"
    },
    "Cargo inventory": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Cargo inventory",
      "description": "Triggered when you obtain an inventory of your cargo"
    },
    "Cargo report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Cargo report }\r\n{_ Report current cargo manifest }\r\n\r\n{set cargocarried to 0}\r\n{set haulage to 0}\r\n{set illegal to false}\r\n{set stolen to false}\r\n\r\n{if len(inventory) > 0:\r\n    {for cargo in inventory:\r\n        {set cargocarried to cargocarried + cargo.total}\r\n        {set haulage to haulage + cargo.haulage}\r\n        {if cargo.stolen > 0: {set stolen to true}}\r\n        {if status.docked:\r\n            {for prohibited in station.prohibited:\r\n                {if cargo.name = prohibited: {set illegal to true}}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{if cargocarried > 0:\r\n    {if cargocarried = ship.cargocapacity:\r\n        Your cargo {OneOf(\"bay\", \"hold\")} is full\r\n    |else:\r\n        You are carrying {cargocarried} tonne{if cargocarried != 1:s}\r\n    }\r\n\r\n    {if len(inventory) = 1:\r\n        {if inventory[0].name = \"Limpet\":\r\n            of limpets.\r\n        |else:\r\n            of {inventory[0].name}.\r\n            {if haulage = cargocarried:\r\n                Note: All cargo is mission related haulage.\r\n            }\r\n        }\r\n    |else:\r\n        {if cargocarried < ship.cargocapacity: of cargo}.\r\n        {Occasionally(2, \"Cargo\")} {OneOf(\"Manifest\", \"Inventory\")} is as follows:\r\n\r\n        {set c to []}\r\n        {for cargo in inventory:\r\n            {if cargo.total > 0:\r\n                {set c to cat(c, [cargo])}\r\n            }\r\n        }\r\n\r\n        {set cur to 0}\r\n        {set length to len(c) - 1}\r\n        {for cargo in c:\r\n            {cargo.total} tonne{if cargo.total != 1:s} of \r\n            {if cargo.name = \"Limpet\":\r\n                limpets\r\n            |else:\r\n                {cargo.name}\r\n            }\r\n            {set cur to cur + 1}\r\n            {if cur = length: and\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n        {if haulage > 0:\r\n            . Note: {haulage} tonne{if haulage != 1:s} of your manifest is mission related haulage\r\n        }\r\n    }.\r\n\r\n    {if cargocarried < ship.cargocapacity:\r\n        {set free to ship.cargocapacity - cargocarried}\r\n        You {OneOf(\"have {free} tonne{if free != 1:s} free\",\r\n            \"have {free} tonne{if free != 1:s} of free space\",\r\n            \"can carry an additional {free} tonne{if free != 1:s}\")}.\r\n    }\r\n\r\n    {if stolen || illegal:\r\n        Warning: You are carrying\r\n        {if stolen: stolen goods}\r\n        {if illegal:\r\n            {if stolen:, and }\r\n            goods that are illegal in this jurisdiction\r\n        }.\r\n    }\r\n\r\n|else:\r\n    {OneOf(\"Your cargo bay is empty.\",\"You have no cargo.\",\"You are carrying no cargo.\")}\r\n}\r\n",
      "default": false,
      "name": "Cargo report",
      "description": "Report current cargo manifest"
    },
    "Cargo scoop": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": null,
      "default": true,
      "name": "Cargo scoop",
      "description": "Triggered when you deploy or retract your cargo scoop"
    },
    "Cargo updated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo updated }\r\n{_ Triggered when the cargo inventory is updated }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'cargo')}\r\n{SetState('eddi_context_last_action', 'updated')}\r\n{SetState('eddi_context_cargo_carried', event.cargocarried)}\r\n",
      "default": true,
      "name": "Cargo updated",
      "description": "Triggered when the cargo inventory is updated"
    },
    "Cargo wingupdate": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Cargo wingupdate }\n{_ Triggered when a wing-mate collects or delivers cargo for a wing mission }\n\n\n{if event.updatetype = \"Collect\":\n    Seu colega de esquadrão coletou {event.amount} tonelada{if event.amount != 1:s}\n    {if event.commodity != \"Unknown\": de {event.commodity}} no depósito da missão.\n|elif event.updatetype = \"Deliver\":\n    Seu colega de esquadrão entregou {event.amount} tonelada{if event.amount != 1:s} \n    {if event.commodity != \"Unknown\": de {event.commodity}} no depósito da missão.\n}\n\n{Pause(500)}\n{set remaining to event.totaltodeliver - event.delivered}\n{if remaining = 0:\n    Requerimentos da missão de esquadrão foram concluídos.\n|elif event.updatetype = \"Deliver\":\n    A missão de esquadrão está agora {round(event.delivered / event.totaltodeliver * 100, 0)} porcento finalizada.\n}\n\n",
      "default": true,
      "name": "Cargo wingupdate",
      "description": "Triggered when a wing-mate collects or delivers cargo for a wing mission"
    },
    "Cleared save": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'save')}\r\n{SetState('eddi_context_last_action', 'clear')}\r\n\r\nDeleting {OneOf(\"system\",\"personality engramm\")}. Goodbye {F(\"Honorific\")}.  It was a pleasure to serve you.\r\n\r\n{_ Clear Fines & Bounties}\r\n{F(\"FinesBounties_Initialise\")}\r\n",
      "default": false,
      "name": "Cleared save",
      "description": "Triggered when you clear your save"
    },
    "Cockpit breached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'cockpit')}\r\n{SetState('eddi_context_last_action', 'breach')}\r\n\r\nDanger!\r\n\r\n{OneOf(\"Cockpit\",\"Canopy\")}\r\n\r\n{OneOf(\"Breached\",\"{Occasionally(2,'structural')} integrity compromised!\")}.\r\n\r\n{OneOf(\"Rem-lock {P('rebreether')}\",\"Reserve oxygen\")} now activated.\r\n",
      "default": false,
      "name": "Cockpit breached",
      "description": "Triggered when your ship's cockpit is broken"
    },
    "Combat promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'rank')}\r\n{SetState('eddi_context_last_action', 'promotion')}\r\n{SetState('eddi_context_rank_name', 'combat')}\r\n{SetState('eddi_context_rank_amount', event.rating)}\r\n\r\nYou have been recognised for your {OneOf(\"combat skills\",\"skills in combat\")} {F(\"Honorific\")}.\r\n\r\nYou {OneOf(\"are now at\",\"have achieved\")} the rank of {cmdr.combatrating.name}.\r\n",
      "default": false,
      "name": "Combat promotion",
      "description": "Triggered when your combat rank increases"
    },
    "Commander continued": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Commander continued }\r\n{_ Triggered when you continue an existing game }\r\n\r\n\r\n{SetState('eddi_context_last_subject', 'load_game')}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_body_name', body.name)}\r\n{SetState('eddi_context_station_name', station.name)}\r\n{SetState('eddi_context_lastdocked', station.name)}\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n\r\n{_ If VoiceAttack is not used, set Auto Route to no, and set default Routing system _}\r\n{if state.eddi_context_mission_route_useauto = \"\" || state.eddi_context_mission_route_useauto = null:\r\n    {SetState('eddi_context_mission_route_useauto', \"no\")}\r\n    {SetState('missionsrouteuseeddi', \"no\")}\r\n}\r\n\r\n{set time to token(format(SecondsSince(0), \"dl:yyyy-MM-dd HH:mm:ss\"), \" \", 1)}\r\n{set time to cast(token(time, \":\", 0), \"n\")}\r\n\r\nGood\r\n{if time < 12:\r\n    morning\r\n|elif time > 11 && time < 17:\r\n    afternoon\r\n|else:\r\n    evening\r\n}\r\n\r\n{F(\"Honorific\")}, welcome back.\r\n\r\n{set station to F(\"Mission check station\")}\r\n{set system to F(\"Mission check system\")}\r\n{set expiring to F(\"Mission Check Expiring\")}\r\n\r\n{if station: {station}\r\n|elif system: {system}\r\n|else: {F(\"Mission check galaxy\")}\r\n}\r\n\r\n{if expiring: {expiring}}\r\n\r\n\r\n{_ Set up Mission Route from saved data _}\r\n{set missionsdata to split(state.missionsdata, \"+=\")}\r\n{SetState('missionsrouteuseeddi', missionsdata[0])}\r\n{SetState('missionsroutetype', missionsdata[1])}\r\n{SetState('missionsdestination', missionsdata[2])}\r\n{SetState('missionsroutedistance', missionsdata[3])}\r\n{SetState('missionsroute', missionsdata[4])}\r\n\r\n{if missionsCount > 0:\r\n    {SetState('to_system', state.missionsdestination)}\r\n    {if missionsCount > 1: {OneOf(\"Primary\", \"First\", \"Initial\")} }\r\n    {Occasionally(2,\"Mission\")} destination {state.to_system},\r\n    {Occasionally(2, \"{OneOf('has been', 'is')}\")} {OneOf(\"locked\", \"set\")}.\r\n\r\n    {SetState('from_system', state.eddi_context_system_name)}\r\n    {F(\"Mission Route Get Distance\")}\r\n    {if state.distance > 0:\r\n        Distance {Occasionally(2,\"to {OneOf('system','target','{state.to_system}')}\")}\r\n        is {state.distance)} light years.\r\n        {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n    }\r\n}\r\n\r\n{_ Check Fines & Bounties}\r\n{F(\"FinesBounties_CheckShip\")}\r\n{F(\"FinesBounties_CheckContacts\")}\r\n\r\n\r\n{set fixed to false}\r\n{set gimbal to false}\r\n{set turret to false}\r\n{set weapons_array to \"\"}\r\n\r\n{for hp in ship.hardpoints:\r\n\r\n    {if type(hp.module.mount) != \"void\":\r\n        {for index, value in hp.module.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            {SetState('eddi_weapons_fixed', true)}\r\n        |elif mount = 1:\r\n            {SetState('eddi_weapons_gimbal', true)}\r\n        |elif mount = 2:\r\n            {SetState('eddi_weapons_turret', true)}\r\n        }\r\n        {set weapons_array to cat(weapons_array, \"0\", mount, \" \")}\r\n    }\r\n}\r\n\r\n{SetState('eddi_weapons_array', weapons_array)}\r\n\r\n{SetState('loading', true)}\r\n",
      "default": false,
      "name": "Commander continued",
      "description": "Triggered when you continue an existing game"
    },
    "Commander progress": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Commander progress",
      "description": "Triggered when your progress is reported"
    },
    "Commander ratings": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Commander ratings",
      "description": "Triggered when your ratings are reported"
    },
    "Commander started": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{SetState('eddi_context_last_subject', 'load_game')}\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_body_name', body.name)}\r\n{SetState('eddi_context_station_name', station.name)}\r\n{SetState('eddi_context_lastdocked', station.name)}\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n\r\n{_ If VoiceAttack is not used, set Auto Route to no, and set default Routing system _}\r\n{if state.eddi_context_mission_route_useauto = \"\" || state.eddi_context_mission_route_useauto = null:\r\n    {SetState('eddi_context_mission_route_useauto', \"no\")}\r\n    {SetState('missionsrouteuseeddi', \"no\")}\r\n}\r\n\r\n{set time to token(format(SecondsSince(0), \"dl:yyyy-MM-dd HH:mm:ss\"), \" \", 1)}\r\n{set time to cast(token(time, \":\", 0), \"n\")}\r\n\r\nGood\r\n{if time < 12:\r\n    Morning\r\n|elif time > 11 && time < 17:\r\n    Afternoon\r\n|else:\r\n    Evening\r\n}\r\n\r\nand welcome aboard {F(\"Honorific\")}.\r\n\r\n{_ Clear Fines & Bounties}\r\n{F(\"FinesBounties_Initialise\")}\r\n",
      "default": false,
      "name": "Commander started",
      "description": "Triggered when you start a new game"
    },
    "Commodity collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_cargo_name', event.commodity)}\r\n\r\n{if event.commodity != \"Occupied Escape Pod\":\r\n    {OneOf(\"Cargo\",\"Commodity\")} {OneOf(\"container\",\"canister\")}\r\n    {if event.commodity:\r\n        of\r\n    }\r\n}\r\n\r\n{if event.commodity:\r\n    {event.commodity},\r\n}\r\n\r\n{OneOf(\"stowed\",\"loaded\",\"now\")} {OneOf(\"in the hold\",\"in the cargo bay\",\"in the cargo hold\",\"on board\")}.\r\n",
      "default": false,
      "name": "Commodity collected",
      "description": "Triggered when you pick up a commodity in your ship or SRV"
    },
    "Commodity ejected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'eject')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n",
      "default": true,
      "name": "Commodity ejected",
      "description": "Triggered when you eject a commodity from your ship or SRV"
    },
    "Commodity purchase check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for commodity in station.commodities:\r\n    {if commodity.stock > 0 && commodity.buyprice < commodity.avgprice:\r\n        {set discount to commodity.avgprice - commodity.buyprice}\r\n        {if discount > best.avgprice - best.buyprice:\r\n            {set thirdbest to secondbest}\r\n            {set secondbest to best}\r\n            {set best to commodity}\r\n        |elif discount > secondbest.avgprice - secondbest.buyprice:\r\n            {set thirdbest to secondbest}\r\n            {set secondbest to commodity}\r\n        |elif discount > thirdbest.avgprice - thirdbest.buyprice:\r\n            {set thirdbest to commodity}\r\n        }\r\n    }\r\n}\r\n\r\n{if best:\r\n    O mercado local está vendendo {best.name} a um bom preço\r\n    {if secondbest\r\n       , bem como {secondbest.name}\r\n        {if thirdbest:\r\n            e {thirdbest.name}\r\n        }\r\n    }\r\n.}\r\n",
      "default": true,
      "name": "Commodity purchase check",
      "description": "Check to see which commodities are the best to purchase"
    },
    "Commodity purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'purchase')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{if event.amount = 1:\r\n   You have just purchased one tonne of {event.commodity} for {event.price} credits.\r\n|elif event.amount > 1:\r\n    You have just purchased {event.amount} tonnes of {event.commodity} at {event.price} credits per tonne.  Total cost is {Humanise(event.amount * event.price)} credits.\r\n}\r\n\r\n{set total_required to 0}\r\n{set total_acquired to 0}\r\n\r\n{for mission in missions:\r\n    {if mission.commodity = event.commodity && mission.type = \"Collection\":\r\n        {set required to true}\r\n        {set total_required to total_required + mission.amount - HaulageDetails(mission.missionid).delivered}\r\n    }\r\n}\r\n\r\n{set total_acquired to event.amount + CargoDetails(event.commodity).total}\r\n\r\n{if required = true:\r\n    {if total_acquired >= total_required:\r\n        You now have enough for all your missions\r\n    |else:\r\n        {set need to total_required - total_acquired}\r\n        You still need {need} more tonne{if need != 1:s} of {event.commodity} for all your missions\r\n    }.\r\n}\r\n",
      "default": false,
      "name": "Commodity purchased",
      "description": "Triggered when you buy a commodity from the markets"
    },
    "Commodity refined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'refine')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n\r\n{Occasionally(2,\"One {OneOf('unit','tonne')} of\")} {event.commodity} {OneOf(\"refined\",\"processed\")}.\r\n",
      "default": false,
      "name": "Commodity refined",
      "description": "Triggered when you refine a commodity from the refinery"
    },
    "Commodity sale check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Commodity sale check}\r\n{_ Check to see which commodities can be sold here}\r\n\r\n\r\n{_ Function to find a given commodity in market}\r\n{set market(commodity) to:\r\n    {for marketcommodity in station.commodities:\r\n        {if marketcommodity.name = commodity.name:\r\n            {return marketcommodity}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to find an illegal mission related to the commodity}\r\n{set illegalmission(haulageData) to:\r\n    {for haulage in haulageData:\r\n        {if haulage.illegal:\r\n            {return true}\r\n        }\r\n    }\r\n    {return false}\r\n}\r\n\r\n{set totalprofit to 0}\r\n{set missioncommodities to []}\r\n{set profitablecommodities to []}\r\n{set stolencommodities to []}\r\n{set unknowncommodities to []}\r\n\r\n{_ set this as your max to list before total is used instead}\r\n{set maxcommoditycount to 5}\r\n\r\n{for cargo in inventory:\r\n    {if cargo.name != 'Limpet':\r\n        {set marketcommodity to market(cargo.commodity)}\r\n        {set illegal to illegalmission(cargo.haulageData)}\r\n        {set profit to (marketcommodity.sellprice - cargo.price) * cargo.owned}\r\n\r\n        {if cargo.stolen > 0 && !illegal:\r\n            {set stolencommodities to cat(stolencommodities, [cargo.commodity])}\r\n        |elif cargo.haulage > 0:\r\n            {set missioncommodities to cat(missioncommodities, [cargo.commodity])}\r\n        |elif !marketcommodity && lcase(cargo.category) != \"powerplay\" && cargo.total > 0:\r\n            {set unknowncommodities to cat(unknowncommodities, [cargo.commodity])}\r\n        |elif marketcommodity && profit > 0:\r\n            {set profitablecommodities to cat(profitablecommodities, [cargo.commodity])}\r\n            {set totalprofit to totalprofit + profit}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Let the user know about any commodities they can sell here for a profit}\r\n{if len(profitablecommodities) > 0:\r\n    You can sell\r\n    {if len(profitablecommodities) = len(ship.cargo) - len(stolencommodities) - len(missioncommodities):\r\n        all of your\r\n        {if len(stolencommodities) > 0: {OneOf(\"legal\",\"legitimate\")} }\r\n        {if len(missioncommodities) > 0: non-mission}\r\n        cargo {Occasionally(2,\"commodities\")}\r\n    |elif len(profitablecommodities) > maxcommoditycount:\r\n        {len(profitablecommodities)} commodit{if len(profitablecommodities) > 1:ies |else:y}\r\n    |else:\r\n        {set cur to 0}\r\n        {set length to len(profitablecommodities) - 1}\r\n        {while cur < len(profitablecommodities):\r\n            {profitablecommodities[cur].localizedName}\r\n            {set cur to cur + 1}\r\n            {if cur = length: and\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n    }\r\n    here for a profit of {totalprofit} credits.\r\n}\r\n\r\n{_ Let the user know about any commodities about which we are unsure if they can sell for a profit}\r\n{if len(unknowncommodities) > 0:\r\n    You could {if len(profitablecommodities) > 0: also } sell your\r\n        {set cur to 0}\r\n        {set length to len(unknowncommodities) - 1}\r\n        {while cur < len(unknowncommodities):\r\n            {unknowncommodities[cur].localizedName}\r\n            {set cur to cur + 1}\r\n            {if cur = length: and\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n    , although check potential profits for {if len(unknowncommodities) > 1: these |else: this}\r\n    before confirming the transaction.\r\n}\r\n\r\n{_ Let the user know about any stolen commodities they can sell on the black market}\r\n{if len(stolencommodities) > 0:\r\n    {if station.hasblackmarket:\r\n        You can fence your stolen\r\n        {set cur to 0}\r\n        {set length to len(stolencommodities) - 1}\r\n        {while cur < len(stolencommodities):\r\n            {stolencommodities[cur].localizedName}\r\n            {set cur to cur + 1}\r\n            {if cur = length: and\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n        here.\r\n    |else:\r\n        Reminder: you {OneOf(\"have stolen cargo on-board\", \"have stolen goods on-board\", \"are carrying stolen goods\", \"are carrying stolen cargo\")}.\r\n    }\r\n}\r\n\r\n{_ Let the user know about any mission related commodities they can sell on the black market}\r\n{if len(missioncommodities) > 0 && station.hasblackmarket:\r\n    You can {if len(stolencommodities) > 0: also} {OneOf('offload', 'dump')} your mission related\r\n    {set cur to 0}\r\n    {set length to len(missioncommodities) - 1}\r\n    {while cur < len(missioncommodities):\r\n        {missioncommodities[cur].localizedName}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }\r\n    here.\r\n}\r\n",
      "default": false,
      "name": "Commodity sale check",
      "description": "Check to see which commodities can be sold here"
    },
    "Commodity sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'commodity')}\r\n{SetState('eddi_context_last_action', 'sell')}\r\n{SetState('eddi_context_commodity_name', event.commodity)}\r\n{SetState('eddi_context_commodity_amount', event.amount)}\r\n\r\n{Occasionally(2,\"You have\")}\r\n{Occasionally(2,\"just\")}\r\nSold\r\n\r\n{if event.amount = 1:\r\n    one tonne of {event.commodity} for {event.price} credits\r\n|elif event.amount > 1:\r\n    {event.amount} tonnes of {event.commodity}\r\n    {Occasionally(2,\"at {event.price} credits per tonne.\")}\r\n    {OneOf(\"Total value is\",\"For\")}\r\n    {event.amount * event.price} credits\r\n}\r\n{if event.profit < 0:\r\n    with a loss of {-1 * event.profit * event.amount} credits\r\n|elif event.profit = 0:\r\n    and broke even on the trade\r\n|elif event.profit = event.price:\r\n    pure profit\r\n|else:\r\n    with a profit of {event.profit * event.amount} credits\r\n}.\r\n",
      "default": false,
      "name": "Commodity sold",
      "description": "Triggered when you sell a commodity to the markets"
    },
    "Community goal": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set Context _}\n{SetState('eddi_context_last_subject', 'community goal')}\n{_ Save goal location to context if there is only one goal present _}\n{if len(event.cgid) = 1:\n   {SetState('eddi_context_goal_system_name', event.system[0])}\n   {SetState('eddi_context_goal_station_name', event.station[0])}\n}\n\n{F('Honorific')}, \n\n{if len(event.name) > 1:\n    {OneOf(\"você mostrou interesse nos\", \"estou monitorando os\")}\n    seguintes objetivos da comunidade:\n|else: \n    O objetivo da comunidade,    \n}\n\n{set cur to 0}\n{while cur < len(event.name):\n\n   {if cur = 0 && len(event.name) = 1:\n      {_ nothing _}\n   |elif cur = 0 && len(event.name) > 1:\n      O primeiro,\n   |elif cur < (len(event.name) - 1):\n      O próximo, \n   |else:\n      O último,\n   }\n\n   {event.name[cur]},\n\n   {if event.iscomplete[cur]:\n      {OneOf(\"está completo\", \"foi finalizado\")} \n   |else: \n      {if (event.expiry[cur] / 3600) < 12:\n         {OneOf(\"está próximo de ser concluído\", \n                \"deve terminar em {Humanise(round(event.expiry[cur] / 3600, 1))} horas\", \n                \"está quase completo\")}\n      |else:\n         {OneOf(\"ainda não está completo\", \n                \"está ativo\", \n                \"está incompleto\")} \n      }\n   }\n\n   {if event.tier[cur]:\n       {OneOf(\"e alcançou\", \"e atualmente em\")} {event.tier[cur]}.\n       {if event.contribution[cur] > 0:\n           Sua recompensa esperada é\n           {Occasionally(2, \"atualmente\")}\n           {Occasionally(2, \"calculada em\")}\n           {Humanise(event.tierreward[cur])} créditos\n           {Occasionally(2, \"nos {event.percentileband[cur]}º percentual\")}\n       }\n   }.\n\n   {_ Create a comparison function _}\n   {set compare(stat) to:     \n       {if stat < 0.01:\n            apenas uma {OneOf(\"fração\", \"parte\")} do            \n       |elif stat < 0.10:\n            menos de um décimo do\n       |elif stat < 0.25:\n            menos de um quarto do\n       |elif stat < 0.5:\n            menos da metade do\n       |elif stat < 0.75:\n            menos que\n       |elif stat < 0.96: \n            {OneOf(\"fracionariamente\",\"apenas\")}\n            menos que\n       |elif stat < 1.05:\n            {OneOf(\"aproximadamente\",\"mais ou menos\",\"quase\")} \n            igual a\n       |elif stat < 1.25:\n            um pouco mais que\n       |elif stat < 1.5:\n            mais que\n       |elif stat < 2:\n            significativamente mais que\n       |else:\n            bem mais que\n       }\n    }\n    {set compare_contribution to (event.contribution[cur] / round(event.total[cur] / event.contributors[cur], 0))}\n\n    {if compare_contribution != 0:\n       {if event.toprank[cur]: \n          Parabéns! \n          Você é um dos {event.topranksize[cur]} top comandantes neste evento, tendo contribuído\n          {compare(compare_contribution)}\n          a média.\n       |else:\n          {Occasionally(2, \"Você contribuiu \n          {compare(compare_contribution)}\n          a média.\")}\n       }\n    }\n\n    {if !event.iscomplete[cur]:\n       Você pode \n       {if event.contribution[cur] > 0: \n          {OneOf(\"contribuir mais\", \"dar contribuições adicionais\")} \n       |else: \n          {OneOf(\"contribuir\", \"dar uma contribuição\")}\n       }\n       {if event.station[cur] = station.name:\n          {Occasionally(2, \"aqui\")}\n          {Occasionally(2, \"nesta estação\")}.\n       |elif event.system[cur] = system.name:\n          at {P(event.station[cur])}\n          {Occasionally(2, \"aqui\")}\n          {Occasionally(2, \"neste sistema\", \"no sistema atual\")}.\n       |else:\n          na {P(event.station[cur])},\n          {OneOf(\"em {P(event.system[cur])}\", \"no sistema {P(event.system[cur])}\" )}.\n       }\n    }\n\n    {set cur to cur + 1}\n    {Pause(1000)}\n}\n",
      "default": true,
      "name": "Community goal",
      "description": "Triggered when checking the status of a community goal"
    },
    "Controlling fighter": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Link neural\", \"Link\", \"Uplink\")} {Occasionally(2, \"com o caça\")} {OneOf(\"iniciado\", \"estabelecido\", \"acionado\")}.",
      "default": true,
      "name": "Controlling fighter",
      "description": "Triggered when you switch control from your ship to your fighter"
    },
    "Controlling ship": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Link neural\", \"Link\", \"uplink\")} {OneOf(\"terminado\", \"desativado\")}.",
      "default": true,
      "name": "Controlling ship",
      "description": "Triggered when you switch control from your fighter to your ship"
    },
    "Crew assigned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.name},\r\n\r\n{if event.role = \"Active\":\r\n    {OneOf(\"now on\",\"called to\")} active duty\r\n|else:\r\n    {OneOf(\"has earned some ar-an-ar\",\"standing down from active duty\")}\r\n}\r\n.",
      "default": false,
      "name": "Crew assigned",
      "description": "Triggered when you assign crew"
    },
    "Crew fired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'fire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} has been released from contract, and is no longer {OneOf(\"a member\",\"part\")} of {OneOf(\"the\",\"your\")} crew.\r\n",
      "default": false,
      "name": "Crew fired",
      "description": "Triggered when you fire crew"
    },
    "Crew hired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'hire')}\r\n{SetState('eddi_context_crew_name', event.name)}\r\n\r\n{event.name} has been hired, and {OneOf(\"has joined\",\"is now {OneOf('a member','part')} of\")} {OneOf(\"the\",\"your\")} crew.",
      "default": false,
      "name": "Crew hired",
      "description": "Triggered when you hire crew"
    },
    "Crew joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nVocê se juntou à tripulação de {event.captain}.",
      "default": true,
      "name": "Crew joined",
      "description": "Triggered when you join a crew"
    },
    "Crew left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.captain)}\r\n\r\nVocê deixou a tripulação de {event.captain}.",
      "default": true,
      "name": "Crew left",
      "description": "Triggered when you leave a crew"
    },
    "Crew member joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'join')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n{event.crew} juntou-se à sua tripulação.",
      "default": true,
      "name": "Crew member joined",
      "description": "Triggered when a commander joins your crew"
    },
    "Crew member launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'launch')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n{event.crew} lançou seu caça.",
      "default": true,
      "name": "Crew member launched",
      "description": "Triggered when a crew member launches the fighter"
    },
    "Crew member left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'leave')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\n{event.crew} deixou sua tripulação.",
      "default": true,
      "name": "Crew member left",
      "description": "Triggered when a commander leaves your crew"
    },
    "Crew member removed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'remove')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n\r\nYou have removed {event.crew} from your crew.",
      "default": false,
      "name": "Crew member removed",
      "description": "Triggered when you remove a commander from your crew"
    },
    "Crew member role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'crew')}\r\n{SetState('eddi_context_last_action', 'role')}\r\n{SetState('eddi_context_crew_name', event.crew)}\r\n{SetState('eddi_context_crew_role', event.role)}\r\n\r\n{if event.role = 'Idle':\r\n    {event.crew} está sem fazer nada\r\n|elif event.role = 'Fighter':\r\n    {event.crew} está manejando o caça agora\r\n|elif event.role = 'Gunner':\r\n    {event.crew} está manejando as armas agora\r\n}.\r\n",
      "default": true,
      "name": "Crew member role changed",
      "description": "Triggered when a crew member changes their role"
    },
    "Crew role changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.role = 'Gunner':\r\n  Agora você é um artilheiro desta tripulação.\r\n|elif event.role = 'Fighter':\r\n  Agora você um piloto de caça desta tripulação.\r\n|elif event.role = 'Idle':\r\n  Você foi dispensado do serviço.\r\n}",
      "default": true,
      "name": "Crew role changed",
      "description": "Triggered when your role in the crew changes"
    },
    "Damage check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Track if there is any damage}\r\n{set damaged to 0}\r\n\r\n{_ Announce hull health}\r\n{if ship.health < 100:\r\n    Hull at {Humanise(ship.health)}%.\r\n    {set damaged to 1}\r\n}\r\n\r\n{_ Announce critical module health}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{if ship.powerplant.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.powerplant])}\r\n|elif ship.powerplant.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.powerplant])}\r\n}\r\n\r\n{if ship.thrusters.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.thrusters])}\r\n|elif ship.thrusters.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.thrusters])}\r\n}\r\n\r\n{if ship.frameshiftdrive.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.frameshiftdrive])}\r\n|elif ship.frameshiftdrive.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.frameshiftdrive])}\r\n}\r\n\r\n{if ship.powerdistributor.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.powerdistributor])}\r\n|elif ship.powerdistributor.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.powerdistributor])}\r\n}\r\n\r\n{if ship.lifesupport.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.lifesupport])}\r\n|elif ship.lifesupport.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.lifesupport])}\r\n}\r\n\r\n{if ship.sensors.health < 60:\r\n    {set majordamage to cat(majordamage, [ship.sensors])}\r\n|elif ship.sensors.health < 100:\r\n    {set minordamage to cat(minordamage, [ship.sensors])}\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n    {set damaged to 1}\r\n    Major damage to\r\n\r\n    {set cur to 0}\r\n    {set length to len(majordamage) - 1}\r\n    {while cur < len(majordamage):\r\n        {majordamage[cur].name}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n}\r\n\r\n{if len(minordamage) > 0:\r\n    {set damaged to 1}\r\n    Minor damage to\r\n\r\n    {set cur to 0}\r\n    {set length to len(minordamage) - 1}\r\n    {while cur < len(minordamage):\r\n        {minordamage[cur].name}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n}\r\n\r\n{_ Announce other module health}\r\n\r\n{set minordamage to []}\r\n{set majordamage to []}\r\n\r\n{for compartment in ship.compartments:\r\n    {if compartment.module.health < 60:\r\n        {set majordamage to cat(majordamage, [compartment.module.name])}\r\n    |elif hardpoint.module.health < 100:\r\n        {set minordamage to cat(minordamage, [compartment.module.name])}\r\n    }\r\n}\r\n\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module.health < 60:\r\n        {set majordamage to cat(majordamage, [hardpoint.module.name])}\r\n    |elif hardpoint.module.health < 100:\r\n        {set minordamage to cat(minordamage, [hardpiont.module.name])}\r\n    }\r\n}\r\n\r\n{if len(majordamage) > 0:\r\n    {set damaged to 1}\r\n    {if len(majordamage) = 1:\r\n       One other ship component with major damage\r\n    |elif len(majordamage) > 1:\r\n        {len(majordamage)} other ship components with major damage\r\n    }\r\n    {if len(minordamage) = 1:\r\n       and one other ship component with minor damage\r\n    |elif len(minordamage) > 1:\r\n       and {len(minordamage)} other ship components with minor damage\r\n    }.\r\n|elif len(minordamage) = 1:\r\n    {set damaged to 1}\r\n    One other ship component with minor damage.\r\n|elif len(minordamage) > 1:\r\n    {set damaged to 1}\r\n    {len(minordamage)} other ship components with minor damage.\r\n}\r\n\r\n{if damaged = 0:\r\n    {OneOf(\"All systems fully operational.\", \"{ShipName()} is fully operational.\", \"{ShipName()} is undamaged.\")}\r\n}\r\n",
      "default": false,
      "name": "Damage check",
      "description": "Check on the levels of damage to your ship"
    },
    "Data scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Data scanned }\r\n{_ Triggered when scanning some types of data links }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'scan')}\r\n{SetState('eddi_context_last_action', 'data')}\r\n{SetState('eddi_context_data_scan_type', event.datalinktype)}\r\n\r\nData scan of {event.datalinktype} completed.",
      "default": false,
      "name": "Data scanned",
      "description": "Triggered when scanning some types of data links"
    },
    "Data voucher awarded": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'award')}\r\n{SetState('eddi_context_bond_amount', event.reward)}\r\n{SetState('eddi_context_bond_faction', event.payeefaction)}\r\n\r\n{set faction to event.payeefaction}\r\n\r\nData voucher awarded {OneOf(\"from\", \"by\")}\r\n\r\n{if faction = \"Empire\" || faction = \"Federation\" || faction = \"Alliance\": the }\r\n\r\n{faction} for {event.reward} credits.\r\n",
      "default": false,
      "name": "Data voucher awarded",
      "description": "Triggered when you are awarded a data voucher"
    },
    "Data voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'data_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_data_voucher_amount', event.amount)}\r\n\r\nData vouchers for {Humanise(event.amount)} credits redeemed\r\n\r\n{Occasionally(2, \"\r\n   {if len(event.rewards) > 0:\r\n      {OneOf(\"by\", \"courtesy of\")}\r\n      {set cur to 0}\r\n      {set length to len(event.rewards) - 1}\r\n      {while cur < len(event.rewards):\r\n         {P(event.rewards[cur].faction)}\r\n         {set cur to cur + 1}\r\n         {if cur = length: and\r\n         |elif cur < length:,\r\n         }\r\n      }\r\n   }\r\n\")}.\r\n\r\n{if event.brokerpercentage:\r\n   {Pause(1000)}\r\n   The Broker has taken {event.brokerpercentage} credits.\r\n}",
      "default": false,
      "name": "Data voucher redeemed",
      "description": "Triggered when you redeem a data voucher"
    },
    "Datalink message": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Datalink message",
      "description": "Triggered upon completion of Datalink scan"
    },
    "Died": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{if len(event.ships) > 0:\r\n\r\n    {set commanders to []}\r\n    {for cmdr in event.commanders:\r\n        {if find(cmdr, \"$ShipName\") > -1:\r\n           {_ Ignore NPC ships _}        \r\n        |else: \r\n           {set commanders to cat(commanders, [cmdr])}\r\n        }\r\n    }\r\n\r\n    {ShipName()} was\r\n    {Occasionally(2, \"just\")}\r\n    {OneOf(\"blown away\", \"terminated\", \"destroyed\")}\r\n\r\n    {if len(commanders) > 0:\r\n        by\r\n        {set cur to 0}\r\n        {set length to len(commanders) - 1}\r\n        {while cur < len(commanders):\r\n            {commanders[cur]} in a {event.ships[cur]} \r\n            with a combat ranking of {event.ratings[cur]}\r\n            {set cur to cur + 1}\r\n            {if cur = length: and\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{Pause(700)}\r\n\r\nPersonality {Occasionally(2,\"enngramm\")} transfer in progress. Please {OneOf(\"be more careful with\",\"take more care of\")} {OneOf(\"this\",\"your new\")} {OneOf(\"body\",\"body and ship\",\"ship\")}.\r\n\r\n{_ Clear ship of Fines & Bounties}\r\n{SetState('eddi_context_cmdrdied', \"yes\")}\r\n{F(\"FinesBounties_ClearShip\")}\r\n",
      "default": false,
      "name": "Died",
      "description": "Triggered when you have died"
    },
    "Discovery scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ This event currently is being written to the journal about 15 seconds after a discovery \"honk\" is completed. _}\r\n{_ Due to the extreme delay between the triggering action and the actual event, we are omitting any default script for the time being. _}",
      "default": true,
      "name": "Discovery scan",
      "description": "Triggered when performing a full system scan (honk)"
    },
    "Docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_lastdocked', event.station)}\r\n{SetState('eddi_context_docked',\"yes\")}\r\n{SetState('eddi_context_mission_accepted', \"no\")}\r\n\r\n{if event.state = \"Damaged\": Emergency}\r\nDocking complete.\r\n\r\n{Pause(1000)}\r\n\r\n{OneOf(\"Establishing uplink with\",\"Initiating link to\",\r\n       \"Connecting to\",\"Accessing\",\"Communicating with\",\"Linking to\")}\r\n{OneOf(\"local\",\"station\",\"{event.station}'s\")}\r\n{OneOf(\"data net\",\"network\",\"networks\",\"computers\",\"services\")}.\r\n{Pause(8300)}\r\n{OneOf(\"Uplink\",\"Link\",\"Access\",\"Connection\")}\r\n{OneOf(\"established\",\"confirmed\",\"authorised\",\"obtained\")}.\r\n\r\n{SetState('eddi_context_new_missions', \"no\")}\r\n{SetState('eddi_context_mission_destination_locked', \"no\")}\r\n\r\n\r\n{set crime to F(\"FinesBounties_CheckContacts\")}\r\n\r\n{if fine = 1 || bountyinc = 1 || bond = 1 || bountyawd = 1:\r\n    {crime}\r\n}",
      "default": false,
      "name": "Docked",
      "description": "Triggered when your ship docks at a station or outpost"
    },
    "Docking cancelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Pedido de pouso cancelado.",
      "default": true,
      "name": "Docking cancelled",
      "description": "Triggered when your ship cancels a docking request at a station or outpost"
    },
    "Docking denied": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\nNosso pedido de pouso foi negado\r\n\r\n{if event.reason = \"ActiveFighter\":\r\n    porque nosso caça está liberado\r\n|elif event.reason = \"Distance\":\r\n    porque estamos muito longe da estação\r\n|elif event.reason = \"Hostile\":\r\n    porque a facção controladora da estação não gosta da gente\r\n|elif event.reason = \"NoSpace\":\r\n    porque não há vagas disponíveis\r\n|elif event.reason = \"Offences\":\r\n    porque recentemente nós os ofendemos\r\n|elif event.reason = \"TooLarge\":\r\n    porque não há uma plataforma que possa acomodar o tamanho da nossa nave\r\n}.",
      "default": true,
      "name": "Docking denied",
      "description": "Triggered when your ship is denied docking at a station or outpost"
    },
    "Docking granted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'landing pad')}\r\n{SetState('eddi_context_landing_pad_system', system.name)}\r\n{SetState('eddi_context_landing_pad_station', event.station)}\r\n{SetState('eddi_context_landing_pad_station_model', event.stationtype)}\r\n{SetState('eddi_context_landing_pad_pad', event.landingpad)}\r\n\r\n{set station_type to event.stationDefinition.basename}\r\n\r\n{if station_type = \"Coriolis\" || station_type = \"Orbis\" ||\r\n    station_type = \"Bernal\" || station_type = \"AsteroidBase\":\r\n    {Pause(11000)}\r\n    {F(\"Landing pad report\")}\r\n|else:\r\n    {if station_type != \"Outpost\": {Pause(9000)} }\r\n    {Pause(2000)}\r\n    {Occasionally(2,\"Landing\")} Pad\r\n    {event.landingpad}\r\n    {OneOf(\"has been made\", \"is\")}\r\n    {OneOf(\"available\", \"free\")}\r\n    {OneOf(\"for {OneOf('landing', 'docking')}\", \"to {OneOf('use', 'dock at')}\")}.\r\n}\r\n",
      "default": false,
      "name": "Docking granted",
      "description": "Triggered when your ship is granted docking permission at a station or outpost"
    },
    "Docking requested": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Docking requested",
      "description": "Triggered when your ship requests docking at a station or outpost"
    },
    "Docking timed out": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Sem resposta à nossa solicitação de {OneOf(\"pouso\",\"docagem\")}.\r\n",
      "default": true,
      "name": "Docking timed out",
      "description": "Triggered when your docking request times out"
    },
    "Empire honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Forms of address taken from <https://en.wikipedia.org/wiki/Forms_of_address_in_the_United_Kingdom>}\r\n{if cmdr.empirerating.rank <= 4: {_ Commoner }\r\n   commander {Occasionally(3,\"{cmdr.name}\")}\r\n|elif cmdr.empirerating.rank = 5: {_ Knight / Dame }\r\n    {if cmdr.gender = \"Male\": \r\n        sir \r\n    |elif cmdr.gender = \"Female\": \r\n        madam\r\n    |else: \r\n        commander\r\n    }\r\n|elif cmdr.empirerating.rank <= 11: {_ Peer / Peeress }\r\n    {if cmdr.gender = \"Male\": \r\n        {OneOf(\"my lord\", \"your lordship\")}\r\n    |elif cmdr.gender = \"Female\": \r\n        {OneOf(\"my lady\", \"your ladyship\")}\r\n    |else: \r\n        commander\r\n    }\r\n|elif cmdr.empirerating.rank = 12:\r\n    your grace\r\n|elif cmdr.empirerating.rank = 13:\r\n    your royal highness\r\n|elif cmdr.empirerating.rank = 14:\r\n    your majesty\r\n}\r\n",
      "default": false,
      "name": "Empire honorific",
      "description": "Function to provide a suitable honorific for your commander when in the empire"
    },
    "Empire promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{set rank to when(cmdr.gender = \"Female\", event.femininerank, event.rank)}\r\n\r\n{F(\"Empire honorific\")},\r\n\r\n{OneOf(\"the Imperial Navy has {OneOf('granted you a promotion', 'promoted you', 'advanced you')} to the rank of {rank}\",\r\n       \"You have {OneOf(\\\"{OneOf('elevated your position','been promoted')} to\\\",\r\n                        \\\"been {OneOf('granted','bestowed')} a higher rank of\\\")} {rank} within the Imperial Navy\")}\r\n\r\n{Occasionally(2, \"for your service to the Empire\")}.\r\n\r\n{if event.rank = \"Outsider\":\r\n   You have been granted access to purchase the Imperial Eagle.\r\n|elif event.rank = \"Master\":\r\n   You have been granted access to purchase the Imperial Courier.\r\n|elif event.rank = \"Squire\":\r\n   You have been granted the honour of entering the {P(\"Archenar\")} system.\r\n|elif event.rank = \"Baron\":\r\n   You have been granted access to purchase the Imperial Clipper. And the honour of entering the {P(\"Summer-land\")} system.\r\n|elif event.rank = \"Earl\":\r\n   You have been granted the honour of entering the {P(\"Facece\")} system.\r\n|elif event.rank = \"Duke\":\r\n   You have been granted access to purchase the Imperial Cutter.\r\n|elif event.rank = \"King\":\r\n   You have attained the highest possible rank my liege.\r\n}\r\n",
      "default": false,
      "name": "Empire promotion",
      "description": "Triggered when your rank increases with the Empire"
    },
    "Engineer contributed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{event.engineer} thanks you for contributing {event.amount}\r\n\r\n{if event.contributiontype = \"Commodity\":\r\n    {set type to \"tonne\"}\r\n|elif event.contributiontype = \"Material\":\r\n    {if material.category = 'Data':\r\n        {set type to \"record\"}\r\n    |else:\r\n        {set type to \"fragment\"}\r\n    }\r\n    {set type to OneOf(\"unit\", \"sample\", type)}\r\n\r\n}\r\n{type}{if event.amount != 1:s}\r\nof {event.contribution}.",
      "default": false,
      "name": "Engineer contributed",
      "description": "Triggered when contributing resources to an engineer in exchange for access"
    },
    "Engineer progressed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"{event.engineer} has given you\",\"You now have\")}\r\n\r\naccess to grade {event.rank}\r\n\r\n{Occasionally(2,\"{OneOf('modd','modification')}\")}\r\n\r\n{OneOf(\"blueprints\",\"plans\")}.\r\n",
      "default": false,
      "name": "Engineer progressed",
      "description": "Triggered when you reach a new rank with an engineer"
    },
    "Entered CQC": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Entrando na Arena.",
      "default": true,
      "name": "Entered CQC",
      "description": "Triggered when you enter CQC"
    },
    "Entered normal space": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'disengage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n{SetState('eddi_context_supercruise', \"no\")}\r\n\r\n{_ If following a glide event, pause is not required. _}\r\n{if !(status.near_surface && status.fsd_status = \"masslock\"):\r\n    {Pause(3000)}\r\n}\r\n\r\n{if state.eddi_context_interdicted != \"yes\":\r\n\r\n    {Occasionally(2, \"{ShipName()} has\")}\r\n    {OneOf(\"left supercruise\", \"{OneOf('entered','returned to','dropped to')} normal space\")}\r\n\r\n    {if event.bodytype && event.bodytype != \"\":\r\n        {OneOf(\"near\", \"near to\", \"close to\", \"in the vicinity of\")}\r\n        {F(\"Body Name Tidy\")}\r\n\r\n        {if event.bodytype = \"Planet\":\r\n\r\n            {set time to SecondsSince(0) - state.eddi_context_approach_time}\r\n            {_ If time since last settlement approach is more than 1 minute _}\r\n            {if time < 60:\r\n\r\n                {set settlement to state.eddi_context_last_settlement}\r\n                {set station to StationDetails(settlement, event.system)}\r\n                {if station:\r\n                    {SetState('eddi_context_body_name', settlement)}\r\n                    {if find(station.model, \"Unknown\") = -1: {station.model},}\r\n                    {P(settlement)} on\r\n                    {set station_missions to F(\"Mission check station\")}\r\n                }\r\n            }\r\n            {body}.\r\n\r\n            {if station_missions:\r\n                {Pause(500)}\r\n                {station_missions}\r\n            }\r\n\r\n        |elif event.bodytype = \"Star\":\r\n            {body}.\r\n        |elif event.bodytype = \"Station\":\r\n            {set model to StationDetails(event.body, event.system).model}\r\n            {set type to token(model, \" \", 1)}\r\n            {if find(model, \"Unknown\") = -1:\r\n                {if type != \"\": {type} |else: {model} },\r\n            }\r\n            {P(event.body)}.\r\n            {if type = \"Starport\": {Pause(10000)} }\r\n            {F(\"Mission check station\")}.\r\n        |elif event.bodytype = \"PlanetaryRing\":\r\n            Ring-{token(event.body, \" \", find(split(event.body,\" \"),\"Ring\")-1)}, of {body}.\r\n        }\r\n    }\r\n}\r\n\r\n{SetState('eddi_context_interdicted', 'no')}\r\n",
      "default": false,
      "name": "Entered normal space",
      "description": "Triggered when your ship enters normal space"
    },
    "Entered signal source": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set warninglevel to:\r\n   {set entered to OneOf(\"Entered\", \"Dropped into\", \"Entering\")}\r\n   {if event.threat < 2:\r\n      {entered}\r\n   |elif event.threat = 2:\r\n      Caution: {entered} medium threat\r\n   |elif event.threat = 3:\r\n      Warning: {entered} high-threat\r\n   |elif event.threat = 4:\r\n      Danger: {entered} very high-threat\r\n   |elif event.threat = 5:\r\n      Extreme Danger: {Occasionally(2, entered)} very high-threat\r\n   |elif event.threat = 6:\r\n      Extreme Danger: {Occasionally(2, entered)} extremely high-threat\r\n   |elif event.threat = 7:\r\n      Extreme Danger: {Occasionally(2, entered)} ultra high-threat\r\n   |else:\r\n      Extreme Danger: {Occasionally(2, entered)} Unprecedented level {event.threat} threat\r\n   }\r\n}\r\n\r\n{set source to token(event.source, \"$USS_Type_\", 1)}\r\n\r\n{if source = \"Aftermath;\":\r\n   {set source to OneOf(\"combat aftermath\", \"dissippating combat\")}\r\n|elif ((source = \"Anomaly;\" || source = \"Salvage;\") && event.threat = 2):\r\n   {set warninglevel to entered}\r\n   {set source to OneOf(\"alien\", \"xeno\", \"non-human\", \"Thargoid probe\")}\r\n|elif (source = \"Anomaly;\" && event.threat = 4):\r\n   {set warninglevel to entered}\r\n   {set source to OneOf(\"alien\", \"xeno\", \"non-human\", \"Thargoid sensor\")}\r\n|elif source = \"Anomaly;\":\r\n   {set source to OneOf(\"anomalous\", \"unknown\", \"mysterious\")}\r\n|elif source = \"Ceremonial;\":\r\n    {set source to \"ceremonial comms\"}\r\n|elif source = \"Convoy;\":\r\n    {set source to \"convoy\"}\r\n|elif source = \"DisruptedWakeEchoes;\":\r\n    {set source to \"\"}\r\n|elif source = \"DistressSignal;\":\r\n   {set source to \"distress\"}\r\n|elif source = \"MissionTarget;\":\r\n   {set source to OneOf(\"mission\", \"mission encoded\")}\r\n|elif source = \"NonHuman;\":\r\n   {set source to OneOf(\"alien\", \"xeno\", \"non-human\")}\r\n|elif source = \"Salvage;\":\r\n    {set source to \"degraded emissions\"}\r\n|elif source = \"ValuableSalvage;\":\r\n    {set source to \"encoded emissions\"}\r\n|elif source = \"VeryValuableSalvage;\":\r\n    {set source to \"high grade emissions\"}\r\n|elif source = \"WeaponsFire;\":\r\n   {set source to OneOf(\"combat\", \"weapons fire\")}\r\n}\r\n\r\n{Pause(2000)}\r\n{warninglevel} {source} {OneOf(\"signal source\", \"location\")}.\r\n\r\n{if system.state = \"Anarchy\" && source = \"degraded emissions\" && system.population > 0: \r\n   {set group to OneOf(\"clan\", \"gang\", \"syndicate\")}\r\n   {set are to OneOf(\"known to be\", \"reported\")}\r\n   {set opera to OneOf(\"operational\", \"operating\")}\r\n   {set type to OneOf(\"active\", \"present\", \"{opera}\")}\r\n   {set type2 to OneOf(\"activity reported\", \"presence reported\", \"known to be {opera}\")}\r\n\r\n   {Occasionally(2, \"\r\n      Caution:\r\n      {OneOf('criminal', 'pirate')}\r\n      {OneOf('{group}s {are} {type}', '{group} {type2}')}\r\n      in {OneOf('the area', 'the vicinity', 'this sector', 'this system')}.\r\n      {OneOf('Remain', 'Stay', 'Keep')} {OneOf('vigilant', 'alert', 'frosty', 'sharp')}\r\n      {Occasionally(3,', {F('Honorific')}')}.\r\n   \")}\r\n}\r\n\r\n\r\n",
      "default": false,
      "name": "Entered signal source",
      "description": "Triggered when your ship enters a signal source"
    },
    "Entered supercruise": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'engage')}\r\n{SetState('eddi_context_supercruise', \"yes\")}\r\n\r\n{Pause(1000)}\r\n\r\n{OneOf(\"{ShipName()} has\", \"\")} {OneOf(\"entered\", \"jumped to\")} supercruise.\r\n\r\n",
      "default": false,
      "name": "Entered supercruise",
      "description": "Triggered when your ship enters supercruise"
    },
    "Exploration data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Comprados dados de {OneOf('sistema', 'exploração')} de {P(event.system)}\",\r\n            \"dados de {OneOf('sistema', 'exploração')} de {P(event.system)} agora disponíveis\",\r\n            \"{Occasionally(3, '{ShipName()}')} Recebeu dados de {OneOf('sistema', 'exploração')} de {P(event.system)} dos serviços da estação\",\r\n            \"Recebimento de dados de {OneOf('sistema', 'exploração')} de {P(event.system)} confirmado\")}.",
      "default": true,
      "name": "Exploration data purchased",
      "description": "Triggered when you purchase exploration data"
    },
    "Exploration data sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Exploration data for {len(event.systems)} system{if len(event.systems) > 1:s} sold for {Humanise(event.reward)} credits\r\n\r\n{if len(event.firsts) > 0:\r\n    , with an additional bonus of {Humanise(event.bonus)} credits for\r\n    {len(event.firsts)} first discover{if len(event.firsts) = 1:y |else:ies}\r\n}\r\n.\r\n",
      "default": false,
      "name": "Exploration data sold",
      "description": "Triggered when you sell exploration data"
    },
    "Exploration promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have been recognised for your contribution to the exploration of our galaxy {F(\"Honorific\")}.\r\n\r\nYou {OneOf(\"are now at\",\"have achieved\",\"have attained\")} the rank of {cmdr.explorationrating.name}.\r\n",
      "default": false,
      "name": "Exploration promotion",
      "description": "Triggered when your exploration rank increases"
    },
    "Federation promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\nCongratulations {OneOf(\"Commander {cmdr.name}\",\"Sir\")}!\r\n\r\n{OneOf(\"The Federal Navy has {OneOf('granted you a promotion', 'promoted you', 'advanced you')} to the rank of {event.rank}\",\r\n       \"You have {OneOf(\\\"{OneOf('elevated your position','been promoted')} to\\\",\r\n                        \\\"been {OneOf('granted','bestowed')} a higher rank of\\\")} {event.rank} within the Federal Navy\")}\r\n\r\n{Occasionally(2, \"for your service to the Federation\")}\r\n\r\n{if event.rank = \"Midshipman\":\r\n   , and you have been granted access to purchase the Federal Dropship\r\n|elif event.rank = \"Petty Officer\":\r\n   , and you have been granted access to the {P(\"Sol\")} system\r\n|elif event.rank = \"Chief Petty Officer\":\r\n   , and you have been granted access to purchase the Federal Assault Ship. And permitted to enter the {P(\"Vega\")} and {P(\"Beta Hydri\")} systems\r\n|elif event.rank = \"Warrant Officer\":\r\n   , and you have been granted access to the PLX 695 system\r\n|elif event.rank = \"Ensign\":\r\n   , and you have been granted access to purchase the Federal Gunship. And permitted to enter the Ross 128 system\r\n|elif event.rank = \"Lieutenant\":\r\n   , and you have been granted access to the {P(\"Exbeur\")} system\r\n|elif event.rank = \"Post Commander\":\r\n   , and you have been granted access to the {P(\"Hors\")} system\r\n|elif event.rank = \"Rear Admiral\":\r\n   , and you have been granted access to purchase the Federal Corvette\r\n|elif event.rank = \"Admiral\":\r\n   . You have attained the highest possible rank sir\r\n}.\r\n",
      "default": false,
      "name": "Federation promotion",
      "description": "Triggered when your rank increases with the Federation"
    },
    "Fighter docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Fighter \r\n\r\n{OneOf(\"{Occasionally(2,'re-')}docked {Occasionally(2, 'with ship')}\",\r\n\r\n       \"docking complete\",\r\n       \"back onboard\")}.\r\n\r\n{SetState('eddi_state_fighter_docked', true)}\r\n",
      "default": false,
      "name": "Fighter docked",
      "description": "Triggered when you dock a fighter with your ship"
    },
    "Fighter launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Fighter \r\n\r\n{OneOf(\"{OneOf('deploying', 'launching')} {Occasionally(2, 'from mothership')}\",\r\n       \"deployed\",\r\n       \"launched\",\r\n       \"away\")}.\r\n\r\n{SetState('eddi_state_fighter_docked', false)}",
      "default": false,
      "name": "Fighter launched",
      "description": "Triggered when you launch a fighter from your ship"
    },
    "Fighter rebuilt": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\nFighter\r\n\r\n{if state.eddi_state_fighter_docked != true:\r\n    {OneOf(\"rebuilt\", \"reconstruction complete\")}\r\n    and ready for {OneOf(\"launch\", \"deployment\")}\r\n|else:\r\n    ready for re-{OneOf(\"launch\", \"deployment\")}\r\n}.",
      "default": false,
      "name": "Fighter rebuilt",
      "description": "Triggered when a ship's fighter is rebuilt in the hangar"
    },
    "File Header": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "File Header",
      "description": "Triggered when the file header is read"
    },
    "Fine incurred": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'incur')}\r\n{SetState('eddi_context_fine_name', event.victim)}\r\n{SetState('eddi_context_fine_faction', event.faction)}\r\n{SetState('eddi_context_fine_amount', event.fine)}\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Add\")}\r\n\r\nYou {OneOf(\"have been {OneOf('charged','fined')}\",\"owe {P(event.faction)}\")} {Humanise(event.fine)} credits for {event.crime}.\r\n",
      "default": false,
      "name": "Fine incurred",
      "description": "Triggered when you incur a fine"
    },
    "Fine paid": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fine')}\r\n{SetState('eddi_context_last_action', 'pay')}\r\n{SetState('eddi_context_fine_amount', event.amount)}\r\n\r\n{_ Update Fines & Bounties}\r\n{F(\"FinesBounties_Delete\")}\r\n\r\nPaid fine of {Humanise(event.amount)} credits.\r\n\r\n{if event.brokerpercentage:\r\n  {Pause(1000)}\r\n  The Broker has taken\r\n  {floor((event.amount / (100 - event.brokerpercentage)) * event.brokerpercentage)} credits.\r\n}",
      "default": false,
      "name": "Fine paid",
      "description": "Triggered when you pay a fine"
    },
    "FinesBounties_Add": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_Add }\r\n{_ Add Bonds, Bounties & Fines to memory store }\r\n\r\n{if state.eddi_context_bounties_initialised != \"yes\": {F(\"FinesBounties_Initialise\")}}\r\n\r\n{set shipid to cast(state.eddi_context_currentshipid, \"s\")}\r\n{SetState('eddi_context_currentshipname', ShipName())}\r\n\r\n{_ Unfortunately the variables needed for Power bonuses to be accurate, are not yet available in EDDI. }\r\n{_ Need: Power Galactic Rank, and Power Personal Rank }\r\n{_ Placeholder variables and code are included if/when they are ever implemented in the future. }\r\n\r\n{_ Setup placeholder Power variables array. Not required if added to EDDI in future. _}\r\n{_ Alternatively, manually edit these to match your Poweer Pledge / own rank / Power rank. _}\r\n{set power to [\"pledged\":\"None\", \"personalrank\": 0, \"galacticrank\": 0]}\r\n\r\n\r\n{if state.eddi_context_last_subject = \"bond\":\r\n    {set type to \"Bond\"}\r\n    {set evtrewards to [event.awardingfaction: event.reward]}\r\n\r\n|elif state.eddi_context_last_subject = \"bounty\" && state.eddi_context_last_action = \"award\":\r\n    {set type to \"BountyAwd\"}\r\n    {set evtrewards to []}\r\n    {for reward in event.rewards:\r\n        {set evtrewards to union(evtrewards, [reward.faction: reward.amount])}\r\n    }\r\n\r\n|elif state.eddi_context_last_subject = \"bounty\" && state.eddi_context_last_action = \"incur\":\r\n    {set type to \"BountyInc\"}\r\n    {set evtrewards to [event.faction: event.bounty]}\r\n\r\n|elif state.eddi_context_last_subject = \"powerbounty\" && state.eddi_context_last_action = \"award\":\r\n    {_ Placeholder for Power Bounties _}\r\n\r\n|elif state.eddi_context_last_subject = \"powerbounty\" && state.eddi_context_last_action = \"incur\":\r\n    {_ Placeholder for Power Bounties _}\r\n\r\n|elif state.eddi_context_last_subject = \"stellarbounty\" && state.eddi_context_last_action = \"award\":\r\n    {_ Placeholder for Interstellar Bounties _}\r\n\r\n|elif state.eddi_context_last_subject = \"stellarbounty\" && state.eddi_context_last_action = \"incur\":\r\n    {_ Placeholder for Interstellar Bounties _}\r\n\r\n|elif state.eddi_context_last_subject = \"fine\":\r\n    {set type to \"Fine\"}\r\n    {set evtrewards to [event.faction: event.fine]}\r\n}\r\n\r\n{set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n{set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n{set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n{set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n{set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n\r\n{for evtfaction, evtamount in evtrewards:\r\n\r\n    {set position to find(bounties_faction_array, evtfaction, 0)}\r\n    {set updatedata to 0}\r\n    {set pwrpct to 1}\r\n\r\n    {if type = \"Bond\" || type = \"BountyAwd\":\r\n\r\n        {if type = \"BountyAwd\":\r\n\r\n            {_ If in Power controlled space get extra bounty -> A. Lavigny-Duval, Z. Hudson, P. Antal, Y. Grom }\r\n            {if system.powerstate = \"Control\" || system.powerstate = \"Exploited\":\r\n\r\n                {if system.power = \"Arissa Lavigny-Duval\" || system.power = \"Zachary Hudson\":\r\n\r\n                    {_ ALD gets +20% base rate, even if not pledged! _}\r\n                    {if system.power = \"Arissa Lavigny-Duval\": {set pwrpct to 1.2} }\r\n\r\n                    {_ if joined power & personal rank is 2 or more, get bonus amount }\r\n                    {if power.personalrank > 1 && power.pledge = system.power:\r\n                        {set pwrpct to 1.2}\r\n\r\n                        {_ if power galactic rank 3, 2 or 1 = +10%, +20% or +30% }\r\n                        {if power.galacticrank = 3: {set pwrpct to 1.3}\r\n                        |elif power.galacticrank = 2: {set pwrpct to 1.4}\r\n                        |elif power.galacticrank = 1: {set pwrpct to 1.5}\r\n                        }\r\n                    }\r\n\r\n                    {_ if personal rank is 5 = flat +100% bonus }\r\n                    {if power.personalrank = 5 && power.pledge = system.power:\r\n                        {set pwrpct to 2}\r\n                    }\r\n\r\n                |elif system.power = \"Yuri Grom\":\r\n                    {_ Y.Grom +20% base, plus 2% at personal rank =>2 }\r\n                    {_ or 5/7/15% at galactic ranks 3/2/1 _}\r\n                    {set pwrpct to 1.2}\r\n\r\n                    {_ if joined power & personal rank is 2 or more, get +2% on amount }\r\n                    {if power.personalrank > 1 && power.pledge = system.power:\r\n                        {set pwrpct to pwrpct + 0.02}\r\n\r\n                        {_ if power galactic rank 3, 2 or 1 = +3%, +5% or +13% }\r\n                        {if power.galacticrank = 3: {set pwrpct to pwrpct + 0.03}\r\n                        |elif power.galacticrank = 2: {set pwrpct to pwrpct + 0.05}\r\n                        |elif power.galacticrank = 1: {set pwrpct to pwrpct + 0.13}\r\n                        }\r\n                    }\r\n\r\n                |elif system.power = \"Pranav Antal\":\r\n                    {_ if personal rank is 5 = flat +100% bonus in controlled or exploited systems }\r\n                    {if power.personalrank = 5 && power.pledge = system.power:\r\n                        {set pwrpct to 2}\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        {set evtamount to floor(evtamount * pwrpct)}\r\n\r\n        {while position > -1:\r\n            {if bounties_type_array[position] = type:\r\n\r\n                {_ Add amount to stored amount }\r\n                {set amount to evtamount + bounties_amount_array[position]}\r\n\r\n                {_ Update array }\r\n                {set bounties_amount_array to union(bounties_amount_array, [position:amount])}\r\n\r\n                {set updatedata to 1}\r\n                {set position to -1}\r\n            |else:\r\n                {set position to find(bounties_faction_array, evtfaction, position + 1)}\r\n            }\r\n        }\r\n\r\n    |elif type = \"Fine\" || type = \"BountyInc\":\r\n\r\n        {_ If in Power controlled space incur extra fines & bounties }\r\n        {_ A. Lavigny-Duval, P.Antal, A. Delaine}\r\n\r\n        {_ ALD - F&B Double in control systems _}\r\n        {_ PA - F&B Double in control systems, or +50% in all super-powers _}\r\n        {_ A.Delaine - F&B -20%,  @ rank =>2, -30/40/50 at galactic rank 3/2/1 , rank 5 = -100% _}\r\n\r\n        {if (system.power = \"Arissa Lavigny-Duval\" || system.power = \"Pranav Antal\")\r\n           && system.powerstate = \"Control\":\r\n            {type} doubled in {system.power} controlled space.\r\n        |elif system.power = \"Pranav Antal\":\r\n            {type} increased by 50% in Pranav Antal exploited space.\r\n        |elif system.power = \"Archon Delaine\":\r\n\r\n            {_ if joined power & personal rank is 2 or more, get -20% on fines & bounties incurred }\r\n            {if power.personalrank > 1 && power.pledge = system.power:\r\n                {set pwrpct to pwrpct - 0.2}\r\n\r\n                {_ if power galactic rank 3, 2 or 1 = -10%, -20% or -30% }\r\n                {if power.galacticrank = 3: {set pwrpct to pwrpct - 0.1}\r\n                |elif power.galacticrank = 2: {set pwrpct to pwrpct - 0.2}\r\n                |elif power.galacticrank = 1: {set pwrpct to pwrpct - 0.3}\r\n                }\r\n            }\r\n\r\n            {_ if personal rank is 5 = flat -100% bonus }\r\n            {if power.personalrank = 5 && power.pledge = system.power:\r\n                {set pwrpct to 0}\r\n            }\r\n        }\r\n\r\n        {set evtamount to ceil(evtamount * pwrpct)}\r\n\r\n        {while position > -1:\r\n            {if shipid = bounties_shipid_array[position]:\r\n                {if (bounties_type_array[position] = type)\r\n                 || (bounties_type_array[position] = \"Fine\" && type = \"BountyInc\")\r\n                 || (bounties_type_array[position] = \"BountyInc\" && type = \"Fine\"):\r\n\r\n                    {_ Add amount to stored amount }\r\n                    {set amount to evtamount + bounties_amount_array[position]}\r\n                    {_ Maximum bounty is 1MCr.  Is it still after v3.0? }\r\n                    {if type = \"BountyInc\" || bounties_type_array[position] = \"BountyInc\":\r\n                        {if amount > 1000000: {set amount to 1000000}}\r\n                    }\r\n\r\n                    {_ Update arrays }\r\n                    {if bounties_type_array[position] = \"Fine\" && type = \"BountyInc\":\r\n                        {set bounties_type_array to union(bounties_type_array, [position:type])}\r\n                    }\r\n                    {set bounties_amount_array to union(bounties_amount_array, [position:amount])}\r\n\r\n                    {set updatedata to 1}\r\n                    {set position to -1}\r\n                |else:\r\n                    {set position to find(bounties_faction_array, evtfaction, position + 1)}\r\n                }\r\n            |else:\r\n                {set position to find(bounties_faction_array, evtfaction, position + 1)}\r\n            }\r\n        }\r\n    }\r\n\r\n    {_ Add new data to arrays}\r\n    {if updatedata = 0:\r\n        {if len(state.eddi_context_bounties_type) = 0:\r\n            {set bounties_shipid_array to [shipid]}\r\n            {set bounties_type_array to [type]}\r\n            {set bounties_faction_array to [evtfaction]}\r\n            {set bounties_system_array to [system.name]}\r\n            {set bounties_amount_array to [evtamount]}\r\n        |else:\r\n            {set bounties_shipid_array to cat(bounties_shipid_array, [shipid])}\r\n            {set bounties_type_array to cat(bounties_type_array, [type])}\r\n            {set bounties_faction_array to cat(bounties_faction_array, [evtfaction])}\r\n            {set bounties_system_array to cat(bounties_system_array, [system.name])}\r\n            {set bounties_amount_array to cat(bounties_amount_array, [evtamount])}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Update State variable strings}\r\n{if len(state.eddi_context_bounties_type) = 0 && len(bounties_type_array) = 1:\r\n    {set sep to \"\"}\r\n|else:\r\n    {set sep to \"+=\"}\r\n}\r\n{SetState('eddi_context_bounties_shipid', join(bounties_shipid_array, sep))}\r\n{SetState('eddi_context_bounties_type', join(bounties_type_array, sep))}\r\n{SetState('eddi_context_bounties_faction', join(bounties_faction_array, sep))}\r\n{SetState('eddi_context_bounties_system', join(bounties_system_array, sep))}\r\n{SetState('eddi_context_bounties_amount', join(bounties_amount_array, sep))}\r\n",
      "default": true,
      "name": "FinesBounties_Add",
      "description": "Add Bonds, Bounties & Fines to memory store"
    },
    "FinesBounties_CheckContacts": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_ContactsCheck}\r\n{_ Function to report Bonds/Bounties or Fines/Bounties to collect or pay}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null:\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n   {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n   {set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n\r\n   {set position to 0}\r\n   {for factions in bounties_faction_array:\r\n\r\n      {if factions = station.faction || factions = system.allegiance || system.name = bounties_system_array[position]:\r\n\r\n         {if bounties_type_array[position] = \"Bond\":\r\n            {set bond to 1}\r\n         |elif bounties_type_array[position] = \"BountyAwd\":\r\n            {set bountyawd to 1}\r\n         |elif bounties_type_array[position] = \"BountyInc\":\r\n            {set bountyinc to 1}\r\n         |elif bounties_type_array[position] = \"Fine\":\r\n            {set fine to 1}\r\n         }\r\n      }\r\n   {set position to position + 1}\r\n   }\r\n}\r\n\r\n{if bountyawd = 1 || bond = 1:\r\n   Reminder: You have unclaimed\r\n   {if bond = 1: bonds}\r\n   {if bountyawd = 1:\r\n      {if bond = 1: and}\r\n      bounties\r\n   }\r\n   to collect.\r\n}\r\n\r\n{if fine = 1 || bountyinc = 1:\r\n   {if bountyawd = 1 || bond = 1:\r\n      You also\r\n   |else:\r\n      Reminder: You\r\n   }\r\n   have unpaid\r\n   {if fine = 1: fines}\r\n   {if bountyinc = 1:\r\n      {if fine = 1: and}\r\n      bounties\r\n   }\r\n   to pay.\r\n}\r\n",
      "default": false,
      "name": "FinesBounties_CheckContacts",
      "description": "Function to report Bonds/Bounties or Fines/Bounties to collect or pay in the local system."
    },
    "FinesBounties_CheckShip": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_CheckShip}\r\n{_ Checks current ship for any crimes}\r\n\r\n{if status.vehicle = \"SRV\" || status.vehicle = \"Fighter\":\r\n    {set v_type to \"Your current ship\"}\r\n|else:\r\n    {set v_type to cat(OneOf(\"This\", \"Your\"), \" ship\")}\r\n}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null && (find(state.eddi_context_bounties_type, \"Fine\") > -1 || find(state.eddi_context_bounties_type, \"BountyInc\") > -1):\r\n\r\n    {set shipid to cast(state.eddi_context_currentshipid, \"s\")}\r\n    {set shipname to ShipName(shipid)}\r\n\r\n    {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n    {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n    {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n    {_ Set up temp arrays of items that match \"Fine\" or \"BountyInc\"}\r\n\r\n    {_ Set up variables}\r\n    {set ship_fines_count to 0}\r\n    {set ship_bounties_count to 0}\r\n    {set ship_fines_total to 0}\r\n    {set ship_bounties_total to 0}\r\n    {set crime_array to []}\r\n\r\n    {_ run loop from 0 to number of entries}\r\n    {set cur to 0}\r\n    {while cur < len(bounties_type_array):\r\n        {if bounties_shipid_array[cur] = shipid:\r\n            {if bounties_type_array[cur] = \"Fine\"\r\n                {set ship_fines_count to ship_fines_count + 1}\r\n                {set ship_fines_total to ship_fines_total + bounties_amount_array[cur]}\r\n            |elif bounties_type_array[cur] = \"BountyInc\":\r\n                {set ship_bounties_count to ship_bounties_count + 1}\r\n                {set ship_bounties_total to ship_bounties_total + bounties_amount_array[cur]}\r\n            }\r\n        |else:\r\n            {if bounties_type_array[cur] = \"Fine\" || bounties_type_array[cur] = \"BountyInc\":\r\n                {set pos to find(crime_array, bounties_shipid_array[cur])}\r\n                {if pos > -1:\r\n                    {set pos to bounties_shipid_array[cur]}\r\n                    {set amount to crime_array[pos] + bounties_amount_array[cur]}\r\n                    {set crime_array to union(crime_array, [pos:amount])}\r\n                |else:\r\n                    {set pos to bounties_shipid_array[cur]}\r\n                    {set amount to bounties_amount_array[cur]}\r\n                    {set crime_array to union(crime_array, [pos:amount])}\r\n                }\r\n           }\r\n       }\r\n       {set cur to cur + 1}\r\n    }\r\n\r\n    {_ Report info}\r\n\r\n    {if ship_bounties_count > 0: Caution: {vehicle} is wanted!}\r\n\r\n    {if ship_fines_count > 0:\r\n        {if ship_bounties_count > 0: It |else: {v_type}}\r\n        has {ship_fines_count} fine{if ship_fines_count > 1:s} to pay,\r\n        totalling {ship_fines_total} credits.\r\n    }\r\n\r\n    {if ship_bounties_count > 0:\r\n        {if ship_fines_count > 0: It also |else: It}\r\n        has {ship_bounties_count} bount{if ship_fines_count > 1:ies |else:y} to pay,\r\n        totalling {ship_bounties_total} credits.\r\n    }\r\n\r\n    {if len(crime_array) > 0:\r\n        {if ship_fines_count = 0 && ship_bounties_count = 0:\r\n            {v_type}\r\n            {OneOf(\"is clean. However, you have outstanding warrants\",\r\n                   \"has no outstanding warrants. However, there are some\")}\r\n            on your other ships.\r\n        |else:\r\n            You also have outstanding warrants on\r\n            {if len(crime_array) = 1: another ship\r\n            |else: your other ships\r\n            }.\r\n        }\r\n\r\n        {set cur to 0}\r\n        {set length to len(crime_array) - 1}\r\n        {for id, amount in crime_array:\r\n            {amount} credits on \r\n            {if ShipName(id) != \"your ship\": {ShipName(id)}\r\n            |else: {ShipCallsign(id)}\r\n            }\r\n            {set cur to cur + 1}\r\n            {if cur = length: and\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n    }.\r\n\r\n|else:\r\n    {v_type} {OneOf(\"is clean\", \"has no outstanding warrants\")}.\r\n}\r\n",
      "default": false,
      "name": "FinesBounties_CheckShip",
      "description": "Checks current ship for any crimes."
    },
    "FinesBounties_ClearShip": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_ClearShip _}\r\n{_ Removes fines and bounties from ship, due to either death or ship sold _}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null:\r\n\r\n   {_ Use stored ident as this function can be called after a ship swap sale has changed it _}\r\n   {set shipid to cast(state.eddi_context_currentshipid, \"s\")}\r\n\r\n   {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n\r\n   {set position to 0}\r\n   {for type in bounties_type_array:\r\n\r\n      {if (type = \"Fine\" || type = \"BountyInc\")\r\n          && bounties_shipid_array[position] = shipid\r\n          && state.eddi_context_selfdestruct != \"yes\":\r\n\r\n         {_ If Fine or Bounty Incurred, and not self destructed -> pay them all}\r\n\r\n         {set delete to \"yes\"}\r\n         {set temparray_type to token(state.eddi_context_bounties_type, \"+=\", position, \"Delete\")}\r\n         {SetState('eddi_context_bounties_type', temparray_type)}\r\n\r\n      |elif (type = \"Bond\" || type = \"BountyAwd\")\r\n            && state.eddi_context_cmdrdied = \"yes\"):\r\n         {_ If Bond or Bounty Awarded and player died -> lose them all}\r\n\r\n         {set delete to \"yes\"}\r\n         {set temparray_type to token(state.eddi_context_bounties_type, \"+=\", position, \"Delete\")}\r\n         {SetState('eddi_context_bounties_type', temparray_type)}\r\n\r\n      }\r\n      {set position to position + 1}\r\n   }\r\n}\r\n\r\n{SetState('eddi_context_cmdrdied', \"no\")}\r\n{SetState('eddi_context_selfdestruct', \"no\")}\r\n\r\n{if delete = \"yes\":\r\n\r\n   {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n   {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n   {set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n   {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n   {set position to 0}\r\n\r\n   {for type in bounties_type_array:\r\n      {if type = \"Delete\":\r\n\r\n         {_ Rebuild and modify text string from array}\r\n         {set bounties_shipid_array to join(except(bounties_shipid_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_type_array to join(except(bounties_type_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_faction_array to join(except(bounties_faction_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_system_array to join(except(bounties_system_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_amount_array to join(except(bounties_amount_array, [position:\"\"]), \"+=\")}\r\n\r\n         {_ Rewrite State variable strings}\r\n         {SetState('eddi_context_bounties_shipid', bounties_shipid_array)}\r\n         {SetState('eddi_context_bounties_type', bounties_type_array)}\r\n         {SetState('eddi_context_bounties_faction', bounties_faction_array)}\r\n         {SetState('eddi_context_bounties_system', bounties_system_array)}\r\n         {SetState('eddi_context_bounties_amount', bounties_amount_array)}\r\n\r\n         {_ Re-split data}\r\n         {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n         {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n         {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n         {set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n         {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n      |else:\r\n         {set position to position + 1}\r\n      }\r\n   }\r\n}\r\n",
      "default": true,
      "name": "FinesBounties_ClearShip",
      "description": "Removes fines and bounties from ship, due to either death or ship sold"
    },
    "FinesBounties_Delete": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_Delete}\r\n{_ Remove paid/collected item from the memory store}\r\n\r\n{set shipid to cast(state.eddi_context_currentshipid, \"s\")}\r\n\r\n{if state.eddi_context_last_subject = \"bond\":\r\n   {set type to \"Bond\"}\r\n   {_ set amount to event.amount _}\r\n|elif state.eddi_context_last_subject = \"bounty\":\r\n   {set type to \"BountyAwd\"}\r\n|elif state.eddi_context_last_subject = \"bountypaid\":\r\n   {_ This is a placeholder until it's implemented in EDDI _}\r\n   {set type to \"BountyInc\"}\r\n|elif state.eddi_context_last_subject = \"fine\":\r\n   {set type to \"Fine\"}\r\n   {set amount to event.amount}\r\n}\r\n\r\n{set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n{set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n{set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n{set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n{set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n{if type = \"BountyAwd\" || type = \"Bond\":\r\n   {for reward in event.rewards:\r\n\r\n      {set position to 0}\r\n      {for faction in bounties_faction_array:\r\n\r\n         {_ If collecting at Interstellar Factors _}\r\n         {set IF_amount to floor(bounties_amount_array[position] * 0.75)}\r\n\r\n         {if (reward.faction = faction || reward.amount = IF_amount) && bounties_type_array[position] = type:\r\n\r\n            {_ Rebuild data}\r\n            {set bounties_shipid_array to join(except(bounties_shipid_array, [position:\"\"]), \"+=\")}\r\n            {set bounties_type_array to join(except(bounties_type_array, [position:\"\"]), \"+=\")}\r\n            {set bounties_faction_array to join(except(bounties_faction_array, [position:\"\"]), \"+=\")}\r\n            {set bounties_system_array to join(except(bounties_system_array, [position:\"\"]), \"+=\")}\r\n            {set bounties_amount_array to join(except(bounties_amount_array, [position:\"\"]), \"+=\")}\r\n\r\n            {_ Rewrite data}\r\n            {SetState('eddi_context_bounties_shipid', bounties_shipid_array)}\r\n            {SetState('eddi_context_bounties_type', bounties_type_array)}\r\n            {SetState('eddi_context_bounties_faction', bounties_faction_array)}\r\n            {SetState('eddi_context_bounties_system', bounties_system_array)}\r\n            {SetState('eddi_context_bounties_amount', bounties_amount_array)}\r\n\r\n            {_ Re-split data}\r\n            {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n            {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n            {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n            {set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n            {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n         |else:\r\n            {set position to position + 1}\r\n         }\r\n      }\r\n   }\r\n\r\n|elif type = \"Fine\" || type = \"BountyInc\":\r\n   {_ If Fine and Amount match, delete it}\r\n\r\n   {_ If paying at Interstellar Factors _}\r\n   {set IF_amount to ceil(amount * 1.25)}\r\n\r\n   {set position to 0}\r\n   {for amounts in bounties_amount_array:\r\n\r\n      {set amounts to cast(amounts, \"n\")}\r\n      {set system to SystemDetails(system.name)}\r\n\r\n      {if system.faction = bounties_faction_array[position]\r\n          && bounties_type_array[position] = type\r\n          && (amounts = amount || amounts = IF_amount):\r\n\r\n         {_ Rebuild data}\r\n         {set bounties_shipid_array to join(except(bounties_shipid_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_type_array to join(except(bounties_type_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_faction_array to join(except(bounties_faction_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_system_array to join(except(bounties_system_array, [position:\"\"]), \"+=\")}\r\n         {set bounties_amount_array to join(except(bounties_amount_array, [position:\"\"]), \"+=\")}\r\n\r\n         {_ Rewrite data}\r\n         {SetState('eddi_context_bounties_shipid', bounties_shipid_array)}\r\n         {SetState('eddi_context_bounties_type', bounties_type_array)}\r\n         {SetState('eddi_context_bounties_faction', bounties_faction_array)}\r\n         {SetState('eddi_context_bounties_system', bounties_system_array)}\r\n         {SetState('eddi_context_bounties_amount', bounties_amount_array)}\r\n\r\n         {_ Re-split data}\r\n         {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n         {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n         {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n         {set bounties_system_array to split(state.eddi_context_bounties_system, \"+=\")}\r\n         {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n      |else:\r\n         {set position to position + 1}\r\n      }\r\n   }\r\n}\r\n",
      "default": true,
      "name": "FinesBounties_Delete",
      "description": "Remove paid/collected item from the memory store"
    },
    "FinesBounties_Initialise": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_Initialise}\r\n{_ Setup Fines & Bounties 'database'}\r\n\r\n{SetState('eddi_context_bounties_shipid', \"\")}\r\n{SetState('eddi_context_bounties_type', \"\")}\r\n{SetState('eddi_context_bounties_faction', \"\")}\r\n{SetState('eddi_context_bounties_system', \"\")}\r\n{SetState('eddi_context_bounties_amount', \"\")}\r\n\r\n{SetState('eddi_context_bounties_initialised', \"yes\")}\r\n\r\nFines & Bounties Initialised.\r\n\r\n",
      "default": false,
      "name": "FinesBounties_Initialise",
      "description": "Setup Fines & Bounties 'database'"
    },
    "FinesBounties_ReportBonds": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_ReportBonds}\r\n{_ Report on the Bonds you have earned}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null && find(state.eddi_context_bounties_type, \"Bond\") > -1:\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n   {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n   {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n   {_ Set up temp arrays of items that match \"Bond\"}\r\n\r\n   {_ Set up blank temporary arrays}\r\n   {set temparray_faction to []}\r\n   {set temparray_amount to []}\r\n   {set total_amount to 0}\r\n\r\n   {_ run loop from 0 to number of entries}\r\n   {set cur to 0}\r\n   {while cur < len(bounties_type_array):\r\n      {if bounties_type_array[cur] = \"Bond\":\r\n         {set temparray_faction to cat(temparray_faction, [bounties_faction_array[cur]])}\r\n         {set temparray_amount to cat(temparray_amount, [bounties_amount_array[cur]])}\r\n         {set total_amount to total_amount + bounties_amount_array[cur]}\r\n      }\r\n      {set cur to cur + 1}\r\n   }\r\n\r\n   {_ Read info from temp arrays}\r\n\r\n   Bonds Awarded:\r\n\r\n   {if len(temparray_faction) > 0:\r\n\r\n      {if len(temparray_faction) > 1:\r\n         {OneOf(\"You have {len(temparray_faction)} bond{if len(temparray_faction) != 1:s} to collect, making\",\r\n                \"{len(temparray_faction)} faction{if len(temparray_faction) != 1:s owe |else: owes} you\")} \r\n\r\n         a total of {Humanise(total_amount)} credits.\r\n      }\r\n\r\n      Collect\r\n      {set cur to 0}\r\n      {set length to len(temparray_faction) - 1}\r\n      {while cur < len(temparray_faction):\r\n         {Humanise(temparray_amount[cur])}\r\n         {if len(temparray_faction) = 1: credits}\r\n         from {temparray_faction[cur]}\r\n         {set cur to cur + 1}\r\n         {if cur = length: and\r\n         |elif cur < length:,\r\n         }\r\n      }\r\n   |else:\r\n      You have no bonds to collect {Occasionally(2, \"at {OneOf('this time','the moment')}\")}\r\n   }\r\n|else:\r\n   You have no bonds to collect {Occasionally(2, \"at {OneOf('this time','the moment')}\")}\r\n}.\r\n",
      "default": false,
      "name": "FinesBounties_ReportBonds",
      "description": "Report on the Bonds you have earned"
    },
    "FinesBounties_ReportBountiesAwarded": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_ReportBountiesAwarded}\r\n{_ Report on the Bounties you have been awarded}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null && find(state.eddi_context_bounties_type, \"BountyAwd\") > -1:\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n   {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n   {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n   {_ Set up temp arrays of items that match \"Bounty\"}\r\n\r\n   {_ Set up blank temporary arrays}\r\n   {set temparray_faction to []}\r\n   {set temparray_amount to []}\r\n   {set total_amount to 0}\r\n\r\n   {_ run loop from 0 to number of entries}\r\n   {set cur to 0}\r\n   {while cur < len(bounties_type_array):\r\n      {if bounties_type_array[cur] = \"BountyAwd\":\r\n         {set temparray_faction to cat(temparray_faction, [bounties_faction_array[cur]])}\r\n         {set temparray_amount to cat(temparray_amount, [bounties_amount_array[cur]])}\r\n         {set total_amount to total_amount + bounties_amount_array[cur]}\r\n      }\r\n      {set cur to cur + 1}\r\n   }\r\n\r\n   {_ Read info from temp arrays}\r\n\r\n   Bounties Awarded:\r\n\r\n   {if len(temparray_faction) > 1:\r\n      {OneOf(\"You have {len(temparray_faction)} bount{if len(temparray_faction) = 1:y |else:ies} to collect,\",\r\n             \"{len(temparray_faction)} faction{if len(temparray_faction) != 1:s} are in your debt\")} \r\n      for a total of {Humanise(total_amount)} credits.\r\n   }\r\n\r\n   Collect\r\n   {set cur to 0}\r\n   {set length to len(temparray_faction) - 1}\r\n   {while cur < len(temparray_faction):\r\n      {Humanise(temparray_amount[cur])}\r\n      {if len(temparray_faction) = 1: credits}\r\n      from\r\n      {if temparray_faction[cur] = \"Alliance\" || temparray_faction[cur] = \"Empire\"\r\n          || temparray_faction[cur] = \"Federation\": the }\r\n      {temparray_faction[cur]}\r\n      {set cur to cur + 1}\r\n      {if cur = length: and\r\n      |elif cur < length:,\r\n      }\r\n   }\r\n\r\n|else:\r\n   You have no bounties to collect {Occasionally(2, \"at {OneOf('this time','the moment')}\")}\r\n}.\r\n",
      "default": false,
      "name": "FinesBounties_ReportBountiesAwarded",
      "description": "Report on the Bounties you have earned"
    },
    "FinesBounties_ReportBountiesIncurred": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_ReportBountiesIncurred}\r\n{_ Report on the Bounties you have against you}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null && find(state.eddi_context_bounties_type, \"BountyInc\") > -1:\r\n\r\n   {set shipid to cast(state.eddi_context_currentshipid, \"s\")}\r\n\r\n   {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n   {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n   {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n   {_ Set up temp arrays of items that match \"BountyInc\"}\r\n\r\n   {_ Set up blank temporary arrays}\r\n   {set temparray_shipid to []}\r\n   {set temparray_type to []}\r\n   {set temparray_faction to []}\r\n   {set temparray_amount to []}\r\n   {set total_amount to 0}\r\n   {set ship_total to 0}\r\n   {set crime_array to []}\r\n\r\n   {_ run loop from 0 to number of entries}\r\n   {set cur to 0}\r\n   {while cur < len(bounties_type_array):\r\n      {if bounties_type_array[cur] = \"BountyInc\":\r\n         {if bounties_shipid_array[cur] = shipid:\r\n            {set temparray_shipid to cat(temparray_shipid, [bounties_shipid_array[cur]])}\r\n            {set temparray_type to cat(temparray_type, [bounties_type_array[cur]])}\r\n            {set temparray_faction to cat(temparray_faction, [bounties_faction_array[cur]])}\r\n            {set temparray_amount to cat(temparray_amount, [bounties_amount_array[cur]])}\r\n            {set ship_total to ship_total + bounties_amount_array[cur]}\r\n         |else:\r\n            {set pos to find(crime_array, bounties_shipid_array[cur])}\r\n            {if pos > -1:\r\n                {set pos to bounties_shipid_array[cur]}\r\n                {set amount to crime_array[pos] + bounties_amount_array[cur]}\r\n                {set crime_array to union(crime_array, [pos:amount])}\r\n            |else:\r\n                {set pos to bounties_shipid_array[cur]}\r\n                {set amount to bounties_amount_array[cur]}\r\n                {set crime_array to union(crime_array, [pos:amount])}\r\n            }\r\n         }\r\n         {set total_amount to total_amount + bounties_amount_array[cur]}\r\n      }\r\n      {set cur to cur + 1}\r\n   }\r\n\r\n   {set diff to total_amount - ship_total}\r\n\r\n   {_ Read info from temp arrays}\r\n\r\n   Bounties Incurred:\r\n\r\n   {if len(temparray_faction) > 0:\r\n\r\n      {if len(temparray_faction) > 1:\r\n         {OneOf(\"You have {len(temparray_faction)} bounties to pay. You owe\",\r\n                \"{len(temparray_faction)} factions have put bounties on your head for\")} \r\n         a total of {total_amount} credits.\r\n      }\r\n\r\n      You need to pay\r\n      {set cur to 0}\r\n      {set length to len(temparray_faction) - 1}\r\n      {while cur < len(temparray_faction):\r\n         {temparray_amount[cur]}\r\n         {if len(temparray_faction) = 1: credits}\r\n         to {temparray_faction[cur]}\r\n         {set cur to cur + 1}\r\n         {if cur = length: and\r\n         |elif cur < length:,\r\n         }\r\n      }.\r\n\r\n      {if diff > 0:\r\n         You also owe {Humanise(diff)} credits in bounties on\r\n      |else:\r\n         {Occasionally(2,\"{OneOf('However,','Meanwhile,')}\")} You have no bounties on your other ships.\r\n      }\r\n\r\n   |else:\r\n      You have incurred no bounties on this ship {Occasionally(2, \"at {OneOf('this time','the moment')}\")}.\r\n      However, you owe {Humanise(diff)} credits in bounties on\r\n   }\r\n\r\n   {if diff > 0:\r\n      {if len(crime_array) = 1: another ship\r\n      |else: your other ships\r\n      }.\r\n\r\n      {set cur to 0}\r\n      {set length to len(crime_array) - 1}\r\n      {for id, amount in crime_array:\r\n         {amount} credits on \r\n         {if ShipName(id) != \"your ship\": {ShipName(id)}\r\n         |else: {ShipCallsign(id)}\r\n         }\r\n         {set cur to cur + 1}\r\n         {if cur = length: and\r\n         |elif cur < length:,\r\n         }\r\n      }\r\n   }.\r\n\r\n|else:\r\n   You have incurred no bounties {Occasionally(2, \"at {OneOf('this time','the moment')}\")}\r\n}\r\n",
      "default": false,
      "name": "FinesBounties_ReportBountiesIncurred",
      "description": "Report on the Bounties you have incurred on your current ship"
    },
    "FinesBounties_ReportFines": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ FinesBounties_ReportFines}\r\n{_ Report on the Fines you have against you}\r\n\r\n{if len(state.eddi_context_bounties_type) > 0 && state.eddi_context_bounties_type != null && find(state.eddi_context_bounties_type, \"Fine\") > -1:\r\n\r\n   {set shipid to cast(state.eddi_context_currentshipid, \"s\")}\r\n\r\n   {set bounties_shipid_array to split(state.eddi_context_bounties_shipid, \"+=\")}\r\n   {set bounties_type_array to split(state.eddi_context_bounties_type, \"+=\")}\r\n   {set bounties_faction_array to split(state.eddi_context_bounties_faction, \"+=\")}\r\n   {set bounties_amount_array to split(state.eddi_context_bounties_amount, \"+=\")}\r\n\r\n   {_ Set up temp arrays of items that match \"Fine\"}\r\n\r\n   {_ Set up blank temporary arrays}\r\n   {set temparray_shipid to []}\r\n   {set temparray_type to []}\r\n   {set temparray_faction to []}\r\n   {set temparray_amount to []}\r\n   {set total_amount to 0}\r\n   {set ship_total to 0}\r\n   {set crime_array to []}\r\n\r\n   {_ run loop from 0 to number of entries}\r\n   {set cur to 0}\r\n   {while cur < len(bounties_type_array):\r\n\r\n      {if bounties_type_array[cur] = \"Fine\":\r\n         {if bounties_shipid_array[cur] = shipid:\r\n            {set temparray_shipid to cat(temparray_shipid, [bounties_shipid_array[cur]])}\r\n            {set temparray_type to cat(temparray_type, [bounties_type_array[cur]])}\r\n            {set temparray_faction to cat(temparray_faction, [bounties_faction_array[cur]])}\r\n            {set temparray_amount to cat(temparray_amount, [bounties_amount_array[cur]])}\r\n            {set ship_total to ship_total + bounties_amount_array[cur]}\r\n         |else:\r\n            {set pos to find(crime_array, bounties_shipid_array[cur])}\r\n            {if pos > -1:\r\n                {set pos to bounties_shipid_array[cur]}\r\n                {set amount to crime_array[pos] + bounties_amount_array[cur]}\r\n                {set crime_array to union(crime_array, [pos:amount])}\r\n            |else:\r\n                {set pos to bounties_shipid_array[cur]}\r\n                {set amount to bounties_amount_array[cur]}\r\n                {set crime_array to union(crime_array, [pos:amount])}\r\n            }\r\n         }\r\n         {set total_amount to total_amount + bounties_amount_array[cur]}\r\n      }\r\n      {set cur to cur + 1}\r\n   }\r\n\r\n   {set diff to total_amount - ship_total}\r\n\r\n   {_ Read info from temp arrays}\r\n\r\n   Fines Incurred:\r\n\r\n   {if len(temparray_faction) > 0:\r\n\r\n      {if len(temparray_faction) > 1:\r\n         {OneOf(\"You have {len(temparray_faction)} fines to pay. You owe\",\r\n                \"You owe {len(temparray_faction)} factions\")} \r\n         a total of {ship_total} credits.\r\n      }\r\n\r\n      You need to pay\r\n      {set cur to 0}\r\n      {set length to len(temparray_faction) - 1}\r\n      {while cur < len(temparray_faction):\r\n         {temparray_amount[cur]}\r\n         {if len(temparray_faction) = 1: credits}\r\n         to {temparray_faction[cur]}\r\n         {set cur to cur + 1}\r\n         {if cur = length: and\r\n         |elif cur < length:,\r\n         }\r\n      }.\r\n\r\n      {if diff > 0:\r\n         You also owe {diff} credits in fines on\r\n      |else:\r\n         {Occasionally(2,\"{OneOf('However,','Meanwhile,')}\")} You have no fines on your other ships.\r\n      }\r\n\r\n   |else:\r\n      You have no fines to pay on this ship {Occasionally(2, \"at {OneOf('this time','the moment')}\")}.\r\n      However, you owe {diff} credits in fines on\r\n   }\r\n\r\n   {if diff > 0:\r\n      {if len(crime_array) = 1: another ship\r\n      |else: your other ships\r\n      }.\r\n\r\n      {set cur to 0}\r\n      {set length to len(crime_array) - 1}\r\n      {for id, amount in crime_array:\r\n         {amount} credits on \r\n         {if ShipName(id) != \"your ship\": {ShipName(id)}\r\n         |else: {ShipCallsign(id)}\r\n         }\r\n         {set cur to cur + 1}\r\n         {if cur = length: and\r\n         |elif cur < length:,\r\n         }\r\n      }\r\n   }.\r\n|else:\r\n   You have incurred no fines {Occasionally(2, \"at {OneOf('this time','the moment')}\")}\r\n}\r\n",
      "default": false,
      "name": "FinesBounties_ReportFines",
      "description": "Report on the Fines you have incurred on your current ship"
    },
    "Friends status": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Set uselist to \"white\" or \"black\", depending on which list you want to use to filter people _}\r\n{_ \"white\" will only allow notifications from people in this list (e.g. \"User1\", \"User2\", & \"User3\") _}\r\n{_ \"black\" will allow all notification EXCEPT those on this list (e.g. \"User4\", \"User5\", & \"User6\") _}\r\n{_ to allow all notifications, you may also use an empty blacklist (i.e. \"set blacklist to []\" _}\r\n\r\n{set uselist to \"black\"}\r\n\r\n{set whitelist to [\"User1\", \"User2\", \"User3\"]}\r\n{set blacklist to [\"User4\", \"User5\", \"User6\"]}\r\n\r\n{if event.name:\r\n    {if uselist = \"white\":\r\n        {if find(whitelist, event.name) > -1:\r\n            {event.name} agora está {event.status}.\r\n        }\r\n    |elif uselist = \"black\":\r\n        {if find(blacklist, event.name) = -1:\r\n            {event.name} agora está {event.status}.\r\n        }\r\n    }\r\n|else:\r\n    Não sei sobre quem você está falando.\r\n}",
      "default": true,
      "name": "Friends status",
      "description": "Triggered when a friendly commander changes status"
    },
    "FSD engaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'engage')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n{SetState('eddi_context_fsd_target', event.target)}\r\n\r\n{if event.target = 'Hyperspace':\r\n    {_ Rewrite context to represent a jump }\r\n    {SetState('eddi_context_last_subject', 'jump')}\r\n    {SetState('eddi_context_last_action', 'start')}\r\n    {SetState('eddi_context_supercruise', \"yes\")}\r\n\r\n    {F(\"GetDistance\")}\r\n\r\n    {set reportsystem to SystemDetails(event.system)}\r\n\r\n    {_ Wait for the FSD countdown and initial jump}\r\n    {Pause(5000)}\r\n\r\n    {set sys_val to cast(state.eddi_context_system_value, \"n\")}\r\n    {if sys_val > 0 && sys_val != null:\r\n        {set last to OneOf(\"Last\", \"Previous\", \"Departed\")}\r\n        {OneOf(\"Estimated scan value of {last} system is\",\r\n               \"{last} systems scans are worth an estimated\",\r\n               \"{last} systems scanned value is estimated {OneOf('at', 'to be')}\")}\r\n\r\n        {Humanise(state.eddi_context_system_value)} credits.\r\n    |else:\r\n        {OneOf(\"Destination confirmed\",\"Jump in progress\",\"Telemetry obtained\")}.\r\n    }\r\n\r\n    {ShipName()} is {OneOf(\"heading to\", \"on route to\", \"travelling to\", \"in transit to\")}\r\n    the {join(split(reportsystem.name, \".\"), \" \")} system.\r\n    {if reportsystem.name = homesystem.name:\r\n        Welcome home, {F(\"Honorific\")}\r\n    |else:\r\n        {set scoopables to [\"O\", \"B\", \"A\", \"F\", \"G\", \"K\", \"M\"]}\r\n        {if slice(event.stellarclass, 0, 1) = \"D\":\r\n            Caution: white dwarf detected.\r\n        |elif event.stellarclass = \"N\":\r\n            Caution: neutron star detected.\r\n        |elif event.stellarclass = \"H\":\r\n            Caution: black hole detected.\r\n        |elif find(scoopables, event.stellarclass) = -1:\r\n            {Occasionally(2, \"Information:\")}\r\n            Arrival star is not scoopable.\r\n        }\r\n        \r\n        {if lastsystem.allegiance && lastsystem.allegiance != \"None\" && lastsystem.allegiance != \"Independent\" && (!reportsystem.allegiance || reportsystem.allegiance = \"None\" || reportsystem.allegiance = \"Independent\"):\r\n            You {OneOf(\"are leaving\", \"have left\", \"are no longer in\")} {lastsystem.allegiance} space.\r\n        |elif lastsystem.allegiance && lastsystem.allegiance != reportsystem.allegiance && system.allegiance && system.allegiance != \"None\":\r\n            You {OneOf(\"are now in\", \"have entered\", \"are entering\")} {reportsystem.allegiance} space.\r\n            {if cmdr.title != \"Commander\":\r\n                Welcome back {F(\"Honorific\")}.\r\n            }\r\n        }\r\n\r\n        {if reportsystem.visits = 0:\r\n            This is your first visit to this system\r\n        |elif reportsystem.visits = 1:\r\n            This is your second visit to this system\r\n        |elif reportsystem.visits = 2:\r\n            {Occasionally(2, \"This is your third visit to this system\")}\r\n        |elif reportsystem.visits = 3:\r\n            {Occasionally(2, \"This is your fourth visit to this system\")}\r\n        |else:\r\n            {Occasionally(3, \"You have visited this system {reportsystem.visits} times\")}\r\n        }.\r\n\r\n        {if !reportsystem.population && lastsystem.population:\r\n            {OneOf(\"This system is not populated\",\"There is no human presence here\", \"Humans have yet to colonise this system\")}.\r\n        |elif reportsystem.population && reportsystem.visits < 6:\r\n            {if SecondsSince(reportsystem.lastVisitSeconds) > 3600:\r\n                {F(\"System report\")}\r\n            }\r\n        }\r\n\r\n        {if reportsystem.distancefromhome:\r\n            {Occasionally(7, \"{OneOf('You are', 'Current location is', 'You are now')} {Humanise(reportsystem.distancefromhome)} lightyears from {OneOf('home', '{homesystem.name}')}.\")}\r\n        }\r\n\r\n        {if reportsystem.comment:\r\n            You made a {OneOf(\"note\", \"comment\", \"remark\")} {OneOf(\"about\", \"for\", \"on\")} this system.  It {OneOf(\"is as follows\", \"says\", \"reads\", \"is\")} {reportsystem.comment}.\r\n        }\r\n    }\r\n}\r\n{_ Added by Kenjiro _}\r\n{SetState('fsd_engaged', reportsystem.visits)}",
      "default": false,
      "name": "FSD engaged",
      "description": "Triggered when your FSD has engaged"
    },
    "Fuel check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fuel Check _}\r\n{_ Report fuel level _}\r\n\r\n{if ship.name = state.eddi_fuelcheck_shipname:\r\n    {if state.eddi_context_fuel_used > state.eddi_fuelcheck_maxfuel:\r\n        {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\r\n    }\r\n|else:\r\n    {SetState('eddi_fuelcheck_maxfuel', state.eddi_context_fuel_used)}\r\n    {SetState('eddi_fuelcheck_shipname', ship.name)}\r\n}\r\n\r\n{set maxfuel to state.eddi_fuelcheck_maxfuel}\r\n{set fuelremaining to state.eddi_context_fuel_remaining}\r\n{set maxjump to fuelremaining/maxfuel}\r\n{set currentfuel to round(fuelremaining / ship.fueltanktotalcapacity * 100, 0)}\r\n{set shipsfuel to:\r\n   {Occasionally(2, \"{ShipName()}'s\" )} Fuel\r\n   {OneOf(\"levels\", \"tanks\", \"reserves\")} {Occasionally(2, \"are\")} {Occasionally(2, \"now\")}\r\n}\r\n{set currentpercent to: \r\n   at {currentfuel} percent {Occasionally(2, \"capacity\")}\r\n}\r\n{set title to Occasionally(3,\"{F('Honorific')}\")}\r\n\r\n{if maxjump < 0.5:\r\n   Danger!\r\n   {shipsfuel} depleted!\r\n   {Pause(500)}\r\n   Running on reserves. Shutdown of non-essential systems is advised!\r\n   {Pause(500)}\r\n   Emergency transponder standing by, {title}\r\n|elif maxjump < 1.25:\r\n   {OneOf(\"Warning:\", \"Caution:\", \"Danger:\", \"Attention:\")}\r\n   {shipsfuel} {OneOf(\"dangerously low\", \"almost depleted\")}.\r\n   {OneOf(\"Please refuel\", \"Refueling is strongly recommended\")}, {title}\r\n|elif currentfuel < 25:\r\n   {OneOf(\"Warning:\", \"Caution:\", \"Danger:\", \"Attention:\")}\r\n   {shipsfuel} {OneOf(\"below 25%\", \"{currentpercent}\" )}, {title}\r\n|elif currentfuel < 50:\r\n   {shipsfuel} {OneOf(\"below 50%\", \"{currentpercent}\" )}, {title}\r\n|elif currentfuel < 75:\r\n   {Occasionally(2, \"{shipsfuel} {currentpercent}, {title}\")}\r\n|elif currentfuel < 100:\r\n   {Occasionally(3, \"{shipsfuel} {currentpercent}, {title}\")}\r\n|else:\r\n   {shipsfuel} {OneOf(currentpercent, \"at maximum\")}, {title}\r\n}\r\n",
      "default": false,
      "name": "Fuel check",
      "description": "Report on fuel levels"
    },
    "Galnet latest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    Não há notícias não lidas nessa categoria.\r\n|else:\r\n    {set article to articles[0]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": true,
      "name": "Galnet latest news",
      "description": "Read the latest unread news in a given category"
    },
    "Galnet mark read": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    Não há notícias não lidas.\r\n    {if articlecategory: 'nessa categoria' }\r\n|else:\r\n    {set item to 0}\r\n    {while item < len(articles):\r\n        {GalnetNewsMarkRead(articles[item].id)}\r\n        {set item to (item + 1)}\r\n    }\r\n    {len(articles)} news {OneOf('artigos', 'ítens')} marcados como lidos\r\n}.\r\n",
      "default": true,
      "name": "Galnet mark read",
      "description": "Mark news articles as read"
    },
    "Galnet news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch article from state }\r\n{set articleid to state.articleid}\r\n{if articleid:\r\n    {set article to GalnetNews(articleid)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'news')}\r\n    {SetState('eddi_context_galnet_news_id', articleid)}\r\n}\r\n\r\n{if !article:\r\n    {_ Fetch from context }\r\n    {set article to GalnetNews(state.eddi_context_galnet_news_id)}\r\n}\r\n\r\n{if article:\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n|else:\r\n    Não tenho qualquer informação sobre esse artigo\r\n}.",
      "default": true,
      "name": "Galnet news",
      "description": "Read a particular news article"
    },
    "Galnet news published": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set interesting to \"Article\"}\r\n\r\n{set interesting_news_title to []}\r\n{set interesting_news_content to []}\r\n{set not_interesting_news_title to []}\r\n{set not_interesting_news_content to []}\r\n\r\n{set item to 0}\r\n{while item < len(event.items):\r\n    {if match(event.items[item].category, interesting ):\r\n        {set interesting_news_title to cat(interesting_news_title, [event.items[item].title])}\r\n        {set interesting_news_content to cat(interesting_news_content, [event.items[item].content])}\r\n    |else:\r\n        {set not_interesting_news_title to cat(not_interesting_news_title, [event.items[item].title])}\r\n        {set not_interesting_news_content to cat(not_interesting_news_content, [event.items[item].content])}\r\n    }\r\n    {GalnetNewsMarkRead(event.items[item].content.id)}\r\n    {set item to (item + 1)}\r\n}\r\n{if len(event.items) = len(interesting_news_title): \r\n    {set allinteresting to 1} \r\n}\r\n\r\n{if len(interesting_news_title) > 0:\r\n    {if len(interesting_news_title) = 1:\r\n  {set remarkable to OneOf('notável', 'interessante', 'intrigante', 'incomum')}\r\n  Um novo artigo {remarkable} da Galnet foi publicado, com o título de {interesting_news_title[0]}.\r\n    |elif len(event.items) > 1:\r\n        {len(event.items)} \r\n        novos artigos  \r\n  {if allinteresting: \r\n             {OneOf(\"notáveis\", \"interessantes\", \"intrigantes\", \"incomuns\")}\r\n        }\r\n        da Galnet foram publicados\r\n        {if !allinteresting:\r\n             , incluindo {len(interesting_news_title)} \r\n             {OneOf('de interesse.', 'a serem notados.', 'dignos de observação.')}\r\n        }.\r\n    }\r\n|elif len(event.items) != ( len(interesting_news_title) + len(not_interesting_news_title) ):\r\n    {len(event.items)} novos artigos da Galnet foram publicados, mas não pude determinar\r\n    se algum era de seu interesse, {F('Honorific')}. \r\n|elif len(interesting_news_title) = 0:\r\n    Notícias da Galnet foram publicadas, mas não há nada digno de relato, {F('Honorific')}.\r\n}\r\n\r\n{if len(interesting_news_title) > 0:\r\n    {if len(interesting_news_title) = 1:\r\n        Que está escrito: {interesting_news_content[0]}.\r\n    |elif len(interesting_news_title) > 1:\r\n        {set item to 0}\r\n        {while item < len(interesting_news_title):\r\n            {if item = 0:\r\n                O primeiro\r\n                tem o título {interesting_news_title[item]},\r\n                e está escrito: {interesting_news_content[item]}.\r\n            |elif item = 1:\r\n                O segundo\r\n                tem o título {interesting_news_title[item]},\r\n                e está escrito: {interesting_news_content[item]}.\r\n            |elif item = len(event.items) - 1:\r\n                O último\r\n                tem o título {interesting_news_title[item]},\r\n                e está escrito: {interesting_news_content[item]}.\r\n            |else:\r\n                O próximo\r\n                tem o título {interesting_news_title[item]},\r\n                e está escrito: {interesting_news_content[item]}.\r\n            }\r\n            {set item to item + 1}\r\n            {Pause(1000)}\r\n        }\r\n    }\r\n}",
      "default": true,
      "name": "Galnet news published",
      "description": "Triggered when news is published on Galnet"
    },
    "Galnet oldest news": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch category from state }\r\n{set articlecategory to state.article_category}\r\n\r\n{if articlecategory:\r\n    {set articles to GalnetNewsArticles(articlecategory)}\r\n|else:\r\n    {set articles to GalnetNewsArticles('Article')}\r\n}\r\n\r\n{if len(articles) = 0:\r\n    Não há notícias não lidas nessa categoria\r\n|else:\r\n    {set article to articles[len(articles)-1]}\r\n    {SetState('eddi_context_galnet_news_id', article.id)}\r\n    {article.title}: {article.content}\r\n    {GalnetNewsMarkRead(article.id)}\r\n}.\r\n",
      "default": true,
      "name": "Galnet oldest news",
      "description": "Read the oldest unread news in a given category"
    },
    "Galnet unread report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set articles to GalnetNewsArticles(\"Article\")}\r\n\r\n{if len(articles) = 0:\r\n    Você não tem notícias não lidas\r\n|elif len(articles) = 1:\r\n    Você tem uma notícia não lida\r\n|else:\r\n    Você tem {len(articles)} notícias não lidas\r\n}.",
      "default": true,
      "name": "Galnet unread report",
      "description": "Report on unread news"
    },
    "GetDistance": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ GetDistance}\r\n{_ Find distance to destination}\r\n\r\n{set dist to -1}\r\n\r\n{set fs to system.name}\r\n{set ts to state.eddi_context_system_system}\r\n\r\n{if fs && ts:\r\n    {if ts = \"\":\r\n        Origin system not designated.\r\n    |elif fs = \"\":\r\n        Destination system not designated.\r\n    |else:\r\n        {set fs to SystemDetails(fs)}\r\n        {set ts to SystemDetails(ts)}\r\n\r\n        {if !fs.name:\r\n            Your origin is not in the Pilot's Federation star charts.\r\n        |elif !ts.name:\r\n            Your destination is not in the Pilot's Federation star charts.\r\n        |else:\r\n            {set dist to round(Distance(fs.x, fs.y, fs.z, ts.x, ts.y, ts.z), 2)}\r\n            {if state.getdistance = 'true':\r\n                Distance {Occasionally(2, \"from {fs.name}\")} to\r\n                {Occasionally(2, \"{OneOf('target','destination')} system\")}\r\n                {ts.name} is {dist} light years.\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{SetState('distance', dist)}\r\n",
      "default": true,
      "name": "GetDistance",
      "description": "Find distance to destination"
    },
    "Glide": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'fsd')}\r\n{SetState('eddi_context_last_action', 'glide')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n\r\n{if event.gliding:\r\n    {Pause(2000)}\r\n    Glide {Occasionally(2, \"mode\")} \r\n    {OneOf(\"engaged.\", \"initiated.\")}\r\n\r\n    {set body to BodyDetails(event.body, event.system)}\r\n    {if !body.name || body.name = \"\" || !body.gravity:\r\n        Planetary approach data not available.\r\n    |else:\r\n        {if body.landable:\r\n            {set gravity to round(body.gravity,2)}\r\n            {if gravity > 4: Danger! {set grav to \"extremely high\"}\r\n            |elif gravity > 2: Caution! {set grav to \"high\"}\r\n            |elif gravity > 0.5: Warning! {set grav to \"medium\"}\r\n            |else: {set grav to \"low\"}\r\n            }\r\n            {F(\"Body Name Tidy\")}\r\n            {body} is a {grav} gravity world, at {gravity} G.\r\n        }\r\n    }\r\n|else:\r\n    Glide completed.\r\n}",
      "default": false,
      "name": "Glide",
      "description": "Triggered when your ship enters or exits glide"
    },
    "Heat damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Perigo:\")}\r\nDano por calor.",
      "default": true,
      "name": "Heat damage",
      "description": "Triggered when your ship is taking damage from excessive heat"
    },
    "Heat warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"Aviso:\")}\r\nNíveis de calor acima da tolerância operacional.\r\n",
      "default": true,
      "name": "Heat warning",
      "description": "Triggered when your ship's heat exceeds 100%"
    },
    "Honorific": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.allegiance = \"Empire\":\r\n    {F(\"Empire honorific\")}\r\n|elif system.allegiance = \"Federation\":\r\n    {if cmdr.federationrating.rank = 0:\r\n        Commander {Occasionally(3,\"{cmdr.name}\")}\r\n    |else:\r\n        {cmdr.federationrating.name} {Occasionally(2,\"{cmdr.name}\")}\r\n    }\r\n|else:\r\n    Commander {Occasionally(4,\"{cmdr.name}\")}\r\n}\r\n",
      "default": false,
      "name": "Honorific",
      "description": "Function to provide a suitable honorific for your commander"
    },
    "Hull damaged": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.vehicle = vehicle:\r\n    {if event.health < 41:\r\n        Danger:\r\n    |elif event.health < 61:\r\n        Warning:\r\n    |elif event.health < 81:\r\n        Caution:\r\n    }\r\n    {OneOf(\"Hull\", \"Hull integrity\", \"Integrity\", \"Structural integrity\")} {Occasionally(3, \"is\")} at {event.health}%.\r\n}\r\n",
      "default": false,
      "name": "Hull damaged",
      "description": "Triggered when your hull is damaged to a certain extent"
    },
    "Insurance check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set covereds to floor(cmdr.credits / ship.rebuy)}\r\n\r\n{if covereds = 0:\r\n  Perigo: você não tem créditos suficientes para cobrir seu seguro.\r\n|elif covereds = 1:\r\n  Cuidado: você só tem créditos suficientes para cobrir um único seguro.\r\n|elif covereds < 4:\r\n  Lembrete: você só tem créditos suficientes para cobrir {covereds} seguros.\r\n|else:\r\n  {Occasionally(5, \"Você tem créditos suficientes para cobrir {covereds} seguros.\")}\r\n}\r\n",
      "default": true,
      "name": "Insurance check",
      "description": "Check for enough credits to cover your insurance"
    },
    "Jet cone boost": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\nMotor de Distorção de Fase impulsionado em {Humanise(event.boost * 100)} porcento.",
      "default": true,
      "name": "Jet cone boost",
      "description": "Triggered when enough material has been collected from a solar jet cone (at a white dwarf or neutron star) for a jump boost"
    },
    "Jet cone damage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Jet cone damage",
      "description": "Triggered in normal space when passing through the jet cone from a white dwarf or neutron star causes damage to a ship module"
    },
    "Jumped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'jump')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n{SetState('eddi_context_fuel_remaining', event.fuelremaining)}\r\n{SetState('eddi_context_fuel_used', event.fuelused)}\r\n\r\n{_ Reset scanned body estimated total value}\r\n{SetState('eddi_context_system_value', 0)}\r\n\r\n{F(\"Fuel check\")}\r\n{Pause(500)}\r\n\r\n{F(\"System state report\")}\r\n\r\n{set dist to -1}\r\n{set thissystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if state.missionsdestination && state.missionsdestination != \"\" && state.missionsdestination != null:\r\n    {set route to split(state.missionsroute, \"_\")}\r\n    {set ds to SystemDetails(state.missionsdestination)}\r\n    {if !ds.name:\r\n        Your destination is not in the Pilot's Federation star charts.\r\n    |else:\r\n        {set dist to round(Distance(ds.name, thissystem.name), 1)}\r\n        {if dist = 0:\r\n            {OneOf(\"You have\", \"{ShipName()} has\")}\r\n            arrived at your {if len(route) = 1:final} destination.\r\n        |else:\r\n            Distance to {if missionsCount > 0:mission |else:route} destination, {ds.name},\r\n            is {dist} light years.\r\n            {set reported to \"yes\"}\r\n        }\r\n    }\r\n    {SetState('distance', dist)}\r\n\r\n    {if len(route) = 1 && thissystem.name = route[0] && missionCount = 0:\r\n        {SetState('missionsroute', \"\")}\r\n        {SetState('missionsdestination', \"\")}\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n    {set system to F(\"Mission check system\")}\r\n    {if system:\r\n        {system}\r\n    |else:\r\n        {F(\"Mission Check Near Most\")}\r\n    }\r\n}\r\n\r\n",
      "default": false,
      "name": "Jumped",
      "description": "Triggered when you complete a jump to another system"
    },
    "Killed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Killed",
      "description": "Triggered when you kill another player"
    },
    "Landing gear": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": null,
      "default": true,
      "name": "Landing gear",
      "description": "Triggered when you deploy or retract your landing gear"
    },
    "Landing pad report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set landingpad to state.eddi_context_landing_pad_pad}\r\nLanding pad {landingpad} is at\r\n{if landingpad = 1:\r\n    six o'clock near\r\n|elif landingpad = 2:\r\n    six o'clock near\r\n|elif landingpad = 3:\r\n    six o'clock far\r\n|elif landingpad = 4:\r\n    six o'clock far\r\n|elif landingpad = 5:\r\n    seven o'clock near\r\n|elif landingpad = 6:\r\n    seven o'clock near\r\n|elif landingpad = 7:\r\n    seven o'clock far\r\n|elif landingpad = 8:\r\n    seven o'clock far\r\n|elif landingpad = 9:\r\n    eight o'clock near\r\n|elif landingpad = 10:\r\n    eight o'clock far\r\n|elif landingpad = 11:\r\n    nine o'clock near\r\n|elif landingpad = 12:\r\n    nine o'clock near\r\n|elif landingpad = 13:\r\n    nine o'clock mid\r\n|elif landingpad = 14:\r\n    nine o'clock far\r\n|elif landingpad = 15:\r\n    nine o'clock far\r\n|elif landingpad = 16:\r\n    ten o'clock near\r\n|elif landingpad = 17:\r\n    ten o'clock near\r\n|elif landingpad = 18:\r\n    ten o'clock far\r\n|elif landingpad = 19:\r\n    ten o'clock far\r\n|elif landingpad = 20:\r\n    eleven o'clock near\r\n|elif landingpad = 21:\r\n    eleven o'clock near\r\n|elif landingpad = 22:\r\n    eleven o'clock far\r\n|elif landingpad = 23:\r\n    eleven o'clock far\r\n|elif landingpad = 24:\r\n    twelve o'clock near\r\n|elif landingpad = 25:\r\n    twelve o'clock far\r\n|elif landingpad = 26:\r\n    one o'clock near\r\n|elif landingpad = 27:\r\n    one o'clock near\r\n|elif landingpad = 28:\r\n    one o'clock mid\r\n|elif landingpad = 29:\r\n    one o'clock far\r\n|elif landingpad = 30:\r\n    one o'clock far\r\n|elif landingpad = 31:\r\n    two o'clock near\r\n|elif landingpad = 32:\r\n    two o'clock near\r\n|elif landingpad = 33:\r\n    two o'clock far\r\n|elif landingpad = 34:\r\n    two o'clock far\r\n|elif landingpad = 35:\r\n    three o'clock near\r\n|elif landingpad = 36:\r\n    three o'clock near\r\n|elif landingpad = 37:\r\n    three o'clock mid\r\n|elif landingpad = 38:\r\n    three o'clock far\r\n|elif landingpad = 39:\r\n    four o'clock near\r\n|elif landingpad = 40:\r\n    four o'clock far\r\n|elif landingpad = 41:\r\n    five o'clock near\r\n|elif landingpad = 42:\r\n    five o'clock near\r\n|elif landingpad = 43:\r\n    five o'clock mid\r\n|elif landingpad = 44:\r\n    five o'clock far\r\n|elif landingpad = 45:\r\n    five o'clock far\r\n}\r\n, as you enter {Occasionally(2,\"{OneOf('the mail slot','the docking port','the airlock')}\")} with the green lights {OneOf(\"on your right\",\"on your starboard side\",\"to starboard\")}.\r\n",
      "default": false,
      "name": "Landing pad report",
      "description": "Report on the location of a landing pad"
    },
    "Liftoff": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.playercontrolled = true:\r\n   {OneOf(\"Maximum thrust\",\"Drives at full power\",\"Engines engaged\")},\r\n   {Pause(250)}\r\n   Lift off {OneOf(\"successful\",\"achieved\",\"\")}.\r\n|else:\r\n   {ShipName()} has lifted off.\r\n}",
      "default": false,
      "name": "Liftoff",
      "description": "Triggered when your ship lifts off from a planet's surface"
    },
    "Lights": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": null,
      "default": true,
      "name": "Lights",
      "description": "Triggered when you activate or deactivate your lights"
    },
    "Limpet check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set  controllers to 0}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Controller\") != -1:\r\n        {set controllers to controllers + 1}\r\n    }\r\n}\r\n\r\n{set limpets to 0}\r\n{for cargo in inventory:\r\n    {if cargo.edname = \"Drones\":\r\n        {set limpets to cargo.total}\r\n    }\r\n}\r\n\r\n{set tenpercent to ship.cargocapacity / 10 - 1}\r\n{if controllers > 0 && limpets = 0:\r\n    Lembrete:: você tem um controlador de drones mas não os está carregando.\r\n|elif controllers = 0 && limpets > 0:\r\n    Você está carregando drones, mas nenhum controlador.\r\n|elif controllers > 0 && limpets < tenpercent:\r\n    Você só tem {limpets} {if limpets = 1: drone |else: drones} a bordo; você deveria pensar em comprar mais.\r\n}\r\n",
      "default": true,
      "name": "Limpet check",
      "description": "Check for the presence/absence of limpets and limpet controllers"
    },
    "Limpet launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Drone {OneOf('lançado','liberado','disparado')}.",
      "default": true,
      "name": "Limpet launched",
      "description": "Triggered when a limpet is launched"
    },
    "Limpet purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_last_action', \"buy_limpet\")}\r\n\r\n{event.amount} limpet{if event.amount > 1:s}\r\n{Occasionally(2, \"have been\")}\r\nadded to \r\n{OneOf(\"our\", \"{ShipName()}'s\")}\r\n{OneOf(\"cargo hold\", \"inventory\", \"hold\")}\r\n",
      "default": false,
      "name": "Limpet purchased",
      "description": "Triggered when you buy limpets from a station"
    },
    "Limpet sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_last_action', \"sell_limpet\")}\r\n\r\n{event.amount} limpet{if event.amount > 1:s}\r\n{Occasionally(2, \"have been\")} sold.\r\n",
      "default": false,
      "name": "Limpet sold",
      "description": "Triggered when you sell limpets to a station"
    },
    "List launchbays": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{for launchbay in ship.launchbays:\r\n    You have a size {launchbay.size} {launchbay.type} hangar.\r\n\r\n    {if launchbay.type = \"SRV\":\r\n        It has {len(launchbay.vehicles)} S-R-V{if len(launchbay.vehicles) != 1:'s}\r\n        {OneOf(\"on board\", \"installed\")}.\r\n    |else:\r\n        {set cur to 0}\r\n\r\n        {for vehicle in launchbay.vehicles:\r\n            It {if cur > 0: also} has\r\n            {if StartsWithAVowel(vehicle.name): an |else: a}\r\n            {vehicle.name}, with a {vehicle.loadout} load out\r\n\r\n            {if type(vehicle.mount) != null:\r\n                {if vehicle.mount = 'F':\r\n                    and fixed weapons\r\n                |elif vehicle.mount = 'G':\r\n                    and ghim-bald weapons\r\n                }\r\n            }\r\n            .{_ full stop _}\r\n\r\n            {if vehicle.rebuilds != null:\r\n                This has\r\n                {if vehicle.rebuilds = 0:\r\n                    no\r\n                |else:\r\n                    {vehicle.rebuilds}\r\n                }\r\n                rebuild{if vehicle.rebuilds != 1:s} remaining.\r\n            }\r\n\r\n            {set cur to cur + 1}\r\n            {Pause(500)}\r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "name": "List launchbays",
      "description": "Describes the contents of each launchbay in the ship"
    },
    "Location": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Location }\r\n{_ Triggered when the commander's location is reported, usually when they reload their game. }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'location')}\r\n{SetState('eddi_context_system_name', event.system)}\r\n{SetState('eddi_context_body_name', event.body)}\r\n{SetState('eddi_context_body_system', event.system)}\r\n{SetState('eddi_context_docked',\"no\")}\r\n\r\n\r\n{F(\"Body Name Tidy\")}\r\n\r\nYou are\r\n{if event.docked:\r\n    {SetState('eddi_context_docked',\"yes\")}\r\n    docked at the\r\n    {if event.station = body:\r\n        orbital station {P(event.station)}\r\n    |else:\r\n        ground station {P(event.station)} on {body},\r\n    }\r\n|elif event.body:\r\n    {if event.longitude || event.latitude:\r\n        on\r\n        {SetState('loading', true)}\r\n    |else:\r\n        near\r\n    }\r\n    {body},\r\n}\r\nin the {event.system} system.\r\n",
      "default": false,
      "name": "Location",
      "description": "Triggered when the commander's location is reported, usually when they reload their game."
    },
    "Low fuel": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Low fuel",
      "description": "Triggered when your fuel level falls below 25%."
    },
    "Market information updated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Find out in advance what we have to say }\r\n{if ship.role = \"Multipurpose\" || ship.role = \"Trading\":\r\n    {set purchasecheck to F(\"Commodity purchase check\")}\r\n}\r\n{set limpetcheck to F(\"Limpet check\")}\r\n{set swapoutcheck to F(\"Swapout check\")}\r\n{set salecheck to F(\"Commodity sale check\")}\r\n\r\n{_ Pause(4500)}\r\n\r\n{if purchasecheck || salecheck || limpetcheck || swapoutcheck:\r\n    {OneOf(\"Market\", \"Local market\", \"Station services\")}\r\n    {OneOf(\"data\", \"information\", \"price\")}\r\n    {OneOf(\"update\", \"refresh\", \"changes\")}\r\n    {OneOf(\"received\", \"obtained\")}.\r\n\r\n    {salecheck}\r\n    {purchasecheck}\r\n    {swapoutcheck}\r\n    {limpetcheck}\r\n}\r\n\r\n{F(\"FinesBounties_CheckContacts\")}\r\n",
      "default": false,
      "name": "Market information updated",
      "description": "Triggered when market information for the currently docked station has been updated"
    },
    "Material collected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'collect')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n\r\n{set matis to MaterialDetails(event.name)}\r\n\r\n{OneOf(\"{matis.name} {OneOf('Received','Collected','Ob-tained')}\",\r\n       \"{OneOf('Received','Collected','Ob-tained')} {matis.name}\")}.\r\n\r\n{if matis.category = \"Data\":\r\n    {if matis.rarity.level > 3:\r\n        {Occasionally(2,\"This is\")} a {matis.rarity.name} {OneOf(\"data set\",\"set of data\",\"data scan\")}.\r\n    }\r\n\r\n|elif matis.category = \"Element\":\r\n\r\n|elif matis.category = \"Manufactured\":\r\n    {if matis.name = \"unknownenergysource\":\r\n        {_ Unknown Artifact Fragment}\r\n    }\r\n\r\n|elif matis.category = \"Unknown\":\r\n    {set type to slice(matis.name,0,7)}\r\n    {if type = \"ancient\":\r\n        {_ ancient alien data}\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Material collected",
      "description": "Triggered when you collect a material"
    },
    "Material discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n\r\n{if inventory:\r\n    {if inventory.maximum && inventory.maximum < inventory.amount:\r\n        {set over to inventory.amount - inventory.maximum}\r\n        You can discard {over} unit{if over != 1:s} of {inventory.material} to reach your maximum level.\r\n    |elif inventory.desired && inventory.desired < inventory.amount:\r\n        {set over to inventory.amount - inventory.desired}\r\n        You can discard {over} unit{if over != 1:s} of {inventory.material} to reach your desired level.\r\n    |elif inventory.desired:\r\n        You are below your desired level for {inventory.material}.\r\n    |elif inventory.maximum:\r\n        You are below your maximum level for {inventory.material}.\r\n    |else:\r\n        You have not set any levels for {inventory.material}.\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Material discard report",
      "description": "Report on how many of a material can be discarded"
    },
    "Material discarded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discard')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "name": "Material discarded",
      "description": "Triggered when you discard a material"
    },
    "Material discovered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'discover')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n\r\n\r\n{set matis to MaterialDetails(event.name)}\r\n\r\n{Occasionally(2,\"You have\")} Discovered {P(matis.name)},\r\n{Occasionally(2,\"this is\")}\r\na{if matis.rarity.name = \"unknown\":n}\r\n{matis.rarity.name}\r\n\r\n{if matis.category = \"Manufactured\":\r\n   manufactured {OneOf(\"item\",\"component\")}\r\n|elif matis.category = \"Data\":\r\n   {OneOf(\"data set\",\"set of data\")}\r\n|elif matis.category = \"Unknown\":\r\n   {set type to slice(matis.name,0,7)}\r\n   {if type = \"ancient\":\r\n      ancient alien data\r\n   |else:\r\n      {matis.name}\r\n   }\r\n|else:\r\n   element\r\n}\r\n.\r\n",
      "default": false,
      "name": "Material discovered",
      "description": "Triggered when you discover a material"
    },
    "Material donated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'material')}\r\n{SetState('eddi_context_last_action', 'donate')}\r\n{SetState('eddi_context_material_name', event.name)}\r\n",
      "default": true,
      "name": "Material donated",
      "description": "Triggered when you donate a material"
    },
    "Material inventory": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Material inventory",
      "description": "Triggered when you obtain an inventory of your current materials"
    },
    "Material inventory report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n \r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_last_subject', 'inventory')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n{if inventory && inventory.amount > 0:\r\n    You have {inventory.amount} unit{if inventory.amount != 1:s} of {inventory.material} on board.\r\n|else:\r\n    You have no {inventory.material} on board.\r\n}\r\n",
      "default": false,
      "name": "Material inventory report",
      "description": "Report on how many of a material are on-board"
    },
    "Material location report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material.name:\r\n    {if material.location:\r\n        {material.name} pode ser {material.location}\r\n    |else:\r\n        Não há informação disponível sobre onde encontrar {material.name}\r\n    }\r\n|else:\r\n    Não tenho informação sobre esse material\r\n}\r\n",
      "default": true,
      "name": "Material location report",
      "description": "Report on the where to obtain a particular material"
    },
    "Material required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to obtain a material from inventory}\r\n{set _inventory(required) to:\r\n    {for material in materials:\r\n        {if material.material = required:\r\n            {return material}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{set inventory to _inventory(material.name)}\r\n\r\n\r\n{if inventory:\r\n    {if inventory.minimum && inventory.minimum > inventory.amount:\r\n        {set under to inventory.minimum - inventory.amount}\r\n        You require {under} unit{if under > 1:s} of {inventory.material} to reach your minimum level.\r\n    |elif inventory.desired && inventory.desired > inventory.amount:\r\n        {set under to inventory.desired - inventory.amount}\r\n        You require {under} unit{if under > 1:s} of {inventory.material} to reach your desired level.\r\n    |elif inventory.desired:\r\n        You are above your desired level for {inventory.material}.\r\n    |elif inventory.minimum :\r\n        You are above your minimum level for {inventory.material}.\r\n    |else:\r\n        You have not set any levels for {inventory.material}.\r\n    }\r\n}\r\n\r\n",
      "default": false,
      "name": "Material required report",
      "description": "Report on how many of a material are required to reach 'desired' level"
    },
    "Material threshold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.level = 'Minimum':\r\n    {_ Gone below the minimum level }\r\n    {OneOf(\"Stock\", \"Inventory\", \"Supplies\")} of {event.material.name} has fallen below your minimum.\r\n|elif event.level = 'Maximum':\r\n    {_ Gone above the maximum level }\r\n    {OneOf(\"Stock\", \"Inventory\", \"Supplies\")} of {event.material.name} has grown above your maximum.\r\n|else:\r\n    {_ Moved around the desired level }\r\n    You\r\n    {if event.change = 'Increase': have reached\r\n    |else: are below\r\n    }\r\n    your desired level of {event.material.name}.\r\n}\r\n\r\n{OneOf(\"Current stock is {event.amount}\",\r\n       \"Currently holding {event.amount}\",\r\n       \"{event.amount} on-board\")}.",
      "default": false,
      "name": "Material threshold",
      "description": "Triggered when a material reaches a threshold"
    },
    "Material traded": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Material traded",
      "description": "Triggered when materials are traded at a material trader"
    },
    "Material use report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch material from state }\r\n{set material to state.material}\r\n{if material:\r\n    {_ Fetch full material details }\r\n    {set material to MaterialDetails(material)}\r\n\r\n    {_ Context }\r\n    {SetState('eddi_context_last_subject', 'material')}\r\n    {SetState('eddi_context_material_name', material.name)}\r\n}\r\n\r\n{if !material:\r\n    {_ Fetch from context }\r\n    {set material to MaterialDetails(state.eddi_context_material_name)}\r\n}\r\n\r\n{if material && material.name:\r\n    {set uses to len(material.blueprints)}\r\n    {if slice(material.name, len(material.name)-1) = 's':\r\n        {set plural to 'are'}\r\n    |else:\r\n        {set plural to 'is'}\r\n    }\r\n    {if uses = 0:\r\n        {material.name} {plural} not required for any blueprints\r\n    |elif uses = 1:\r\n        {set name to cat(material.blueprints[0].name, \" \", material.blueprints[0].modulename, \" grade \", material.blueprints[0].grade)}\r\n        {material.name} {plural} used for the {name} blueprint\r\n    |elif uses = 2:\r\n        {set name0 to cat(material.blueprints[0].name, \" \", material.blueprints[0].modulename, \" grade \", material.blueprints[0].grade)}\r\n        {set name1 to cat(material.blueprints[1].name, \" \", material.blueprints[1].modulename, \" grade \", material.blueprints[1].grade)}\r\n        {material.name} {plural} used for the {name0} and {name1} blueprints\r\n    |else:\r\n        {material.name} {plural} used for {len(material.blueprints)} blueprints.  These are\r\n        {set cur to 0}\r\n        {set length to len(material.blueprints) - 1}\r\n        {while cur < len(material.blueprints):\r\n            {set name to cat(material.blueprints[cur].name, \" \", material.blueprints[cur].modulename, \" grade \", material.blueprints[cur].grade)}\r\n            {name}\r\n            {set cur to cur + 1}\r\n            {if cur = length: and\r\n            |elif cur < length:,\r\n            }\r\n        }\r\n    }\r\n|else:\r\n    I don't have any information about that material\r\n}.\r\n",
      "default": false,
      "name": "Material use report",
      "description": "Report on the use of a material"
    },
    "Materials discard report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{_ Find those that are above maximum, desired and minimum}\r\n{set shoulddiscardmaterials to []}\r\n{set coulddiscardmaterials to []}\r\n{set lastdiscardmaterials to []}\r\n\r\n{for material in materials:\r\n    {if material.maximum && material.amount > material.maximum:\r\n      {set shoulddiscardmaterials to cat(shoulddiscardmaterials, [material])}\r\n    |elif material.desired && material.amount > material.desired:\r\n      {set coulddiscardmaterials to cat(coulddiscardmaterials, [material])}\r\n    |elif material.minimum && material.amount > material.minimum:\r\n      {set lastdiscardmaterials to cat(lastdiscardmaterials, [material])}\r\n    }\r\n}\r\n\r\n{if len(shoulddiscardmaterials) > 0:\r\n    You are over your maximum level for {len(shoulddiscardmaterials)} material{if len(shoulddiscardmaterials) != 1:s}.\r\n    You can discard\r\n\r\n    {set cur to 0}\r\n    {set length to len(shoulddiscardmaterials) - 1}\r\n    {while cur < len(shoulddiscardmaterials):\r\n        {shoulddiscardmaterials[cur].amount - shoulddiscardmaterials[cur].maximum} {shoulddiscardmaterials[cur].material}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n|elif len(coulddiscardmaterials) > 0:\r\n    You are over your desired level for {len(coulddiscardmaterials)} material{if len(coulddiscardmaterials) != 1:s}.\r\n    You can discard\r\n\r\n    {set cur to 0}\r\n    {set length to len(coulddiscardmaterials) - 1}\r\n    {while cur < len(coulddiscardmaterials):\r\n        {coulddiscardmaterials[cur].amount - coulddiscardmaterials[cur].desired} {coulddiscardmaterials[cur].material}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n|elif len(lastdiscardmaterials) > 0:\r\n    You are over your minimum level for {len(lastdiscardmaterials)} material{if len(lastdiscardmaterials) != 1:s}.\r\n    You can discard\r\n\r\n    {set cur to 0}\r\n    {set length to len(lastdiscardmaterials) -1 }\r\n    {while cur < len(lastdiscardmaterials):\r\n        {lastdiscardmaterials[cur].amount - lastdiscardmaterials[cur].minimum} {lastdiscardmaterials[cur].material}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n|else:\r\n    No materials can be discarded and remain within minimum levels.\r\n}\r\n",
      "default": false,
      "name": "Materials discard report",
      "description": "Report on which materials can be discarded"
    },
    "Materials required report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{set required to []}\r\n\r\n{for material in materials:\r\n  {if material.desired && material.amount < material.desired:\r\n    {set required to cat(required, [material])}\r\n }\r\n}\r\n\r\n{if len(required) > 0:\r\n    You require\r\n\r\n    {set cur to 0}\r\n    {set length to len(required) - 1}\r\n    {while cur < len(required):\r\n        {required[cur].desired - required[cur].amount} {required[cur].material}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n|else:\r\n    You have all the materials you desire.\r\n}",
      "default": false,
      "name": "Materials required report",
      "description": "Report on how many of each material are required to reach 'desired' level"
    },
    "Message received": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'receive')}\r\n{SetState('eddi_context_message_name', event.from)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{_ Setup channel list to speak. Only messages received on these channels will be spoken _}\r\n{_ Options: direct, friend, local, multicrew, npc, player, voicechat, wing _}\r\n{set channellist to [\"direct\", \"friend\", \"multicrew\", \"npc\", \"player\", \"voicechat\", \"wing\"]}\r\n\r\n{_ Setup sender list to speak. Only messages FROM these will be spoken _}\r\n{_ Messages from Players will always be spoken _}\r\n{_ Options: Ambushed pilot, Bounty hunter, Capital ship, Cargo hunter _}\r\n{_ Civilian pilot, Commander, Cruise liner, Escort, Exploration convoy _}\r\n{_ Hitman, Messenger, Military, Miner, NPC, Passenger hunter, Passenger liner _}\r\n{_ Pirate, Police, Propagandist, Protester, Refugee, Rival power's agent _}\r\n{_ Search and rescue, Starship One, Station, Wedding convoy, Wing mate _}\r\n{set senderlist to [\"Bounty hunter\", \"Military\", \"Pirate\", \"Police\"]}\r\n\r\n\r\n{if event.player = true:\r\n    {if event.message = \"o7\":\r\n        {event.from} salutes\r\n        {if event.channel = \"player\":\r\n            you\r\n        }.\r\n    |else:\r\n        {event.source} {event.from} sends: {event.message}.\r\n    }\r\n|elif find(channellist, event.channel) > -1 && find(senderlist, event.source) > -1:\r\n\r\n    {_ List all your installed voices that you wish to use _}\r\n    {set voice to OneOf(\"Microsoft Zira Desktop\", \"Microsoft Hazel Desktop\", \"Microsoft David Desktop\", \"Ivona 2 Amy\", \"Ivona 2 Brian\", \"Ivona 2 Emma\", \"Ivona 2 Eric\", \"Ivona 2 Geraint\", \"Ivona 2 Gwyneth\", \"Ivona 2 Jennifer\", \"Ivona 2 Joey\", \"Ivona 2 Kendra\", \"Ivona 2 Kimberly\", \"Ivona 2 Nicole\", \"Ivona 2 Raveena\", \"Ivona 2 Russell\", \"Ivona 2 Salli\", \"Ivona 2 Amy\")}\r\n    {if find(voice, \"Desktop\") > -1:\r\n        {set volume to \"high\"} {_ 'Desktop' voices are a little bit quieter, so this ups the volume _}\r\n    |else:\r\n        {set volume to \"default\"}\r\n    }\r\n\r\n    {set pitch to OneOf(\"x-low\",\"low\",\"medium\",\"default\",\"high\",\"x-high\")}\r\n    {set rate to OneOf(\"slow\",\"medium\",\"default\",\"fast\")}\r\n\r\n    From {event.from}: {Transmit(event.message)}\r\n {_ Transmit(SpeechVolume(SpeechRate(SpeechPitch(Voice(event.message, voice),pitch),rate),volume)) _}\r\n}\r\n",
      "default": false,
      "name": "Message received",
      "description": "Triggered when you receive a message"
    },
    "Message sent": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'message')}\r\n{SetState('eddi_context_last_action', 'send')}\r\n{SetState('eddi_context_message_name', event.to)}\r\n{SetState('eddi_context_message_content', event.message)}\r\n\r\n{Occasionally(2,\"{OneOf('Communication','Message')}\")} Sent.\r\n",
      "default": false,
      "name": "Message sent",
      "description": "Triggered when you send a message"
    },
    "Mission abandoned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'abandon')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n{set status to mission.status}\r\n\r\n{if event.communal:\r\n    You have abandoned the community goal: {mission.localisedname}\r\n|else:\r\n    {if find(mission.typeEDName, \"Passenger\") > -1:\r\n        {set type to \"Transport \"}\r\n        {set type to cat(type, mission.passengertype)}\r\n    |else:\r\n        {set type to mission.type}\r\n    }\r\n    {set type to cat(type, \" mission\")}\r\n\r\n    {type} {if mission.faction: for {mission.faction}} abandoned.\r\n}\r\n\r\n{set type to \"Abandoned\"}\r\n{F(\"Mission Route Update\")}\r\n",
      "default": false,
      "name": "Mission abandoned",
      "description": "Triggered when you abandon a mission"
    },
    "Mission accepted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'accepted')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if mission.type = \"Donation\":\r\n    {OneOf(\"You have chosen\",\"Mission accepted\")} to {Occasionally(2,\"generously\")} donate\r\n    {if mission.typeEDName = \"Altruism\": {mission.commodity} |else: credits} to\r\n    {OneOf(\"{P(lcase(mission.faction))} in order to {OneOf('improve','raise','increase')} your {OneOf('reputation','standing')} with this faction\",\r\n          \"{OneOf('improve','raise','increase')} your {OneOf('reputation','standing')} with {P(lcase(mission.faction))}\")}\r\n|elif event.communal:\r\n    You have accepted the community goal: {mission.localisedname}\r\n|else:\r\n    {if find(mission.typeEDName, \"Passenger\") > -1:\r\n        {set type to \"Transport \"}\r\n        {set type to cat(type, mission.passengertype)}\r\n    |else:\r\n        {set type to mission.type}\r\n    }\r\n    {set type to cat(type, \" mission\")}\r\n    {OneOf(\"{type} {if mission.faction: for {mission.faction}} accepted\",\r\n        \"{type} accepted {if mission.faction: for {mission.faction}}\",\r\n        \"You have accepted a {type} {if mission.faction: for {mission.faction}}\")\r\n    }\r\n}\r\n\r\n{Occasionally(1,\"{F('Mission faction state')}\")}..\r\n\r\n{if event.passengerswanted:\r\n Warning! You are {OneOf(\"transporting\",\"carrying\")}\r\n {OneOf(\"{OneOf('wanted','illegal')} {OneOf('passengers','personnel')}\",\"known felons\")}!\r\n You may be attacked by {Occasionally(2,\"system\")} {OneOf(\"authority\",\"police\")}. Caution is advised.  Avoid being scanned.\r\n|elif token(mission.name,\"_\",2)  = \"Skimmer\":\r\n   This is a surface {OneOf(\"mission\",\"operation\")}.\r\n|elif token(mission.name,\"_\",2)  = \"Surface\":\r\n   This is a surface {OneOf(\"mission\",\"operation\")}, you will require an SRV.\r\n}\r\n\r\n{if missionsCount = 20:\r\n    You have now reached the maximum number of missions you can take.\r\n    Please complete some, in order to accept more.\r\n|else:\r\n   {OneOf(\"You {Occasionally(2,'now')} have {missionsCount} mission{if missionsCount > 1:s}\",\r\n        \"{OneOf('That\\\\'s','That is','This is')} your\r\n    {if missionsCount = 1: 1st\r\n    |elif missionsCount = 2: 2nd\r\n    |elif missionsCount = 3: 3rd\r\n    |else: {missionsCount}th\r\n    }\r\n    mission\")}.\r\n}\r\n\r\n{if mission.type = \"Delivery\" || mission.type = \"Supply\" || mission.type = \"Smuggle\":\r\n    {Pause(400)}\r\n    {SetState('eddi_context_mission_cargo', \"yes\")}\r\n    {event.amount} tonne{if event.amount != 1:s} of {event.commodity}\r\n\r\n    {set cargo to CargoDetails(event.missionid)}\r\n    {if cargo.total > 0: \r\n        now {OneOf(\"added to the ship's manifest\", \"loaded on board\", \"stored in the cargo hold\")}\r\n    |else:\r\n        to be {OneOf(\"delivered\", \"transported\")}. Please collect from the Cargo Depot\r\n    }.\r\n}\r\n\r\n{set type to \"Accepted\"}\r\n{F(\"Mission Route Update\")}\r\n",
      "default": false,
      "name": "Mission accepted",
      "description": "Triggered when you accept a mission"
    },
    "Mission Check Expiring": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission Check Expiring }\r\n{_ Check what missions are close to expiring }\r\n\r\n\r\n{if missionsCount > 0 && missionsCount != null:\r\n\r\n    {set mission_destination to []}\r\n    {set mission_expiration to []}\r\n    {set mission_name to []}\r\n    {set mission_id to []}\r\n    {set cur to 0}\r\n\r\n    {while cur < missionsCount:\r\n        {set destination to missions[cur].destinationsystem}\r\n        {if !destination: {set destination to missions[cur].destinationsystems} }\r\n        {set expiry to missions[cur].expiryseconds}\r\n        {set status to missions[cur].status}\r\n        {set name to missions[cur].name}\r\n        {set missionid to missions[cur].missionid}\r\n\r\n        {if expiry != \"\" && (status != \"failed\" || status != \"completed\"):\r\n\r\n            {set seconds to floor(abs(SecondsSince(expiry)))}\r\n\r\n            {if seconds / 60 < missionWarning:\r\n\r\n                {set mission_destination to cat(mission_destination, [destination])}\r\n                {set mission_expiration to cat(mission_expiration, [seconds])}\r\n                {set mission_name to cat(mission_name, [name])}\r\n                {set mission_id to cat(mission_id, [missionid])}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {if len(mission_destination) > 0:\r\n        Warning!\r\n        {set cur to 0}\r\n        {while cur < len(mission_destination):\r\n\r\n            {set mission to MissionDetails(mission_id[cur])}\r\n            {if find(mission.typeEDName, \"Passenger\") > -1:\r\n                {set type to \"Transport \"}\r\n                {set type to cat(type, mission.passengertype)}\r\n            |else:\r\n                {set type to mission.type}\r\n            }\r\n            {type} mission\r\n\r\n            {if find(mission_destination[cur], \"_\") > -1:\r\n                for multiple destinations,\r\n            |else:\r\n                {if mission_destination[cur] != state.eddi_context_system_name:\r\n                    in the {mission_destination[cur]}\r\n                |else:\r\n                    in {OneOf(\"this\", \"the current\")}\r\n                }\r\n                system,\r\n            }\r\n            expiring in \r\n\r\n            {set timer to split(format(mission_expiration[cur], \"dl:dd:HH:mm:ss\"), \":\")}\r\n            {set days to cast(timer[0], \"n\") - 1}\r\n            {set hours to cast(timer[1], \"n\")}\r\n            {set minutes to cast(timer[2], \"n\") - 1}\r\n\r\n            {if days > 0: {days} day{if days > 1:s}{if hours = 0: and |else:,}}\r\n            {if hours > 0: {hours} hour{if hours > 1:s} and}\r\n            {minutes} minute{if minutes > 1:s}.\r\n\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Mission Check Expiring",
      "description": "Check what missions are close to expiring"
    },
    "Mission check galaxy": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission report }\r\n{_ Check what systems you have missions in }\r\n\r\n\r\n{_ Setup allmissions function }\r\n{set allmissions(system) to:\r\n    {set here to find(systems, system)}\r\n    {if here > -1:\r\n        {set number to systems_count[here] + 1}\r\n        {set systems_count to union(systems_count, [here:number])}\r\n    |else:\r\n        {set systems to cat(systems, [system])}\r\n        {set systems_count to cat(systems_count, [1])}\r\n    }\r\n}\r\n\r\n{if missionsCount > 0:\r\n\r\n    {set multi to 0}\r\n\r\n    You have {missionsCount} mission{if missionsCount != 1:s}.\r\n\r\n    {if missionsCount = 1:\r\n\r\n        It is {Occasionally(2,\"located\")} in\r\n\r\n        {if missions[0].destinationsystem && missions[0].destinationsystem != \"\":\r\n            the {join(split(missions[0].destinationsystem, \".\"), \" \")}\r\n        |else:\r\n            an unknown\r\n        }\r\n        {Occasionally(2,\"star\")} system.\r\n\r\n    |else:\r\n        {set systems to []}\r\n        {set systems_count to []}\r\n\r\n        {for mission in missions:\r\n            {if mission.status = \"Active\":\r\n                {if mission.destinationsystems:\r\n                    {set multi to multi + 1}\r\n                    {for destination in mission.destinationsystems:\r\n                        {allmissions(destination.name)}\r\n                    }\r\n                |elif mission.destinationsystem && mission.destinationsystem != \"\":\r\n                    {allmissions(mission.destinationsystem)}\r\n                }\r\n            }\r\n        }\r\n\r\n        {if len(systems) = 0:\r\n            They have no designated target systems.\r\n        |elif len(systems) = 1:\r\n            They are all {Occasionally(2,\"located\")} in\r\n\r\n            {if systems && systems[0] != \"\":\r\n                the {join(split(systems[0], \".\"), \" \")}\r\n            |else:\r\n                an undesignated\r\n            }\r\n            {Occasionally(2,\"star\")} system.\r\n\r\n        |else:\r\n            {if multi > 0:\r\n\r\n                {if multi = missionsCount: All |else: {multi}}\r\n                of these \r\n                {if multi = 1: is a |else: are}\r\n                multi-destination mission{if multi != 1:s}.\r\n            }\r\n            There {if systems_count[0] = 1: is |else: are }\r\n\r\n            {set cur to 0}\r\n            {while cur < len(systems):\r\n                {systems_count[cur]} \r\n                {if cur = 0: destination{if systems_count[0] > 1: s}}\r\n                {if systems[cur] = \"\":\r\n                    in an undesignated system\r\n                |else:\r\n                    {OneOf(\"at\",\"in\")} {join(split(systems[cur], \".\"), \" \")}\r\n                }\r\n\r\n                {set cur to cur + 1}\r\n                {if cur = len(systems)-1: and |elif cur < len(systems):, }\r\n            }\r\n        }.\r\n    }\r\n|else:\r\n    You {Occasionally(2,\"currently\")} have no missions at {OneOf(\"the moment\",\"this time\")}.\r\n}",
      "default": false,
      "name": "Mission check galaxy",
      "description": "Check what systems you have missions in"
    },
    "Mission Check Near Most": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission Check Near Most}\r\n{_ Find nearest system with missions, and system with most missions}\r\n\r\n\r\n{if missionsCount > 0:\r\n\r\n    {_ Setup nearest calculation function}\r\n    {set nearcalc(name) to:\r\n\r\n        {set distance to round(Distance(curr, name), 1)}\r\n\r\n        {if distance < nearest_distance:\r\n            {set nearest_distance to distance}\r\n            {set nearest_name to name}\r\n        }\r\n        {set mission_systems to cat(mission_systems, [name])}\r\n    }\r\n\r\n    {set curr to state.eddi_context_system_system}\r\n    {set nearest_name to \"\"}\r\n    {set mission_systems to []}\r\n    {set systems_names to []}\r\n    {set systems_count to []}\r\n\r\n    {_ Max scan range. 500 is large, 100 above average, 20-50 normal, 5-10 small}\r\n    {_ Missions closer than this will be reported}\r\n    {set nearest_distance to 50}\r\n\r\n    {for mission in missions:\r\n        {if mission.status = \"Active\":\r\n            {if mission.destinationsystems:\r\n                {set multi to multi + 1}\r\n                {for destination in mission.destinationsystems:\r\n                    {nearcalc(destination.name)}\r\n                }\r\n            |elif mission.destinationsystem && mission.destinationsystem != \"\":\r\n                {nearcalc(mission.destinationsystem)}\r\n            }\r\n\r\n            {set here to find(systems_names, mission.destinationsystem)}\r\n            {if here > -1:\r\n                {set number to systems_count[here] + 1}\r\n                {set systems_count to union(systems_count, [here:number])}\r\n            |else:\r\n                {set systems_names to cat(systems_names, [mission.destinationsystem])}\r\n                {set systems_count to cat(systems_count, [1])}\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    {_ Calculate system with most missions in _}\r\n    {set system_most to \"\"}\r\n    {set system_count to 0}\r\n\r\n    {set cur to 0}\r\n    {while cur < len(systems_names):\r\n        {if systems_count[cur] > system_count:\r\n            {set system_most to systems_names[cur]}\r\n            {set system_count to systems_count[cur]}\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {set equal to 0}\r\n    {set cur to 0}\r\n    {while cur < len(systems_count):\r\n        {if systems_count[cur] = system_count:\r\n            {set equal to equal + 1}\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {_ Report nearest system}\r\n    {if nearest_name != \"\":\r\n        {if missionsCount = 1:\r\n            {if multi = 1:\r\n                You have one multi-destination mission. The nearest \r\n            |else:\r\n                Your only mission\r\n            }\r\n        |else:\r\n            Your nearest mission\r\n        }\r\n        {Occasionally(2, \"destination\")} is in the\r\n        {if nearest_name = curr:\r\n            current system\r\n        |else:\r\n            {nearest_name} system\r\n            {if reported != \"yes\":,\r\n                {if find(nearest_distance, \".00\") > -1: {set nearest_distance to round(nearest_distance, 0)}}\r\n                {nearest_distance} lightyears away\r\n            }\r\n        }.\r\n\r\n\r\n        {_ Report system/s with most missions}\r\n        {if equal = 1:\r\n            {if system_most = nearest_name:\r\n                {if missionsCount > 1:\r\n                    It also has\r\n                    {OneOf(\"{OneOf('the most','most of your')} missions in\",\r\n                           \"the most missions for you to complete\")}.\r\n                }\r\n            |else:\r\n                {if system_most = curr:\r\n                    {set system_most to \"The current system\"}\r\n                |else:\r\n                    {set system_most to cat(\"The\", system_most, \"system\")}\r\n                }\r\n                {OneOf(\"Most of your missions are {Occasionally(2,'located')} in {system_most}\",\r\n                       \"{system_most} has {OneOf('the most','most of your')} missions in\",\r\n                       \"{system_most} has the most missions for you to complete\")}.\r\n            }\r\n        |else:\r\n            You have {system_count} mission{if system_count > 1:s} in each of\r\n            {set cur to 0}\r\n            {set length to equal - 1}\r\n            {while cur < equal:\r\n                the {systems_names[cur]}\r\n                {set cur to cur + 1}\r\n                {if cur = length:, and\r\n                |elif cur < length:,\r\n                }\r\n            } systems.\r\n        }\r\n    }\r\n\r\n    {if !system_most && !nearest_name && missionsCount > 0:\r\n        You have no active missions at the moment.\r\n    }\r\n|elif state.eddi_context_last_subject != \"jump\":\r\n    You {Occasionally(2,\"currently\")} have no missions at {OneOf(\"the moment\",\"this time\")}.\r\n}\r\n",
      "default": false,
      "name": "Mission Check Near Most",
      "description": "Find nearest system with missions, and system with most missions"
    },
    "Mission check station": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission check station }\r\n{_ Check what missions you have for the current station }\r\n\r\n\r\n{if missionsCount > 0:\r\n    {set current_station to state.eddi_context_body_name}\r\n    {set active_missions to 0}\r\n    {set complete_missions to 0}\r\n    {set depot_missions to 0}\r\n\r\n    {if current_station && current_station != \"\":\r\n        {for mission in missions:\r\n            {if mission.destinationstation = current_station ||\r\n                (mission.originstation = current_station && find(mission.type, \"Delivery\") > -1):\r\n                {if mission.status = \"Active\":\r\n                    {if find(mission.type, \"Collect\") > -1 || find(mission.type, \"Delivery\") > -1:\r\n                        {set depot_missions to depot_missions + 1}\r\n                    |else:\r\n                        {set active_missions to active_missions + 1}\r\n                    }\r\n                |elif mission.status = \"Complete\":\r\n                    {set complete_missions to complete_missions + 1}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {set total to active_missions + complete_missions + depot_missions}\r\n    {if total > 0:\r\n        You have\r\n        {if depot_missions > 0:\r\n            {depot_missions} depot mission{if depot_missions > 1:s}\r\n            {if active_missions > 0 && complete_missions > 0: ,\r\n            |elif active_missions > 0 || complete_missions > 0: and}\r\n        }\r\n        {if active_missions > 0:\r\n            {active_missions} active mission{if active_missions > 1:s}\r\n            {if complete_missions > 0: and}\r\n        }\r\n        {if complete_missions > 0:\r\n            {complete_missions} completed mission{if complete_missions > 1:s}\r\n        }\r\n        {Occasionally(3,\"located\")} at this station.\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Mission check station",
      "description": "Check what missions you have for the current station"
    },
    "Mission check system": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission check system }\r\n{_ Check what missions you have for the current system }\r\n\r\n\r\n{_ Setup addstation function }\r\n{set addstation(station) to:\r\n    {set missions_here to missions_here + 1}\r\n    {set station_based to station_based + 1}\r\n    {set here to find(stations_here, station)}\r\n\r\n    {if here > -1:\r\n        {if mission.status = \"Active\":\r\n            {if mission.type = \"Collect\" ||  mission.type= \"Delivery\":\r\n                {set depot to stations_depot[here] + 1}\r\n                {set stations_depot to union(stations_depot, [here:depot])}\r\n            |else:\r\n                {set active to stations_active[here] + 1}\r\n                {set stations_active to union(stations_active, [here:active])}\r\n            }\r\n        |else:\r\n            {set complete to stations_complete[here] + 1}\r\n            {set stations_complete to union(stations_complete, [here:complete])}\r\n        }\r\n    |else:\r\n        {set stations_here to cat(stations_here, [station])}\r\n        {if mission.status = \"Active\":\r\n            {if mission.type = \"Collect\" ||  mission.type= \"Delivery\":\r\n                {set stations_active to cat(stations_active, [0])}\r\n                {set stations_depot to cat(stations_depot, [1])}\r\n            |else:\r\n                {set stations_active to cat(stations_active, [1])}\r\n                {set stations_depot to cat(stations_depot, [0])}\r\n            }\r\n            {set stations_complete to cat(stations_complete, [0])}\r\n        |else:\r\n            {set stations_active to cat(stations_active, [0])}\r\n            {set stations_complete to cat(stations_complete, [1])}\r\n            {set stations_depot to cat(stations_depot, [0])}\r\n        }\r\n    }\r\n}\r\n\r\n\r\n{if missionsCount > 0:\r\n    {set current_system to system.name}\r\n    {set missions_here to 0}\r\n    {set station_based to 0}\r\n    {set stations_active to []}\r\n    {set stations_complete to []}\r\n    {set stations_depot to []}\r\n    {set stations_here to []}\r\n    {set non_stations to []}\r\n\r\n    {_ Find all missions in the current system and identify all the stations }\r\n    {for mission in missions:\r\n        {if mission.status != \"Failed\":\r\n            {if mission.destinationsystems:\r\n                {for destination in mission.destinationsystems:\r\n                    {if destination.name = current_system && !destination.visited:\r\n                        {set missions_here to missions_here + 1}\r\n                    }\r\n                }\r\n            |elif mission.destinationsystem = current_system:\r\n                {if mission.destinationstation && mission.destinationstation != \"\":\r\n                    {addstation(mission.destinationstation)}\r\n                |else:\r\n                    {if mission.status = \"Active\":\r\n                        {set missions_here to missions_here + 1}\r\n                        {if find(non_stations, mission.type) = -1:\r\n                            {set non_stations to cat(non_stations, [mission.type])}\r\n                        }\r\n                    }\r\n                }\r\n            |elif mission.originsystem = current_system && find(mission.type, \"Delivery\") > -1:\r\n                {if mission.originstation && mission.originstation != \"\":\r\n                    {addstation(mission.originstation)}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    {if missions_here > 0:\r\n        You have {missions_here} mission{if missions_here > 1:s} {OneOf('here','in this system')}.\r\n\r\n        {if station_based > 0:\r\n\r\n            {set cur to 0}\r\n\r\n            {if missions_here = 1:\r\n                It is\r\n                {if stations_depot[0] = 1: a depot\r\n                |elif stations_active[0] = 1: an active\r\n                |elif stations_complete[0] = 1: a completed\r\n                }\r\n                mission located at\r\n                {set model to StationDetails(stations_here[0]).model}\r\n                {set type to token(model, \" \", 1)}\r\n                {if find(model, \"Unknown\") = -1:\r\n                    {if type != \"\": {type} |else: {model} },\r\n                }\r\n                {stations_here[0]}.\r\n\r\n            |else:\r\n                There\r\n                {if stations_depot[0] > 1: are\r\n                |elif stations_depot[0] = 1: is\r\n                |elif stations_active[0] > 1: are\r\n                |elif stations_active[0] = 1: is\r\n                |elif stations_complete[0] > 1: are\r\n                |elif stations_complete[0] = 1: is\r\n                }\r\n\r\n                {while cur < len(stations_here):\r\n\r\n                    {if stations_depot[cur] > 0:\r\n                        {stations_depot[cur]} depot\r\n                        {if stations_active[cur] && stations_active[cur] > 0 && stations_complete[cur] && stations_complete[cur] > 0: ,\r\n                        |elif (stations_active[cur] && stations_active[cur] > 0) || (stations_complete[cur] && stations_complete[cur] > 0): and}\r\n                        {set last to stations_depot[cur]}\r\n                    }\r\n\r\n                    {if stations_active[cur] && stations_active[cur] > 0:\r\n                        {stations_active[cur]} active\r\n                        {if stations_complete[cur] && stations_complete[cur] > 0: and}\r\n                        {set last to stations_active[cur]}\r\n                    }\r\n\r\n                    {if stations_complete[cur] && stations_complete[cur] > 0:\r\n                        {stations_complete[cur]} completed\r\n                        {set last to stations_completed[cur]}\r\n                    }\r\n\r\n                    mission{if last > 1:s} at\r\n                    {set model to StationDetails(stations_here[cur]).model}\r\n                    {set type to token(model, \" \", 1)}\r\n                    {if find(model, \"Unknown\") = -1 && find(model, stations_here[cur]) = -1:\r\n                        {if type != \"\": {type} |else: {model} },\r\n                    }\r\n                    {stations_here[cur]}\r\n\r\n                    {set cur to cur + 1}\r\n                    {if cur = len(stations_here)-1:, and |elif cur < len(stations_here): ,}\r\n                }.\r\n            }\r\n        }\r\n\r\n        {if missions_here > station_based:\r\n\r\n            {if missions_here = 1:\r\n                It is\r\n                {if stations_depot[0] = 1: a depot\r\n                |elif stations_active[0] = 1: an active\r\n                |elif stations_complete[0] = 1: a completed\r\n                }\r\n                mission that must be {OneOf(\"searched for\",\"located\",\"found\")}.\r\n\r\n            |else:\r\n                {Pause(500)}\r\n                {set remaining to missions_here - station_based}\r\n                The {if station_based > 0: remaining {remaining}}\r\n\r\n                {set cur to 0}\r\n                {while cur < len(non_stations):\r\n                    {non_stations[cur]}\r\n                    {set cur to cur + 1}\r\n                    {if cur = len(non_stations)-1: and |elif cur < len(non_stations): ,}\r\n                }\r\n                mission{if remaining > 1: s} must be {OneOf(\"searched for\",\"determined\",\"found\")}.\r\n            }\r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Mission check system",
      "description": "Check what missions you have for the current system"
    },
    "Mission completed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission completed }\r\n{_ Triggered when you complete a mission }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n{set status to mission.status}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" mission\")}\r\n{set ranktype to token(mission.name,\"_\",2)}\r\n\r\n{if mission.type = \"Donation\":\r\n    {if mission.typeEDName = \"Altruism\": {set donate to cat(event.amount, \" tonnes of \",event.commodity)}\r\n    |else: {set donate to cat(Humanise(event.donation),\" credits\")}\r\n    }\r\n    {OneOf(\"Donated {Occasionally(2, '{donate}')} to {Occasionally(2, 'a grateful')} {P(event.faction)}\",\r\n           \"{P(lcase(event.faction))} has {Occasionally(2, 'gratefully')} received your donation {Occasionally(2, 'of {donate}')}\",\r\n           \"{P(lcase(event.faction))} thanks you for your donation {Occasionally(2, 'of {donate}')}\")}\r\n    {F(\"Mission faction state\")}.\r\n    Your {OneOf(\"reputation\",\"standing\")} has {Occasionally(\"been\")} {OneOf(\"improved\",\"increased\")}\r\n|elif ranktype = \"RANKEMP\" || ranktype = \"RankEmp\" || ranktype = \"RANKFED\" || ranktype = \"RankFed\":\r\n    You have {OneOf(\"completed the {type} successfully\",\"successfully completed the {type}\")}\r\n|elif mission.communal:\r\n    You have completed the community goal: {mission.name}. You have {OneOf('recieved','been awarded')}\r\n    {Humanise(mission.reward)} credits for {OneOf(\"your contribution\",\"your participation\",\"participating\")}\r\n|else:\r\n    {if event.reward > 0:\r\n        {OneOf(\r\n         \"{type} completed. You have {OneOf('received','been awarded')} {Humanise(event.reward)} credits\",\r\n         \"You have {OneOf('received','been awarded')} {Humanise(event.reward)} credits for {OneOf('successful {type} completion','completing the {type} successfully','successfully completing the {type}')}\"\r\n      )}\r\n   |else:\r\n      {OneOf(\"{type} completed\",\"You have completed the {type} successfully\",\"You have successfully completed the {type}\")}\r\n   }\r\n}\r\n\r\n{if mission.type != \"Donation\": {F(\"Mission faction state\")}}.\r\n\r\n{if cargo = \"yes\" || cargo = \"return\":\r\n    {Pause(100)}\r\n    {SetState('eddi_context_mission_cargo', \"yes\")}\r\n    {if part1 = \"Smuggle\":\r\n        {event.amount} tonne{if event.amount != 1:s} of {event.commodity}\r\n        successfully {OneOf(\"delivered\", \"transported\")}.\r\n    }\r\n}\r\n\r\n{if event.commodityrewards:\r\n\r\n    {Pause(100)}\r\n    {if event.commodityrewards[0].amount = 0:\r\n       {if event.reward > 0:\r\n          {OneOf(\"However, \",\"But, \")}\r\n       }\r\n       you cannot accept the cargo reward, {Occasionally(2,\"as\")}\r\n       {if ship.cargocapacity = 0:\r\n          you have no cargo bays.\r\n       |else:\r\n          your cargo bay is full{Occasionally(2,\"y loaded\")}.\r\n       }\r\n    |else:         \r\n       {if event.reward > 0:\r\n          {OneOf(\"Additionally, \",\"Also, \")}\r\n       }\r\n\r\n       {set missionreward to \"yes\"}\r\n       {for commodityreward in event.commodityrewards:\r\n          {commodityreward.amount} tonne{if commodityreward.amount > 1:s} of {commodityreward.commodity}\r\n          {set cur to cur + 1}\r\n          {if cur = len(event.commodityrewards) - 1:, }\r\n       }\r\n       {OneOf(\"now on-board\",\"confirmed on-board\",\"have been received\",\"have been awarded\")}.\r\n    }\r\n}\r\n\r\n{set type to \"Completed\"}\r\n{F(\"Mission Route Update\")}\r\n",
      "default": false,
      "name": "Mission completed",
      "description": "Triggered when you complete a mission"
    },
    "Mission expired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission expired }\r\n{_ Triggered when a mission has expired }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'expired')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" mission\")}\r\n\r\n{type} {if mission.faction: for {mission.faction}} has expired.\r\n{if mission.commodity:\r\n    {for cargo in inventory:\r\n        {if cargo.name = mission.commodity && cargo.haulage > 0:\r\n            All mission related cargo will be flagged as stolen.\r\n        }\r\n    }\r\n}\r\n\r\n{set type to \"Expired\"}\r\n{F(\"Mission Route Update\")}\r\n",
      "default": false,
      "name": "Mission expired",
      "description": "Triggered when a mission has expired"
    },
    "Mission faction state": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{if mission.factionstate = \"Boom\":\r\n    {OneOf(\"during\",\"in\")} this {OneOf(\"prosperous time\",\"economic boom\")}\r\n|elif mission.factionstate = \"Bust\":\r\n    {OneOf(\"during\",\"in\")} this {OneOf(\"economic decline\",\"recession\",\"economic downturn\")}\r\n|elif mission.factionstate = \"CivilUnrest\":\r\n    {OneOf(\"during\",\"in\")} this {Occasionally(2,\"time of\")} {OneOf(\"civil unrest\",\"civil conflict\")}\r\n|elif mission.factionstate = \"CivilWar\":\r\n    {OneOf(\"during\",\"in\")} this {Occasionally(2,\"time of\")} {OneOf(\"civil war\",\"civil conflict\")}\r\n|elif mission.factionstate = \"Democracy\":\r\n    {OneOf(\"in the name of\",\"for\")} democracy\r\n|elif mission.factionstate = \"Election\":\r\n    during this election\r\n|elif mission.factionstate = \"Famine\":\r\n    {OneOf('in','during')} this {Occasionally(2,'time of')} famine\r\n|elif mission.factionstate = \"Industrial\":\r\n\r\n|elif mission.factionstate = \"Lockdown\":\r\n\r\n|elif mission.factionstate = \"Outbreak\"\r\n    , to aid in the {OneOf(\"medical emergency\",\"outbreak relief\")}\r\n}\r\n",
      "default": false,
      "name": "Mission faction state",
      "description": "Report the faction state"
    },
    "Mission failed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'fail')}\r\n\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" mission\")}\r\n\r\n{OneOf(\"{type} {if mission.faction: for {mission.faction}} failed\", \r\n    \"You have failed the {type} {if mission.faction: for {mission.faction}}\")}.\r\n\r\n{set type to \"Failed\"}\r\n{F(\"Mission Route Update\")}\r\n",
      "default": false,
      "name": "Mission failed",
      "description": "Triggered when you fail a mission"
    },
    "Mission redirected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission redirected }\r\n{_ Triggered when a mission is redirected }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'redirected')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" mission\")}\r\n\r\n{if mission.status = \"Complete\" && mission.destinationsystem = mission.originsystem:\r\n    {type} requirements completed. Redirected to mission origin.\r\n|elif mission.destinations:\r\n    Chained {type} redirected to the {event.newdestinationsystem} system.\r\n|else:\r\n    {type} Redirected\r\n    {if event.newdestinationstation:\r\n       to {event.newdestinationstation} in the {event.newdestinationsystem} system.\r\n    |else:\r\n       the {event.newdestinationsystem} system.\r\n    }\r\n}\r\n\r\n{set type to \"Redirected\"}\r\n{F(\"Mission Route Update\")}\r\n",
      "default": false,
      "name": "Mission redirected",
      "description": "Triggered when a mission is redirected"
    },
    "Mission report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission report }\r\n{_ Report the current mission log }\r\n\r\n\r\n{F(\"Mission check galaxy\")}\r\n\r\n\r\n",
      "default": true,
      "name": "Mission report",
      "description": "Report the current mission log"
    },
    "Mission Route Clear": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{SetState('missionsdata', \"\")}\r\n{SetState('missionsrouteuseeddi', \"\")}\r\n{SetState('missionsroutetype', \"\")}\r\n{SetState('missionsdestination', \"\")}\r\n{SetState('missionsroutedistance', \"\")}\r\n{SetState('missionsroute', \"\")}",
      "default": true,
      "name": "Mission Route Clear",
      "description": "Clear a set mission route."
    },
    "Mission Route Fast": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Missions_RoutePlot }\r\n{_ Plot a 'nearest neighbor' route for defined systems in the mission store }\r\n\r\n\r\n{_ Setup 'destination array builder' function }\r\n{set systems_builder(system) to:\r\n    {if find(systems, system) = -1:\r\n        {set systems to cat(systems, [system])}\r\n    }\r\n}\r\n\r\n\r\n{if missionsCount > 0:\r\n\r\n    {set original_dest to state.missionsdestination}\r\n    {set origins to []}\r\n    {set returns to []}\r\n    {set failed to []}\r\n\r\n    {for mission in missions:\r\n        {set origins to cat(origins, [mission.originsystem])}\r\n        {if mission.originreturn = true:\r\n            {set returns to cat(return, [\"yes\"])}\r\n        |else:\r\n            {set returns to cat(return, [\"no\"])}\r\n        }\r\n        {set failed to cat(failed, [mission.status])}\r\n    }\r\n\r\n    {set systems to []}\r\n    {set system_count to 0}\r\n\r\n    {if state.missionsroute = \"\" || state.missionsroute = null:\r\n        {set route_end to state.eddi_context_system_name}\r\n    |else:\r\n        {set temp_route to split(state.missionsroute, \"_\")}\r\n        {set route_end to temp_route[len(temp_route) - 1]}\r\n    }\r\n\r\n    {_ Add all mission systems that have a 'return to origin' to the destination list, unless it has failed }\r\n    {set pos to find(returns, \"yes\")}\r\n    {while pos > -1:\r\n        {if failed[pos] != \"failed\":\r\n            {systems_builder(origins[pos])}\r\n        }\r\n        {set pos to find(returns, \"yes\", pos + 1)}\r\n    }\r\n\r\n    {_ Add all destination systems to the destination list, unless they have failed }\r\n    {set cur to 0}\r\n    {while cur < missionsCount:\r\n        {set destination to missions[cur].destinationsystem}\r\n\r\n        {if destination != \"\" && failed[cur] != \"failed\":\r\n            {if find(destination, \"_\") > -1:\r\n                {set dest_array to split(destination, \"::\")}\r\n                {for destination in dest_array: {systems_builder(destination)}}\r\n            |else:\r\n                {systems_builder(destination)}\r\n            }\r\n        }\r\n        {set cur to cur + 1}\r\n    }\r\n\r\n    {_ Now create the route _}\r\n    {set route to []}\r\n\r\n    {_ Remove end dest from array _}\r\n    {set systems to split(join(except(systems, [find(systems, route_end):\"\"]), \"_\"), \"_\")}\r\n    {_ Remove the current system, if it's found _}\r\n    {set systems to split(join(except(systems, [find(systems, state.eddi_context_system_name):\"\"]), \"_\"), \"_\")}\r\n\r\n    {set system_count to len(systems)}\r\n\r\n    {set curr to SystemDetails(state.eddi_context_system_name)}\r\n    {set end to SystemDetails(route_end)}\r\n    {set total_distance to 0}\r\n    {set cur to 0}\r\n\r\n    {if systems[0] && systems[0] != \"\":\r\n        {while cur < system_count:\r\n            {set near to 10000}\r\n            {for sys in systems:\r\n                {set dest to SystemDetails(sys)}\r\n                {set dist to round(Distance(curr.x, curr.y, curr.z, dest.x, dest.y, dest.z), 2)}\r\n\r\n                {if dist < near:\r\n                    {set nearest to dest.name}\r\n                    {set near to dist}\r\n                }\r\n            }\r\n            {set total_distance to total_distance + near}\r\n            {set route to cat(route, [nearest])}\r\n            {set systems to split(join(except(systems, [find(systems, nearest):\"\"]), \"_\"), \"_\")}\r\n            {set curr to SystemDetails(nearest)}\r\n            {set cur to cur + 1}\r\n        }\r\n    }\r\n\r\n    {_ Calculate total route length _}\r\n    {set dest to SystemDetails(route_end)}\r\n    {set dist to round(Distance(curr.x, curr.y, curr.z, dest.x, dest.y, dest.z), 2)}\r\n    {set total_distance to total_distance + dist}\r\n\r\n    {_ Join it all together _}\r\n    {set route to cat(route, [route_end])}\r\n\r\n    {SetState('missionsroutetype', \"route\")}\r\n    {SetState('missionsdestination', route[0])}\r\n    {SetState('missionsroutedistance', total_distance)}\r\n    {SetState('missionsroute', join(route, \"_\"))}\r\n    {set system_count to len(route)}\r\n\r\n    {if total_distance = 0:\r\n        Route calculated for one system.\r\n        {OneOf(\"You are {OneOf('already', 'currently')} in your destination system\",\r\n               \"Your mission{if missionsCount > 1:s are all |else: is} located in\r\n                {OneOf('this', 'the current')} system\")}.\r\n    |else:\r\n        Missions route\r\n        {if original_dest != null && original_dest != \"\": re}calculated\r\n        for {system_count} system{if system_count != 1:s}.\r\n        {Pause(400)}\r\n        {if total_distance > 0:\r\n            Total distance is {round(total_distance, 1)} lightyears.\r\n            {Pause(400)}\r\n            {if original_dest != null && original_dest != \"\" && original_dest != route[0]:\r\n                First destination is {route[0]}.\r\n            }\r\n        |elif missionsCount > 0 && total_distance = 0:\r\n            {OneOf(\"You are {OneOf('already', 'currently')} in your destination system\",\r\n                   \"Your mission{if missionsCount > 1:s are all |else: is} located in\r\n                    {OneOf('this', 'the current')} system\")}.\r\n        |else:\r\n            Unable to calculate missions route.\r\n        }\r\n\r\n        {if original_dest != null && original_dest != \"\" && original_dest != route[0]:\r\n            Initial destination has been updated.\r\n        }\r\n        {if total_distance > 0:  Awaiting orders.}\r\n    }\r\n\r\n    {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n\r\n|else:\r\n    {if autoroute != \"yes\":\r\n        You have no missions to plot a route with.\r\n    }\r\n}\r\n    ",
      "default": false,
      "name": "Mission Route Fast",
      "description": "Plot a 'nearest neighbor' route for defined systems in the mission store"
    },
    "Mission Route Get Distance": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission Route Get Distance}\r\n{_ Find distance to destination}\r\n\r\n{set dist to -1}\r\n{if state.from_system && state.to_system:\r\n    {if state.from_system = \"\":\r\n        Origin system not designated.\r\n    |elif state.to_system = \"\":\r\n        Destination system not designated.\r\n    |else:\r\n        {set fs to SystemDetails(state.from_system)}\r\n        {set ts to SystemDetails(state.to_system)}\r\n\r\n        {if !fs.name:\r\n            Your origin is not in the Pilot's Federation star charts.\r\n        |elif !ts.name:\r\n            Your destination is not in the Pilot's Federation star charts.\r\n        |else:\r\n            {set dist to round(Distance(fs.x, fs.y, fs.z, ts.x, ts.y, ts.z), 2)}\r\n            {if state.getdistance = 'true':\r\n                Distance {Occasionally(2, \"from {fs.name}\")} to\r\n                {Occasionally(2, \"{OneOf('target','destination')} system\")}\r\n                {ts.name} is {dist} light years.\r\n                {SetState('getdistance', false)}\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{SetState('distance', dist)}\r\n",
      "default": false,
      "name": "Mission Route Get Distance",
      "description": "Find distance to destination"
    },
    "Mission Route Report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission Route Report _}\r\n{_ Report the current route information _}\r\n\r\n{if system.name != state.missionsdestination && len(state.missionsroute) > 0 && state.missionsroute != \"Not set\":\r\n\r\n    {set route to split(state.missionsroute, \"_\")}\r\n\r\n    Route Report: Destination system{if len(route) > 1:s}:\r\n\r\n    {set cur to 0}\r\n    {set length to len(route) - 1}\r\n    {while cur < len(route):\r\n        {route[cur]}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }.\r\n\r\n    {if len(route) > 1:\r\n        Total Distance: {round(state.missionsroutedistance, 2)} light years.\r\n        Initial Destination: {state.missionsdestination}.\r\n    |else:\r\n        Distance: {round(state.missionsroutedistance, 2)} light years.\r\n    }\r\n\r\n|elif system.name = state.missionsdestination:\r\n    Route Report: You are in your destination system, {state.missionsdestination}.\r\n\r\n|else:\r\n    {OneOf(\"You {OneOf('have no', 'don\\\\'t have any')} mission route at {OneOf('this time', 'the moment')} to report\",\r\n           \"{OneOf('There is', 'You have')} no route to report at {OneOf('this time', 'the moment')}\")}.\r\n}\r\n",
      "default": false,
      "name": "Mission Route Report",
      "description": "Report the current route information"
    },
    "Mission Route Update": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Mission Route Update _}\r\n{_ Updates the route if no more missions in the current system _}\r\n\r\n{set active_count to 0}\r\n{set complete_count to 0}\r\n\r\n{for mission in missions:\r\n    {if mission.destinationsystems:\r\n        {for destination in mission.destinationsystems:\r\n            {if destination.name = system.name:\r\n                {if mission.status = \"Active\":\r\n                    {set active_count to active_count + 1}\r\n                |elif mission.status = \"Complete\":\r\n                    {set complete_count to complete_count + 1}\r\n                }\r\n            }\r\n        }\r\n    |elif mission.destinationsystem = system.name:\r\n        {if mission.status = \"Active\":\r\n            {set active_count to active_count + 1}\r\n        |elif mission.status = \"Complete\":\r\n            {set complete_count to complete_count + 1}\r\n        }\r\n    }\r\n}\r\n\r\n{if type = \"Completed\" || type = \"Abandoned\" || type = \"Failed\":\r\n    {if status = \"Active\":\r\n        {set active_count to active_count - 1}\r\n    |elif status = \"Complete\":\r\n        {set complete_count to complete_count - 1}\r\n    }\r\n}\r\n\r\n{set total_count to active_count + complete_count}\r\n{set route to split(state.missionsroute, \"_\")}\r\n\r\n{_ Set mission types that don't have a destination _}\r\n{_ Possible mission types are _}\r\n{_ Altruism, Assassinate, Collect, Courier, Delivery, Disable, Massacre, _}\r\n{_ Mining, Passenger, Permit, Piracy, Rescue, Salvage, Scan, Smuggle _}\r\n{set type_list to \"Altruism Collect Mining Permit Piracy\"}\r\n\r\n{if total_count > 0 && type != \"Accepted\":\r\n    {if active_count > 0:\r\n        You still have {active_count} active\r\n    }\r\n    {if complete_count > 0:\r\n        {if active_count > 0:, and |else: You still have}\r\n        {complete_count} completed\r\n    }\r\n    mission{if total_count > 1:s} in this system.\r\n\r\n|else:\r\n\r\n    {if state.missionsrouteuseeddi = \"yes\":\r\n\r\n        {if route[0] = system.name && len(route) > 0 && type != \"Accepted\":\r\n            {set route to RouteDetails(\"update\")}\r\n        |else:\r\n            {set route to RouteDetails(\"route\")}\r\n        }\r\n\r\n    |elif state.missionsrouteuseeddi = \"no\":\r\n\r\n        {if route[0] = system.name && len(route) > 0 && type != \"Accepted\":\r\n\r\n            {SetState('missionsroute', join(except(route, [0:\"\"]), \"_\"))}\r\n            {set route to split(state.missionsroute, \"_\")}\r\n            {SetState('missionsdestination', route[0])}\r\n            {SetState('missionsroutetype', \"update\")}\r\n\r\n            {if route[0] != \"\" && route[0] != null:\r\n                {set dist to round(Distance(system.name, route[0]), 2)}\r\n                {SetState('missionsroutedistance', state.missionsroutedistance - dist)}\r\n\r\n                {if route[1] != \"\" && route[1] != null: Next mission |else: Final route }\r\n                destination is {route[0]}, {round(dist, 1)} lightyears away.\r\n\r\n            |elif route[0] = \"\" || route[0] = null:\r\n                {SetState('missionsroutedistance', null)}\r\n                You have {OneOf(\"completed\", \"reached the end of\")} your route.\r\n            |else:\r\n                Unable to update to next mission destination.\r\n            }\r\n\r\n        |elif missionsCount > 0:\r\n            {F(\"Mission Route Fast\")}\r\n        }\r\n    }\r\n}\r\n\r\n{set dest to state.missionsdestination}\r\n\r\n{if dest != system.name && dest != \"\" && dest != null:\r\n    {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n    {if state.eddi_context_mission_route_useauto = \"no\":\r\n        Please re-plot Galactic Map route.\r\n    |elif state.eddi_context_supercruise = \"no\" && state.eddi_context_docked = \"no\":\r\n        Enter super-cruise to {OneOf(\"activate\", \"engage\")} auto-route plotting system.\r\n    |elif state.eddi_context_docked = \"yes\" && state.eddi_context_mission_accepted = \"no\":\r\n        Launch to {OneOf(\"activate\", \"engage\")} auto route plotting system.\r\n        {SetState('eddi_context_mission_accepted', \"yes\")}\r\n    }\r\n}\r\n\r\n{_ Build string to save in Voice Attack _}\r\n{set missionsdata to cat(state.missionsrouteuseeddi, \"+=\", state.missionsroutetype, \"+=\", state.missionsdestination, \"+=\", state.missionsroutedistance, \"+=\", state.missionsroute)}\r\n{SetState('missionsdata', missionsdata)}\r\n",
      "default": false,
      "name": "Mission Route Update",
      "description": "Updates the route if no more missions in the current system"
    },
    "Mission warning": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Mission warning }\r\n{_ Triggered when a mission is about to expire, based on a set threshold }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'mission')}\r\n{SetState('eddi_context_last_action', 'warning')}\r\n\r\n{set mission to MissionDetails(event.missionid)}\r\n\r\n{if find(mission.typeEDName, \"Passenger\") > -1:\r\n    {set type to \"Transport \"}\r\n    {set type to cat(type, mission.passengertype)}\r\n|else:\r\n    {set type to mission.type}\r\n}\r\n{set type to cat(type, \" mission\")}\r\n\r\nWarning: {type} {if mission.faction: for {mission.faction}}\r\n{if find(mission.destinationsystems, \"_\") > -1:\r\n    for multiple destinations,\r\n|elif mission.destinationsystem:\r\n\r\n    {if mission.destinationsystem = state.eddi_context_system_name:\r\n        this\r\n    |else:\r\n        the {mission.destinationsystem}\r\n    }\r\n    system\r\n}\r\n\r\nwill expire in {event.remaining} minutes.\r\n\r\n",
      "default": false,
      "name": "Mission warning",
      "description": "Triggered when a mission is about to expire, based on a set threshold"
    },
    "Missions": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Missions }\r\n{_ Triggered at session start from Missions event }",
      "default": true,
      "name": "Missions",
      "description": "Triggered at session start from Missions event"
    },
    "Missions route": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Missions route }\r\n{_ Get the missions route for various mission details }\r\n\r\n\r\n{set curr to SystemDetails(system.name)}\r\n\r\n{if event.routetype = \"expiring\":\r\n    {if event.distance > 0:\r\n        {set mission to MissionDetails(event.missionids[0])}\r\n\r\n        {if find(mission.typeEDName, \"Passenger\") > -1:\r\n            {set type to \"Transport \"}\r\n            {set type to cat(type, mission.passengertype)}\r\n        |else:\r\n            {set type to mission.type}\r\n        }\r\n        {set type to cat(type, \" mission\")}\r\n\r\n        {type} {if mission.faction: for {mission.faction}}\r\n        {if mission.destinationsystem: in the\r\n            {if mission.destinationsystem = curr.name:\r\n                current\r\n            |else:\r\n                {mission.destinationsystem}\r\n            } system\r\n        } is expiring next.\r\n    |else:\r\n        No active missions found.\r\n    }\r\n|elif event.routetype = \"farthest\":\r\n    {if event.distance > 0:\r\n        Your {if missionsCount = 1: only |else: farthest}\r\n        mission target is in the\r\n        {if event.system = curr.name:\r\n            current system\r\n        |else:\r\n            {event.system} system, {round(event.distance, 1)} lightyears away\r\n        }.\r\n    |else:\r\n        Mission not found with a designated target system.\r\n    }\r\n|elif event.routetype = \"most\":\r\n    {if missionsCount = 1:\r\n        Your only mission target is {Occasionally(2,\"located\")} in\r\n        {if missions[0].destinationsystem = \"\":\r\n            an unknown\r\n        |elif missions[0].destinationsystem = curr.name:\r\n            the current\r\n        |else:\r\n            the {missions[0].destinationsystem}\r\n        }\r\n        {Occasionally(2,\"star\")} system.\r\n    |else:\r\n        {set systems to split(event.systems, \"_\")}\r\n        {set system_most to event.system}\r\n        {set systems_count to len(systems)}\r\n\r\n        {if systems_count = 1:\r\n            {if system_most = curr.name:\r\n                {set system_most to \"The current system\"}\r\n            |else:\r\n                {set system_most to cat(\"The \", system_most, \" system\")}\r\n            }\r\n            {OneOf(\"Most of your missions are {Occasionally(2,'located')} in {system_most}\",\r\n                \"{system_most} has {OneOf('the most','most of your')} missions\",\r\n                \"{system_most} has the most missions for you to complete\")}.\r\n        |elif systems_count > 1:\r\n            You have {event.count} mission target{if event.count > 1:s} each, in the\r\n\r\n            {set cur to 0}\r\n            {while cur < len(equal):\r\n                {systems[cur]}\r\n                {set cur to cur + 1}\r\n                {if cur = systems_count-1: and |elif cur < systems_count: ,}\r\n            } systems.\r\n        }\r\n    }\r\n|elif event.routetype = \"nearest\":\r\n    {if event.distance > 0:\r\n        Your {if missionsCount = 1: only |else: nearest}\r\n        mission target is in the\r\n        {if event.system = curr.name:\r\n            current system\r\n        |else:\r\n            {event.system} system, {round(event.distance, 1)} lightyears away\r\n        }.\r\n    |else:\r\n        Mission not found with a designated target system.\r\n    }\r\n|elif event.routetype = \"route\":\r\n\r\n    Missions route {if missionsCount > 1: re}calculated for {event.count} systems.\r\n\r\n    {if event.routedistance > 0:\r\n        Total distance is {round(event.routedistance, 1)} lightyears.\r\n        {Pause(400)}\r\n        {if event.system != original_dest: First destination is {event.system}.}\r\n    |elif missionsCount > 0 && event.routedistance = 0:\r\n        {OneOf(\"Your mission{if missionsCount > 1:s are |else: is} located in this system\",\r\n               \"You are {OneOf('already', 'currently')} in your destination system\")}.\r\n    |else:\r\n        Unable to calculate missions route.\r\n    }\r\n\r\n    {if original_dest != null && original_dest != \"\" && original_dest != route[0]:\r\n        Initial destination has been updated.\r\n        {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n    }\r\n    {if total_distance > 0:  Awaiting orders.}\r\n\r\n|elif event.routetype = \"source\":\r\n    {if event.count > 0:\r\n        {set systems to split(event.route, \"_\")}\r\n\r\n        {set pos to 0}\r\n        {while pos < event.count:\r\n\r\n            {set source_cargo to []}\r\n            {for missionid in event.missionids:\r\n                {set haulage to HaulageDetails(missionid)}\r\n                {if haulage.sourcesystem = systems[pos]:\r\n                    {set cargo to CargoDetails(missionid)}\r\n                    {if find(source_cargo, cargo.name) = -1:\r\n                        {set source_cargo to cat(source_cargo, [cargo.name])}\r\n                    }\r\n                }\r\n            }\r\n\r\n            {if pos = 0:\r\n                Your {if event.count = 1: only |else: nearest}\r\n            |elif pos = 1:\r\n                Additionally, your\r\n            |elif pos = event.count - 1:\r\n                Lastly, your\r\n            |else:\r\n                Your\r\n            }\r\n\r\n            mission cargo source for\r\n            {set cur to 0}\r\n            {while cur < len(source_cargo):\r\n                {source_cargo[cur]}\r\n                {set cur to cur + 1}\r\n                {if cur = len(source_cargo) - 1: and |elif cur < len(source_cargo): ,}\r\n            }\r\n\r\n            is in the\r\n            {if systems[pos] = system.name:\r\n                current system\r\n            |else:\r\n                {systems[pos]} system,\r\n                {set distance to Distance(system.name, systems[pos])}\r\n                {round(distance, 1)} light years away\r\n            }.\r\n            {set pos to pos + 1}\r\n        }\r\n        {SetState('eddi_context_cargo_source', event.route)}\r\n    |else:\r\n        Cargo source not found with a designated target system.\r\n    }\r\n\r\n|elif event.routetype = \"update\":\r\n    {set route to split(event.route, \"_\")}\r\n    {if event.system:\r\n        {if route[1] != \"\" && route[1] != null: Next mission |else: Final route }\r\n        destination is {event.system}, {round(event.distance, 1)} lightyears away.\r\n    |elif route[0] = \"\" || route[0] = null:\r\n        {SetState('missionsroutedistance', null)}\r\n        You have {OneOf(\"completed\", \"reached the end of\")} your route.\r\n    |else:\r\n        Unable to update to next mission destination.\r\n    }\r\n    {if event.system != system.name:\r\n        {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n    }\r\n}\r\n\r\n{SetState('missionsroutetype', event.routetype)}\r\n{SetState('missionsid', event.missionids[0])}\r\n{SetState('missionsdestination', event.system)}\r\n{SetState('missionsdestinations', event.systems)}\r\n{SetState('missionsdistance', event.distance)}\r\n{SetState('missionsroutedistance', event.routedistance)}\r\n{SetState('missionsroute', event.route)}\r\n{SetState('missionscount', event.count)}\r\n",
      "default": false,
      "name": "Missions route",
      "description": "Get the missions route for various mission details"
    },
    "Missions variable report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": " Use Eddi -   {state.missionsrouteuseeddi}.\r\n Route type -   {state.missionsroutetype}.\r\n Destination -   {state.missionsdestination}.\r\n Current -   {system.name}.\r\n Locked -    {state.eddi_context_mission_destination_locked}.\r\n Route -    {state.missionsroute}.\r\n Distance: - {state.missionsroutedistance}",
      "default": true,
      "name": "Missions variable report",
      "description": "Check EDDI state variables for routing testing purposes."
    },
    "Modification crafted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Modification crafted",
      "description": "Triggered when you craft a modification to a module"
    },
    "Module arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"{F('Honorific')}, \")}\r\nYour {event.module.name} has\r\n\r\n{OneOf(\"arrived {if station.name != event.station && event.station: at}\", \r\n       \"completed its transfer {if station.name != event.station && event.station: to}\")}\r\n\r\n{if station.name != event.station && event.station:\r\n   {event.station}\r\n   {if system.name != event.system && event.system:\r\n      in the {event.system} system\r\n   }\r\n}.",
      "default": false,
      "name": "Module arrived",
      "description": "Triggered when you complete a module transfer"
    },
    "Module info": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ This event updates `ship` module information: position, power, & priority _}",
      "default": true,
      "name": "Module info",
      "description": "Triggered when a ModulesInfo.json file is generated/updated"
    },
    "Module purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have purchased a {event.buymodule.class}-{event.buymodule.grade}\r\n\r\n{if type(event.buymodule.mount) != \"void\":\r\n    {for index, value in event.buymodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n{event.buymodule.name} for {event.buyprice} credits\r\n\r\n{if type(event.sellmodule) != \"void\":\r\n    , and sold a {event.sellmodule.class}-{event.sellmodule.grade}\r\n\r\n    {if type(event.sellmodule.mount) != \"void\":\r\n        {for index, value in event.sellmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n       |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {event.sellmodule.name} for {event.sellprice} credits\r\n\r\n|elif type(event.storedmodule) != \"void\":\r\n    , and stored a {event.storedmodule.class}-{event.storedmodule.grade}\r\n\r\n    {if type(event.storedmodule.mount) != \"void\":\r\n        {for index, value in event.storedmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n       |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {event.storedmodule.name}\r\n}\r\n\r\n\r\n",
      "default": false,
      "name": "Module purchased",
      "description": "Triggered when you purchase a module in outfitting"
    },
    "Module retrieved": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have retrieved a {event.module.class}-{event.module.grade}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.module.name} from storage\r\n\r\n{if type(event.swapoutmodule) != \"void\":\r\n    and stored a {event.swapoutmodule.class}-{event.swapoutmodule.grade}\r\n\r\n    {if type(event.swapoutmodule.mount) != \"void\":\r\n        {for index, value in event.swapoutmodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n       |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {event.swapoutmodule.name}\r\n}\r\n\r\n{if type(event.cost) != \"void\": for a cost of {event.cost} credits}\r\n",
      "default": false,
      "name": "Module retrieved",
      "description": "Triggered when you fetch a previously stored module"
    },
    "Module sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você vendeu um {event.module.class}-{event.module.grade}\r\n\r\n{event.module.name}\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixo\r\n    |elif mount = 1:\r\n        guiado\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n por {event.price} créditos.",
      "default": true,
      "name": "Module sold",
      "description": "Triggered when selling a module to outfitting"
    },
    "Module sold from storage": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você vendeu um {event.module.class}-{event.module.grade}\r\n\r\n{event.module.name}\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixo\r\n    |elif mount = 1:\r\n        guiado\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n do seu armazenamento por {event.price} créditos.",
      "default": true,
      "name": "Module sold from storage",
      "description": "Triggered when selling a module from storage"
    },
    "Module sold remote": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have sold a {event.module.class}-{event.module.grade}\r\n\r\n{if event.module.mount:\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.module.name} from your stores for {event.price} credits.\r\n",
      "default": false,
      "name": "Module sold remote",
      "description": "Triggered when selling a module in storage at another station"
    },
    "Module stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você guardou um {event.module.class}-{event.module.grade}\r\n\r\n{event.module.name}\r\n\r\n{if type(event.module.mount) != \"void\":\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixo\r\n    |elif mount = 1:\r\n        guiado\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n\r\n{if type(event.cost) != \"void\": por um custo de {event.cost} créditos}.",
      "default": true,
      "name": "Module stored",
      "description": "Triggered when you store a module"
    },
    "Module swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have swapped the positions of a {event.frommodule.class}-{event.frommodule.grade}\r\n\r\n{if type(event.frommodule.mount) != \"void\":\r\n    {for index, value in event.frommodule.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixed\r\n    |elif mount = 1:\r\n        giimballed\r\n    |elif mount = 2:\r\n        turreted\r\n    }\r\n}\r\n\r\n{event.frommodule.name} and\r\n\r\n{if event.tomodule:\r\n    a {event.tomodule.class}-{event.tomodule.grade},\r\n\r\n    {if type(event.tomodule.mount) != \"void\":\r\n        {for index, value in event.tomodule.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n        |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {event.tomodule.name}.\r\n|else: \r\n    an empty slot.\r\n}\r\n",
      "default": false,
      "name": "Module swapped",
      "description": "Triggered when modules are swapped between slots on the ship"
    },
    "Module transfer": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Vocẽ transferiu um {event.module.class}-{event.module.grade}\r\n\r\n{event.module.name} \r\n\r\n{if event.module.mount:\r\n    {for index, value in event.module.mount: {set mount to value}}\r\n    {if mount = 0:\r\n        fixo\r\n    |elif mount = 1:\r\n        guiado\r\n    |elif mount = 2:\r\n        torreta\r\n    }\r\n}\r\n\r\n{if event.transfercost: pelo custo de {event.transfercost} créditos}.\r\n\r\n{set t_remaining to event.transfertime}\r\n\r\n{if t_remaining:\r\n\r\n   {Pause(1000)}\r\n   Chegada esperada em:\r\n\r\n   {if t_remaining > (60*60*24):\r\n      {set t_days to floor(t_remaining/(60*60*24))}\r\n      {t_days} dias,\r\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\r\n   }\r\n\r\n   {if t_remaining > 3600:\r\n      {set t_hours to floor(t_remaining/3600)}\r\n      {t_hours} horas,\r\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\r\n   }\r\n\r\n   {if t_remaining > 60:\r\n      {if t_days || t_hours: and}\r\n      {set t_minutes to round(t_remaining/(60),0)}\r\n      {t_minutes} minutos.\r\n   }\r\n}",
      "default": true,
      "name": "Module transfer",
      "description": "Triggered when you transfer a module from storage at another station"
    },
    "Modules stored": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have stored the following modules:\r\n\r\n{for module in event.modules:\r\n\r\n    {module.class}-{module.grade}\r\n\r\n    {if type(module.mount) != \"void\":\r\n        {for index, value in module.mount: {set mount to value}}\r\n        {if mount = 0:\r\n            fixed\r\n        |elif mount = 1:\r\n            giimballed\r\n        |elif mount = 2:\r\n            turreted\r\n        }\r\n    }\r\n    {module.name}.\r\n}\r\n\r\n\r\n",
      "default": false,
      "name": "Modules stored",
      "description": "Triggered when you store multiple modules"
    },
    "Music": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n\r\n{if event.musictrack = \"GalaxyMap\":\r\n    {if state.lastmusic = \"SystemMap\":\r\n        Returned to\r\n    |else:\r\n        {OneOf(\"Activating\", \"Initiating\", \"Loading\", \"Starting\")}\r\n    }\r\n    Galaxy Map.\r\n|elif event.musictrack = \"SystemMap\":\r\n    {OneOf(\"Activating\", \"Initiating\", \"Loading\", \"Starting\")} System Map.\r\n}\r\n\r\n{SetState('lastmusic', event.musictrack)}",
      "default": false,
      "name": "Music",
      "description": "Triggered when the game music 'mood' changes"
    },
    "Nav beacon scan": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context _}\r\n{SetState('eddi_context_last_subject', 'nav beacon')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_nav_scans', event.numbodies)}\r\n\r\n{set nav to OneOf(\"nav\", \"navigation\")}\r\n{set beacon to OneOf(\"beacon\", \"buoy\")}\r\n{OneOf(\"This {nav} {beacon} has transferred details of {event.numbodies} bodies in this system.\",\r\n \"Details on {event.numbodies} bodies in this system received {Occasionally(3, 'from the {nav} {beacon}')}.\")}\r\n\r\n{Pause(500)}",
      "default": false,
      "name": "Nav beacon scan",
      "description": "Triggered when you scan a nav beacon, before the scan data for all the bodies in the system is written into the journal"
    },
    "Near surface": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Near surface",
      "description": "Triggered when you enter or depart orbit around a surface"
    },
    "Next jump": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Next jump",
      "description": "Triggered when selecting a star system to jump to"
    },
    "NPC attack commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Warning: attack \r\n{if event.by:\r\n   by {event.by} \r\n}\r\ndetected.\r\n\r\n",
      "default": false,
      "name": "NPC attack commenced",
      "description": "Triggered when an attack on your ship by an NPC is detected"
    },
    "NPC cargo scan commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ See if we are carrying non-limpet cargo}\r\n{set carryingvaluablecargo to 0}\r\n{for cargo in ship.cargo:\r\n    {if cargo.commodity != 'Limpet':\r\n        {set carryingvaluablecargo to 1}\r\n    }\r\n}\r\n\r\n{if carryingvaluablecargo = 1:\r\n  Cuidado: escaneamento de carga\r\n  {if event.by:\r\n    por {event.by} \r\n  }\r\n  detectado.\r\n}\r\n",
      "default": true,
      "name": "NPC cargo scan commenced",
      "description": "Triggered when a cargo scan on your ship by an NPC is detected"
    },
    "NPC interdiction commenced": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Warning: interdiction attempt\r\n{if event.by:\r\n   by {event.by} \r\n}\r\ndetected.\r\n\r\n{Occasionally(3, \"Throttle down to submit, or follow escay-pe vector to evade.\")}\r\n",
      "default": false,
      "name": "NPC interdiction commenced",
      "description": "Triggered when an interdiction attempt on your ship by an NPC is detected"
    },
    "Passengers": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ Passengers }\r\n{_ Triggered at session start from Passengers event }",
      "default": true,
      "name": "Passengers",
      "description": "Triggered at session start from Passengers event"
    },
    "Power commodity delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} units of {event.commodity} delivered {Occasionally(2, \"for {P(event.power)}\")}.\r\n",
      "default": false,
      "name": "Power commodity delivered",
      "description": "Triggered when a commander delivers a commodity to a power"
    },
    "Power commodity fast tracked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Humanise(event.amount)} créditos foram gastos acelerando a liberação de mercadorias {Occasionally(2, \"de {P(event.power)}\")}.",
      "default": true,
      "name": "Power commodity fast tracked",
      "description": "Triggered when a commander fast tracks a commodity of a power"
    },
    "Power commodity obtained": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} units of {event.commodity} obtained {Occasionally(2, \"for {P(event.power)}\")}.\r\n",
      "default": false,
      "name": "Power commodity obtained",
      "description": "Triggered when a commander obtains a commodity from a power"
    },
    "Power defected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você desertou de {P(event.frompower)} para {P(event.topower)}.",
      "default": true,
      "name": "Power defected",
      "description": "Triggered when you defect from one power to another"
    },
    "Power expansion vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Voto\r\n{OneOf(\"dado\", \"registrado\")}",
      "default": true,
      "name": "Power expansion vote cast",
      "description": "Triggered when a commander votes for system expansion"
    },
    "Power joined": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você se aliou com {P(event.power)}",
      "default": true,
      "name": "Power joined",
      "description": "Triggered when you join a power"
    },
    "Power left": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Você não é mais aliado de {P(event.power)}",
      "default": true,
      "name": "Power left",
      "description": "Triggered when you leave a power"
    },
    "Power preparation vote cast": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Voto\r\n{OneOf(\"dado\", \"registrado\")}",
      "default": true,
      "name": "Power preparation vote cast",
      "description": "Triggered when a commander votes for system preparation"
    },
    "Power salary claimed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Salário de {Humanise(event.amount)}  créditos recebido {Occasionally(2, \"de {P(event.power)}\")}.",
      "default": true,
      "name": "Power salary claimed",
      "description": "Triggered when a commander claims salary from a power"
    },
    "Power voucher received": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Power voucher received",
      "description": "Triggered when a commander turns in combat vouchers against an opposing power"
    },
    "RandomizeVoice": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "\r\n{_ Set a global variable SpeakerID in calling script, before calling this script. }\r\n\r\n{_ This script will return a Voice name }\r\n{_ For a given SpeakerID, it will always return the same voice }\r\n\r\n{_ get list of voices }\r\n{_ We exclude the voice you have chosen for the EDDI speech responder, to it won't be used for NPCs }\r\n{_ Set that name here: }\r\n{declare MY_SHIP_VOICE as \"Microsoft Zira Desktop\"}\r\n\r\n{declare VOICES as []}\r\n{for voice in VoiceDetails():\r\n  {if voice.name != MY_SHIP_VOICE:\r\n    {set VOICES to cat(VOICES,[voice])}\r\n  }\r\n}\r\n\r\n{if len(VOICES) > 1:\r\n\r\n  {declare THISVOICE as 0}\r\n\r\n  {_ Create a hash code from the SpeakerID (if any) }\r\n  {if SpeakerID:\r\n    {declare i as 0}\r\n    {while i < len(SpeakerID):\r\n      {declare ch as slice(SpeakerID,i,1)}    \r\n      {set THISVOICE to THISVOICE+ord(ch)} \r\n      {set i to i+1}\r\n    }\r\n    {set THISVOICE to mod(THISVOICE,len(VOICES))}\r\n  |else:\r\n    {_ if no SpeakerID, use a random voice }\r\n    {set THISVOICE to rand(0,len(VOICES))} \r\n  }\r\n\r\n  {echo VOICES[THISVOICE].name}\r\n}",
      "default": true,
      "name": "RandomizeVoice",
      "description": null
    },
    "Repair drone": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set systemsrepaired to []}\r\n\r\n{if event.hull:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"the hull\"])} \r\n}\r\n{if event.cockpit:\r\n   {set systemsrepaired to cat(systemsrepaired, [\"the cockpit\"])} \r\n}\r\n{if event.corrosion:\r\n   {set systemsrepaired to cat(systemsrepaired, [OneOf(\"corroded systems\", \"systems affected by corrosion\")])} \r\n}\r\n\r\n{if len(systemsrepaired) > 0:\r\n\r\n    {set remote to Occasionally(2, \"remote\")}\r\n    {set sequence to OneOf(\"sequence\", \"cycle\")}\r\n    {OneOf(\r\n        \"The limpet has completed it's {remote} repairs to\", \r\n        \"{remote} {sequence} completed, repairs made to\"\r\n    )}\r\n\r\n    {set cur to 0}\r\n    {set length to len(systemsrepaired) - 1}\r\n    {while cur < len(systemsrepaired):\r\n        {systemsrepaired[cur]}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }\r\n}.\r\n",
      "default": false,
      "name": "Repair drone",
      "description": "Triggered when your ship is repaired via a repair limpet controller"
    },
    "Repeat last speech": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{state.eddi_context_last_speech}",
      "default": true,
      "name": "Repeat last speech",
      "description": "Repeat the last thing said"
    },
    "Report last scan value": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences }\r\n{set minScanValue to 5000} {_ Set the minimum credit value that should be voiced _}\r\n\r\n{_ Context }\r\n{set scanValue to state.eddi_context_last_scan_estimated_value}\r\n\r\n{if scanValue > minScanValue:\r\n   {OneOf(\"Este\", \"Esta informação\", \"Este scan\")} \r\n   {OneOf(\"pode\", \"deve\", \"poderá\", \"deverá\") } \r\n   {OneOf(\"conseguir\", \"valer\", \"lhe trazer\", \"ser vendido por\")}\r\n   {Humanise(scanValue)} créditos.\r\n}\r\n",
      "default": true,
      "name": "Report last scan value",
      "description": "Report the estimated value of the last body scanned"
    },
    "Screenshot": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Screenshot",
      "description": "Triggered when you take a screenshot"
    },
    "Search and rescue": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.amount} \r\n\r\n{if event.commodity.rare: rare}\r\n\r\n{if event.commodity.name = \"Black Box\":\r\n   {if event.amount > 1:\r\n      {OneOf(\"flight records\", \"black boxes\")}\r\n   |else: \r\n      {OneOf(\"flight record\", \"black box\")}\r\n   }\r\n\r\n|elif event.commodity.name = \"Damaged Escape Pod\":\r\n   {OneOf(\"damaged cryo pod\", \"damaged escape pod\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Occupied Escape Pod\":\r\n   {OneOf(\"occupied escape pod\", \"occupied cryo pod\")}{if event.amount > 1:s}\r\n\r\n|elif event.commodity.name = \"Personal Effects\":\r\n   {OneOf(\"set\", \"collection\")}{if event.amount > 1:s} of\r\n   {OneOf(\"personal effects\", \"personal belongings\")}\r\n\r\n|elif event.commodity.name = \"Salvageable Wreckage\":\r\n   {set wreckage to OneOf(\"wreckage\", \"debris\")}\r\n   {set fragment to OneOf(\"fragment\", \"bit\", \"piece\", \"part\", \"remnant\")}\r\n   {OneOf(\"{fragment}{if event.amount > 1:s} of {wreckage}\", \r\n          \"{wreckage} {fragment}{if event.amount > 1:s}\")}\r\n\r\n|elif event.commodity.name = \"Hostage\":\r\n   hostage{if event.amount > 1:s}\r\n\r\n|else:\r\n   {event.commodity.name}{if event.amount > 1:s}\r\n}\r\n\r\n{OneOf(\"recovered\", \"salvaged\", \"returned\", \"delivered\")}\r\n{Occasionally(2, \"in exchange\")}\r\nfor {Humanise(event.reward)} credits.\r\n",
      "default": false,
      "name": "Search and rescue",
      "description": "Triggered when delivering items to a Search and Rescue contact"
    },
    "Security presence report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{if system.population > 0:\r\n    {if system.security = \"None\":\r\n        {OneOf(\"Nenhuma {OneOf('segurança','aplicação da lei')}\",\"Nenhum policiamento\")}\r\n    |elif system.security = \"Baixa\":\r\n        {OneOf(\"Baixa {OneOf('segurança','aplicação da lei')}\",\"Baixo policiamento\")}\r\n    |elif system.security = \"Média\":\r\n        {OneOf(\"Média {OneOf('segurança','aplicação da lei')}\",\"Médio policiamento\")}\r\n    |elif system.security = \"Alta\":\r\n        {OneOf(\"{OneOf('Alta','Forte')} {OneOf('segurança','aplicação da lei')}\",\"{OneOf('Alto','Forte')} policiamento\")}\r\n    |else:\r\n        Segurança {system.security}\r\n    }\r\n    presente {OneOf(\"aqui\", \"neste sistema\", \"na localidade\")}.\r\n}",
      "default": true,
      "name": "Security presence report",
      "description": "Function to report on the details of system security"
    },
    "Self destruct": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "Self-destruct sequence initiated.  Closing heat vents.\r\n\r\n{SetState('eddi_context_selfdestruct', \"yes\")}",
      "default": false,
      "name": "Self destruct",
      "description": "Triggered when you start the self destruct sequence"
    },
    "Session Scan Value": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Session Scan Value}\r\n{_ Total estimated value of exploration scans for this gaming session}\r\n\r\n{set value to state.eddi_context_session_scan_value}\r\n\r\n{if (value = 0 || value = null) && logout != \"true\":\r\n    {OneOf(\"Valuable scans have not\",\"No valuable scans have\")} been\r\n    {OneOf(\"performed\", \"made \")}\r\n    {OneOf(\"in\", \"during\")} this session.\r\n\r\n|elif value && value > 0:\r\n    {if logout = true: \r\n        This sessions\r\n    |else:\r\n        {OneOf(\"Current value of\", \"Value of current\")}\r\n    }\r\n    {OneOf(\"body and star\", \"exploration\")}\r\n    scans is estimated {OneOf(\"to be\", \"at\")}\r\n    {state.eddi_context_session_scan_value} credits.\r\n}\r\n",
      "default": false,
      "name": "Session Scan Value",
      "description": "Total estimated value of exploration scans for this gaming session"
    },
    "Settlement approached": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Settlement approached }\r\n{_ Triggered when you approach a settlement }\r\n\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'settlement')}\r\n{SetState('eddi_context_last_action', 'approach')}\r\n{SetState('eddi_context_approach_time', SecondsSince(0))}\r\n\r\n{set settlement to event.name}\r\n\r\n{_ Remove + signs from settlement name _}\r\n{while slice(settlement, len(settlement)-1) = \"+\" || slice(settlement, len(settlement)-1) = \" \":\r\n    {set settlement to slice(settlement, 0, len(settlement)-1)}\r\n}\r\n\r\n{SetState('eddi_context_last_settlement', settlement)}\r\n\r\n{_ Added by Kenjiro _}\r\n{SetState('settlement_approached', event.name)}",
      "default": true,
      "name": "Settlement approached",
      "description": "Triggered when you approach a settlement"
    },
    "Shields down": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\nShields {OneOf(\"have collapsed\",\"gone\")},\r\n\r\n{OneOf(\"Ship\",\"Hull\")}\r\n{Occasionally(2,\"is\")}\r\n{Occasionally(2,\"now\")}\r\n{OneOf(\"vun-erable\",\"exposed\")}\r\nto\r\n{Occasionally(2,\"permanent\")}\r\ndamage.\r\n",
      "default": false,
      "name": "Shields down",
      "description": "Triggered when your ship's shields go offline"
    },
    "Shields up": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n\r\n{OneOf(\"Energy screens\",\"Shields\")}\r\n\r\n{OneOf(\"regenerated\",\"at 50%\",\"powered up\",\"restored\")}.\r\n",
      "default": false,
      "name": "Shields up",
      "description": "Triggered when your ship's shields come online"
    },
    "Ship arrived": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2, \"{F('Honorific')}, \")}\r\nYour {event.ship} has \r\n\r\n{OneOf(\"arrived {if station.name != event.station && event.station: at}\", \r\n       \"completed its transfer {if station.name != event.station && event.station: to}\")}\r\n\r\n{if station.name != event.station && event.station:\r\n   {event.station}\r\n   {if system.name != event.system && event.system:\r\n      in the {event.system} system\r\n   }\r\n}.",
      "default": false,
      "name": "Ship arrived",
      "description": "Triggered when you complete a ship transfer"
    },
    "Ship delivered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_currentshipid', event.shipid)}\r\n\r\n{ShipCallsign()} handover complete.\r\n",
      "default": false,
      "name": "Ship delivered",
      "description": "Triggered when your newly-purchased ship is delivered to you"
    },
    "Ship fsd": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship fsd",
      "description": "Triggered when there is a change to the status of your ship's fsd"
    },
    "Ship interdicted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\n\r\n{if event.submitted:\r\n   You have submitted to the interdiction\r\n|elif event.succeeded:\r\n   Evasion failed, systems have been damaged.\r\n   You have been interdicted\r\n}\r\n\r\n{set shiptype to event.interdictor}\r\n{F(\"TargetType\")}\r\n\r\n{if !event.succeeded:\r\n   Interdiction {OneOf(\"evasion successful\",\"successfully evaded\")}\r\n|else:\r\n   {SetState('eddi_context_interdicted', 'yes')}\r\n   by {shiptype}\r\n\r\n   {if event.iscommander:\r\n      This is a human player, of {event.rating} rating!\r\n   |else:\r\n      , a {event.rating} {OneOf(\"pilot\", \"ship\", \"vessel\")}\r\n   }\r\n\r\n   {if event.faction = null:\r\n      who {OneOf(\"is unaligned\",\"has no allegiance\")}\r\n   |else:\r\n      {Occasionally(2,\"who is\")} aligned with {P(event.faction)},\r\n   }\r\n\r\n   {if event.power = \"Indpendent\":\r\n      {Occasionally(2,\"and is a member of the Alliance\")}\r\n   |elif event.power = \"Pirate\":\r\n      and is a free-booter of the Pirate Clans\r\n   |elif event.power = \"Empire\":\r\n      {Occasionally(2,\"and is a servitor of the Empire\")}\r\n   |elif event.power = \"Federation\":\r\n      {Occasionally(2,\"and is a recruit of the Federation\")}\r\n   }\r\n}\r\n.\r\n",
      "default": false,
      "name": "Ship interdicted",
      "description": "Triggered when your ship is interdicted by another ship"
    },
    "Ship interdiction": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(1000)}\r\n\r\n{if !event.succeeded:\r\n   Interdiction {OneOf(\"unsuccessful\",\"evaded\",\"failed\")}.\r\n|else:\r\n   Interdiction {OneOf(\"successful\",\"completed\")}. Systems have been damaged.\r\n   Target is {event.interdictee}\r\n\r\n   {if event.iscommander:\r\n      . This is a human player, of {event.rating} rating!\r\n   |else:\r\n      , a {OneOf(\"pilot\", \"ship\", \"vessel\")}\r\n   }\r\n\r\n   {if event.faction = null:\r\n      who {OneOf(\"is unaligned\",\"has no allegiance\")}\r\n   |else:\r\n      {Occasionally(2,\"who is\")} aligned with {P(event.faction)}\r\n   }\r\n\r\n   {if event.power = \"Indpendent\":\r\n      {Occasionally(2,\"and is a member of the Alliance\")}\r\n   |elif event.power = \"Pirate\":\r\n      and is a free-booter of the Pirate Clans\r\n   |elif event.power = \"Empire\":\r\n      {Occasionally(2,\"and is a servitor of the Empire\")}\r\n   |elif event.power = \"Federation\":\r\n      {Occasionally(2,\"and is a recruit of the Federation\")}\r\n   }\r\n}\r\n.\r\n",
      "default": false,
      "name": "Ship interdiction",
      "description": "Triggered when you interdict another ship"
    },
    "Ship loadout": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship loadout",
      "description": "Triggered when you obtain the loadout of your ship"
    },
    "Ship purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{P(event.ship)} purchased.\r\n",
      "default": false,
      "name": "Ship purchased",
      "description": "Triggered when you purchase a ship"
    },
    "Ship rebooted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{Pause(5000)}\r\n\r\n{if len(event.modules) > 0:\r\n    Repairs complete {F(\"Honorific\")}.\r\n    The following modules have been repaired:\r\n\r\n    {set cur to 0}\r\n    {set length to len(event.modules) - 1}\r\n    {for mods in event.modules:\r\n        {if slice(mods,0,4) = \"Slot\":\r\n            {set mod to ord(slice(mods,4,1))-48}\r\n            {set mod1 to ord(slice(mods,5,1))-49}\r\n            {set mod to mod * 10 + mod1}\r\n            {ship.compartments[mod].module.name}\r\n        |else:\r\n            {mods}\r\n        }\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }\r\n|else:\r\n    {OneOf(\"No systems can be repaired\",\"Unable to fix any systems\")} with reboot repair\r\n}\r\n.\r\n",
      "default": false,
      "name": "Ship rebooted",
      "description": "Triggered when you run reboot/repair on your ship"
    },
    "Ship refuelled": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context}\r\n{SetState('eddi_context_last_subject', 'refuelling')}\r\n{SetState('eddi_context_last_action', 'complete')}\r\n{SetState('eddi_context_fuel_remaining', event.total)}\r\n\r\n\r\n{set fuelscooped to state.eddi_fuel_scooped}\r\n{set fueltotal to ship.fueltanktotalcapacity}\r\n\r\n{if event.source = \"Market\":\r\n   {Occasionally(2,\"{OneOf('{ShipName()}','Ship')}\")}\r\n   {OneOf(\"re-fuelled\",\"fuel tanks topped up\",\"tanks re-filled\")}\r\n   {if event.total != ship.fueltanktotalcapacity: by {Humanise(event.amount)} tonnes\r\n   |else: {Occasionally(3,\"by {Humanise(event.amount)} tonnes\")} }.\r\n|else:\r\n   {SetState('eddi_fuel_scooped',(state.eddi_fuel_scooped + event.amount))}\r\n\r\n   {if event.amount <= 5.0000:\r\n      {set total to (100/fueltotal)*event.total}\r\n\r\n      {set percent to round((100/fueltotal)*state.eddi_fuel_scooped, 0)}\r\n      {set tonnes to round(state.eddi_fuel_scooped, 0)}\r\n\r\n      {SetState('eddi_fuel_scooped', 0)}\r\n      {Pause(3000)}\r\n\r\n      {if tonnes = 1:\r\n         {set tons to \"tonne\"}\r\n      |else:\r\n         {set tons to \"tonnes\"}\r\n      }\r\n\r\n      {OneOf(\"{percent}% refuelled\",\r\n             \"Refuelled by {OneOf('{percent}%','{tonnes} {tons}')}\",\r\n             \"{OneOf('{percent}%','{tonnes} {tons}')} taken on board\")},\r\n\r\n      {if total = 100:\r\n         {Occasionally(2,\"{OneOf('Main','Primary')}\")}\r\n         {Occasionally(2,\"Fuel\")}\r\n         tanks at {OneOf(\"Maximum\",\"100%\")}\r\n         {Occasionally(2,\"capacity\")}\r\n      |else:\r\n         {F(\"Fuel check\")}\r\n      }\r\n   }\r\n}\r\n",
      "default": false,
      "name": "Ship refuelled",
      "description": "Triggered when you refuel your ship"
    },
    "Ship renamed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName()} registrada agora com {P(system.faction)}. \r\n\r\n{set ICAO_ID to ICAO(event.ident)}\r\n{if len(ICAO_ID) > 0:\r\n    Identificação é {ICAO_ID}.\r\n|else:\r\n    Aviso: você escolheu uma identificação de anve que não é pronunciável no alfabeto padrão de radio.\r\n}\r\n",
      "default": true,
      "name": "Ship renamed",
      "description": "Triggered when you rename a ship"
    },
    "Ship repaired": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{if event.item = \"Wear\" || event.item = \"Ship Integrity\":\r\n   {OneOf(\"General\",\"Normal\")} {Occasionally(2,\"ship\")} {OneOf(\"maintenance {OneOf('Completed','Performed')}\",\"wear Repaired\")}\r\n|elif event.item = \"Hull\":\r\n   Hull {Occasionally(2,\"Armour\")} {Occasionally(2,\"Plateing\")}: {OneOf(\"repaired\",\"fixed\")}\r\n|elif event.item = \"Paint\":\r\n   {OneOf(\"Paint\",\"Paintjob\",\"Paint work\")} {OneOf(\"refreshed\",\"re-applied\")}\r\n|elif event.item = \"$modularcargobaydoor_name\":\r\n   Cargo {Occasionally(\"Bay\")} {OneOf(\"Hatch\",\"Door\")}\r\n   {OneOf(\"System\",\"Component\",\"Module\")}: {OneOf(\"repaired\",\"fixed\")}\r\n|elif event.item = null || event.item = \"All\":\r\n   {Occasionally(2,ShipName())} {OneOf(\"damage repaired\",\"repairs complete\")}\r\n|else:\r\n   {if find(event.item, \"Cockpit\") > -1:\r\n      {OneOf(\"Cockpit\",\"Canopy\")}\r\n   |else:\r\n      {event.item}\r\n      {OneOf(\"System\",\"Component\",\"Module\")}:\r\n   }\r\n   {OneOf(\"repaired\",\"fixed\")}\r\n}.\r\n",
      "default": false,
      "name": "Ship repaired",
      "description": "Triggered when you repair your ship"
    },
    "Ship repurchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship repurchased",
      "description": "Triggered when you repurchase your ship"
    },
    "Ship restocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Occasionally(2,ShipName())} {OneOf(\"amunition restocked\",\"re-armed\",\"amunition replenished\")}.\r\n",
      "default": false,
      "name": "Ship restocked",
      "description": "Triggered when you restock your ship's ammunition"
    },
    "Ship shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Ship shutdown",
      "description": "Triggered when your ship's system are shutdown"
    },
    "Ship sold": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set solds to ShipName(event.shipid, event.ship)}\r\n\r\n{OneOf(\"Retired {solds} from active duty\",\"Decommissioned {solds}\",\"Sold {solds}\")}\r\n\r\n{if event.system != system.name:\r\n   in {event.system}\r\n}.\r\n\r\n{_ Remove Fines & Bounties from sold ship _}\r\n{set tempshipid to state.eddi_context_currentshipid}\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n{F(\"FinesBounties_ClearShip\")}\r\n{SetState('eddi_context_currentshipid', tempshipid)}\r\n",
      "default": false,
      "name": "Ship sold",
      "description": "Triggered when you sell a ship"
    },
    "Ship sold on rebuy": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{event.ship}, identification {event.shipid}, sold in {event.system} for {Humanise(event.price)} credits.\r\n\r\n{_ Remove Fines & Bounties from sold ship _}\r\n{set tempshipid to state.eddi_context_currentshipid}\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n{F(\"FinesBounties_ClearShip\")}\r\n{SetState('eddi_context_currentshipid', tempshipid)}",
      "default": false,
      "name": "Ship sold on rebuy",
      "description": "Triggered when you sell a ship to raise funds on the insurance / rebuy screen"
    },
    "Ship swapped": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if event.storedship:\r\n    {OneOf(\"Storing\", \"Mothballing\", \"Parking\")} {ShipName(event.storedshipid, event.storedship)} and\r\n|elif event.soldship:\r\n    {F(\"FinesBounties_ClearShip\")}\r\n    Selling {ShipName(event.soldshipid, event.soldship)} and\r\n}\r\n\r\n{OneOf(\"swapping\",\"moving\",\"transferring\")} to {ShipName(event.shipid, event.ship)}.\r\n{SetState('eddi_context_currentshipid', event.shipid)}\r\n\r\n{F(\"Limpet check\")}\r\n{F(\"List launchbays\")}\r\n\r\n{set fighterhangar to false}\r\n{for compartment in ship.compartments:\r\n    {if find(compartment.module.name, \"Fighter Hangar\") != -1:\r\n        {set fighterhangar to true}\r\n    }\r\n}\r\n{if fighterhangar = true:\r\n    Reminder: you need to assign a crew member to active duty.\r\n}\r\n\r\n{F(\"FinesBounties_CheckShip\")}",
      "default": false,
      "name": "Ship swapped",
      "description": "Triggered when you swap a ship"
    },
    "Ship targeted": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Ship targeted }\r\n{_ Triggered when the player selects a target }\r\n\r\n{_ event Parameters:   targetlocked - bool (ie false when losing target) }\r\n{_ If target locked:   name (of ship), scanstage (ie 0, 1, 2, 3) }\r\n{_ If scan stage >= 1: name (of pilot), rank (of pilot) }\r\n{_ If scan stage >= 2: shieldhealth, hullhealth (both 0-100) }\r\n{_ If scan stage >= 3: faction, legalstatus (ie clean, wanted, etc), bounty (if appicable), }\r\n{_                     subsystem (ie FSD, power plant, etc), subsystemhealth (0-100) }\r\n\r\n{_ Context }\r\n{SetState('eddi_context_last_subject', 'ship')}\r\n{SetState('eddi_context_last_action', 'targeted')}\r\n\r\n{if event.targetlocked:\r\n    {if event.scanstage = 0:\r\n        {SetState('legal_status_reported', false)}\r\n    |elif event.scanstage = 1:\r\n        {OneOf(\"Scanning\", \"Analysing\")} {Occasionally(2, OneOf(\"ship\", \"vessel\", \"target\"))}\r\n    |elif event.scanstage = 3 && state.legal_status_reported = false && !event.subsystem:\r\n        {set legalstatus to event.legalstatus}\r\n        {if legalstatus = \"Wanted\" || legalstatus = \"Wanted Enemy\" || legalstatus = \"Warrant\":\r\n            {event.name}\r\n            {OneOf(\"has a bounty\", \"is fair game\", \"is a legitimate target\",\"has been assigned a bounty\")}.\r\n        |else:\r\n            {Occasionally(2,\"Your\")} target is \r\n            {if find(event.name, \"Authority\") = -1 && find(event.name, \"Security\") = -1 && find(event.name, \"Defence\") = -1:\r\n                clean.\r\n            |else:\r\n                {if StartsWithVowel(event.name): an |else: a } {event.name}\r\n                {if find(event.name, \"Vessel\") = -1: vessel}\r\n                .\r\n            }\r\n        }\r\n        {SetState('legal_status_reported', true)}\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Ship targeted",
      "description": "Triggered when the player selects a target"
    },
    "Ship transfer initiated": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{ShipName(event.shipid, event.ship)} {OneOf(\"on its way\",\"being transferred\", \"transfer initiated\", \"being transported\", \"being transferred\")} from {P(event.system)}\r\n\r\n{if event.transfercost: for a cost of {event.price} credits}.\r\n\r\n{set t_remaining to event.time}\r\n\r\n{if t_remaining:\r\n\r\n   Expected arrival in:\r\n\r\n   {if t_remaining > (60*60*24):\r\n      {set t_days to floor(t_remaining/(60*60*24))}\r\n      {t_days} days,\r\n      {set t_remaining to t_remaining-(t_days*(60*60*24))}\r\n   }\r\n\r\n   {if t_remaining > 3600:\r\n      {set t_hours to floor(t_remaining/3600)}\r\n      {t_hours} hours,\r\n      {set t_remaining to t_remaining-(t_hours*(60*60))}\r\n   }\r\n\r\n   {if t_remaining > 60:\r\n      {if t_days || t_hours: and}\r\n      {set t_minutes to round(t_remaining/(60),0)}\r\n      {t_minutes} minutes.\r\n   }\r\n}",
      "default": false,
      "name": "Ship transfer initiated",
      "description": "Triggered when you initiate a ship transfer"
    },
    "Shutdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "\r\n{set logout to \"true\"}\r\n{F(\"Session Scan Value\")}",
      "default": true,
      "name": "Shutdown",
      "description": "Triggered on a clean shutdown of the game"
    },
    "Signal detected": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Signal detected",
      "description": "Triggered when a signal source is detected"
    },
    "Silent running": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Silent running",
      "description": "Triggered when you activate or deactivate silent running"
    },
    "Squadron rank": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Squadron rank }\r\n{_ Triggered when your rank with a squadron has changed }\r\n\r\n\r\nVocê foi\r\n{if event.newrank > event.oldrank:\r\n    promovido \r\n|else:\r\n    rebaixado\r\n}\r\na {cmdr.squadronrank.name} na esquadra {event.name}.\r\n",
      "default": true,
      "name": "Squadron rank",
      "description": "Triggered when your rank with a squadron has changed"
    },
    "Squadron status": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Squadron status }\r\n{_ Triggered when your status with a squadron changes }\r\n\r\n\r\n{if event.status = \"applied\":\r\n    Você se inscreveu para admissão na esquadra {event.name}.\r\n|elif event.status = \"created\":\r\n    Você criou a esquadra {event.name}.\r\n|elif event.status = \"disbanded\":\r\n    A esquadra {event.name} foi dissolvida.\r\n|elif event.status = \"invited\":\r\n    Você recebeu convite para se juntar à esquadra {event.name}.\r\n|elif event.status = \"joined\":\r\n    Você entrou na esquadra {event.name}.\r\n|elif event.status = \"kicked\":\r\n    Você foi sofreu expulsão da esquadra {event.name}.\r\n|elif event.status = \"left\":\r\n    Você deixou a esquadra {event.name}.\r\n}\r\n",
      "default": true,
      "name": "Squadron status",
      "description": "Triggered when your status with a squadron has changed"
    },
    "SRV docked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"S-R-V\")} {OneOf(\"docked\",\"secured {Occasionally(2,'on board')}\")}.\r\n",
      "default": false,
      "name": "SRV docked",
      "description": "Triggered when you dock an SRV with your ship"
    },
    "SRV launched": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"S-R-V\")} {OneOf(\"launched\",\"away\",\"deployed\")}.\r\n",
      "default": false,
      "name": "SRV launched",
      "description": "Triggered when you launch an SRV from your ship"
    },
    "SRV turret": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "SRV turret",
      "description": "Triggered when you deploy or retract your SRV's turret"
    },
    "SRV turret deployable": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{if !event.deployable:\r\n   {OneOf(\"Búgui\", \"V-R-S\")} em espera para recuperação.\r\n}",
      "default": true,
      "name": "SRV turret deployable",
      "description": "Triggered when your SRV enters or leaves the restriction zone around a ship."
    },
    "SRV under ship": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{OneOf(\"Búgui\", \"V-R-S\")} aguardando recuperação.",
      "default": true,
      "name": "SRV under ship",
      "description": "Triggered when your SRV enters the recovery zone under your ship"
    },
    "Star habitable zone": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{if event: {set reportbody to event} }\r\n{if !event: {set reportbody to BodyDetails(state.eddi_context_star_star, state.eddi_context_star_system)}}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    I'm not sure which star you are asking about.\r\n|else:\r\n    {if reportbody.estimatedhabzoneinner && reportbody.estimatedhabzoneouter:\r\n        Habitable zone {Occasionally(2, OneOf(\"calculated at\", \"calculated to fall from\"))}\r\n\r\n        {if reportbody.estimatedhabzoneinner > 0 && reportbody.estimatedhabzoneouter > 0:\r\n            {Humanise(reportbody.estimatedhabzoneinner)} \r\n            to {Humanise(reportbody.estimatedhabzoneouter)} \r\n            lightseconds.\r\n        |elif reportbody.estimatedhabzoneouter && reportbody.estimatedhabzoneouter > 0:\r\n            {Humanise(reportbody.estimatedhabzoneouter)} \r\n            lightseconds maximum.\r\n        }\r\n    }\r\n}\r\n",
      "default": false,
      "name": "Star habitable zone",
      "description": "Report on the habitable zone around a star"
    },
    "Star report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Preferences _}\r\n{set reportAge to 0}              {_ Set to 1 to report the star's age. _}\r\n{set reportChromaticity to 0}     {_ Set to 1 to report the star's colour. _}\r\n{set reportNotables to 1}         {_ Set to 1 to report noteworthy main sequence star features. _}\r\n{set reportScanValue to 0}        {_ Set to 1 to report the scan value. _}\r\n{set reportHabZone to 0}          {_ Set to 1 to report habitable zone details for the primary star. _}\r\n{set reportLuminosity to 1}       {_ Set to 1 to report the star's luminosity class. _}\r\n{set mainSequenceFrequency to 2}  {_ Set to determine the frequency (1 chance in n) for describing stars as \"main sequence\" _}\r\n\r\n\r\n{_ Fetch from context }\r\n{if event:\r\n    {set reportbody to BodyDetails(event.name, system.name)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name, state.eddi_context_body_system)}\r\n}\r\n{if !reportbody.name || reportbody.name = \"\": \r\n    {set reportbody to BodyDetails(state.eddi_context_body_name)}\r\n}\r\n\r\n{if !reportbody.name || reportbody.name = \"\":\r\n    {_ If it's still not possible to get the body name...  _}\r\n    I'm\r\n    {OneOf(\"not sure\",\"unsure\")}\r\n    {Occasionally(2,\"of\")}\r\n    which star\r\n    {OneOf(\"you are\",\"you're\")}\r\n    {OneOf(\"asking about\",\"referring to\")}.\r\n|else:\r\n    {set class_check(body) to:\r\n\r\n        {set class to \"\"}\r\n        {set pos to 0}\r\n        {set char to slice(body, 0, 1)}\r\n        {while pos < len(body):\r\n            {if char != \"a\" && char != \"b\":\r\n                {set class to cat(class, char)}\r\n            |else:\r\n                {set subclass to cat(subclass, \"-\", char)}\r\n            }\r\n            {set pos to pos + 1}\r\n            {set char to slice(body, pos, 1)}\r\n        }\r\n\r\n        {_ Fix roman numerals being spoken as letters _}\r\n        {if class = \"I\":\r\n            {set class to \"1\"}\r\n        |elif class = \"II\":\r\n            {set class to \"2\"}\r\n        |elif class = \"III\":\r\n            {set class to \"3\"}\r\n        |elif class = \"IV\":\r\n            {set class to \"4\"}\r\n        |elif class = \"V\":\r\n            {set class to \"5\"}\r\n        |elif class = \"VI\":\r\n            {set class to \"6\"}\r\n        }\r\n\r\n        {cat(class, ucase(subclass))}\r\n    }\r\n\r\n    {set mainsequence to 0}\r\n    {if len(reportbody.rings) > 0 && ord(reportbody.rings) != 0: {set ringed to \"ringed\"}}\r\n    {F(\"Body Name Tidy\")}\r\n    {body} is\r\n\r\n    {if reportbody.stellarclass = \"O\":\r\n        an incredibly rare {ringed} main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"B\":\r\n        a very rare {ringed} main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"A\":\r\n        a rare {ringed} main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"F\":\r\n        an uncommon {ringed} main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"G\":\r\n        a common {ringed} main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"K\":\r\n        a common {ringed} main sequence star\r\n        {set mainsequence to 1}\r\n    |elif reportbody.stellarclass = \"M\":\r\n        a very common {ringed} main sequence star\r\n        {set mainsequence to 1}\r\n    |elif find([\"L\", \"T\", \"Y\"], reportbody.stellarclass) > -1:\r\n        a {ringed} brown dwarf\r\n    |elif reportbody.stellarclass = \"TTS\":\r\n        a {ringed} T tauri star in the process of gravitational contraction\r\n    |elif reportbody.stellarclass = \"AEBE\":\r\n        a very young {ringed} proto-star yet to enter main sequence\r\n        {Occasionally(4, \"but on the way to becoming an A or B class star\")}\r\n    |elif reportbody.stellarclass = \"WC\":\r\n        a {ringed} {Occasionally(2, \"fast burning\")} carbon rich Wolf-Rayet star\r\n        {Occasionally(2, \", shedding considerable mass and exposing ionised carbon at its core, \")}\r\n    |elif reportbody.stellarclass = \"WN\":\r\n        a {ringed} {Occasionally(2, \"fast burning\")} helium and nitrogen rich Wolf-Rayet star\r\n        {Occasionally(2, \", shedding considerable mass and exposing ionised helium and nitrogen at its core, \")}\r\n    |elif reportbody.stellarclass = \"WO\":\r\n        a {ringed} {Occasionally(2, \"fast burning\")} oxygen rich Wolf-Rayet star\r\n        {Occasionally(2, \", shedding considerable mass and exposing ionised oxygen at its core, \")}\r\n    |elif reportbody.stellarclass = \"WNC\":\r\n       a {ringed} {Occasionally(2, \"fast burning\")} Wolf-Rayet star\r\n       {Occasionally(2, \", shedding considerable mass and exposing ionised nitrogen, carbon, oxygen, and helium at its core, \")}\r\n    |elif reportbody.stellarclass = \"W\":\r\n        a {ringed} {Occasionally(2, \"fast burning\")} Wolf-Rayet star \r\n        {Occasionally(2, \", shedding considerable mass and exposing heavier elements at its core, \")}\r\n    |elif reportbody.stellarclass = \"CS\":\r\n        a {ringed} carbon star\r\n    |elif find([\"C\", \"CN\", \"CH\", \"CHd\"], reportbody.stellarclass) > -1:\r\n        a {ringed} {Occasionally(2, \"late-sequence\")} carbon star\r\n        {Occasionally(4, \"with an atmosphere dominated by carbon\")}\r\n    |elif reportbody.stellarclass = \"CJ\":\r\n        a {ringed} {Occasionally(2, \"late-sequence\")} carbon star\r\n        {Occasionally(2, \"with high levels of carbon 13 in its atmosphere\")}\r\n    |elif reportbody.stellarclass = \"MS\":\r\n        a {ringed} late sequence star\r\n        {Occasionally(4, \"that was once an M class star and is on the way to becoming a carbon star\")}\r\n    |elif reportbody.stellarclass = \"S\":\r\n        a {ringed} late sequence star\r\n        {Occasionally(4, \"that was once an M class star and is becoming a carbon star\")}\r\n    |elif reportbody.stellarclass = \"D\":\r\n        a {ringed} white dwarf\r\n    |elif reportbody.stellarclass = \"DA\":\r\n        a {ringed} white dwarf\r\n        {Occasionally(4, \"with a hydrogen-rich atmosphere\")}\r\n    |elif reportbody.stellarclass = \"DAB\":\r\n        a {ringed} white dwarf\r\n        {Occasionally(4, \"with an atmosphere rich in hydrogen and helium\")}\r\n    |elif slice(reportbody.stellarclass, 0, 1) = \"D\":\r\n        a {ringed} white dwarf\r\n    |elif slice(reportbody.stellarclass, 0, 1) = \"N\":\r\n        a {ringed} neutron star\r\n        {Occasionally(4, \"that has a dangerously high-density core\")}\r\n    |elif reportbody.stellarclass = \"H\":\r\n        a black hole\r\n    |elif reportbody.stellarclass = \"X\":\r\n        an exotic stellar entity\r\n    |elif reportbody.stellarclass = \"SuperMassiveBlackHole\":\r\n        a supermassive black hole\r\n    |elif reportbody.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n        a {ringed} blue-white super-giant\r\n        {Occasionally(4, \"that is expanding towards being a red super-giant\")}\r\n    |elif reportbody.stellarclass = \"F_WhiteSuperGiant\":\r\n        a {ringed} yellow-white supergiant\r\n        {Occasionally(4, \"that is expanding towards being a red super-giant\")}\r\n    |elif reportbody.stellarclass = \"M_RedSuperGiant\":\r\n        a {ringed} red super-giant {Occasionally(4, \"in its helium burning phase\")}\r\n    |elif reportbody.stellarclass = \"M_RedGiant\":\r\n        a {ringed} red giant\r\n        {Occasionally(4, \"that is expanding towards being a red super-giant\")}\r\n    |elif reportbody.stellarclass = \"K_OrangeGiant\":\r\n        {if ringed: a {ringed} |else: an} orange giant\r\n        {Occasionally(4, \"that is expanding as it heads towards the end of its life\")}\r\n    |elif reportbody.stellarclass = \"RoguePlanet\":\r\n        a {ringed} rogue planet\r\n    |elif reportbody.stellarclass = \"Nebula\":\r\n        a nebula\r\n    |elif reportbody.stellarclass = \"StellarRemnantNebula\":\r\n        a nebula remnant\r\n    |else:\r\n        a class {Spacialise(reportbody.stellarclass)} star\r\n    }\r\n\r\n    {if reportLuminosity = 1 && reportbody.luminosityclass:\r\n        with a luminosity class of {class_check(reportbody.luminosityclass)},\r\n    }\r\n\r\n    {if reportAge = 1 && reportbody.age:\r\n        {set ageInYears to reportbody.age * 1000000}\r\n        {if reportbody.age > 0:\r\n            {OneOf(\"that has been around for {Humanise(ageInYears)} years\",\r\n                   \"that is {Humanise(ageInYears)} years old\",\r\n                   \"of {Humanise(ageInYears)} years\",\r\n            )}\r\n        |else:\r\n            that\r\n            {OneOf(\"is less than {OneOf('one', 'a')} million years old\",\r\n                   \"has been in existence for less than {OneOf('one', 'a')} million years\")},\r\n        }\r\n        {if ageInYears < 1000000:\r\n           making it one of the youngest stars in the galaxy\r\n        |elif ageInYears >14000000000:\r\n           making it one of the oldest stars in the galaxy\r\n        }.\r\n    }\r\n\r\n    {if reportChromaticity = 1 && reportbody.chromaticity && mainsequence = 1:\r\n            {Occasionally(2,\"As you can see, it emits a {reportbody.chromaticity} light.\")}\r\n    }\r\n\r\n    {if reportNotables = 1:\r\n        {set notables to []}\r\n\r\n        {if reportbody.massporbability:\r\n            {if reportbody.massprobability < 0.01:\r\n                {set notables to cat(notables, [cat(\"an incredibly low solar mass of \", Humanise(reportbody.solarmass))])}\r\n            |elif reportbody.massprobability < 0.1:\r\n                {set notables to cat(notables, [cat(\"an extremely low solar mass of \", Humanise(reportbody.solarmass))])}\r\n            |elif reportbody.massprobability < 1:\r\n                {set notables to cat(notables, [\"an unusually low solar mass\"])}\r\n            |elif reportbody.massprobability < 10:\r\n                {set notables to cat(notables, [\"lower than average solar mass\"])}\r\n            |elif reportbody.massprobability > 99.99:\r\n                {set notables to cat(notables, [cat(\"an incredibly high solar mass of \", Humanise(reportbody.solarmass))])}\r\n            |elif reportbody.massprobability > 99.9:\r\n                {set notables to cat(notables, [cat(\"an extremely high solar mass of \", Humanise(reportbody.solarmass))])}\r\n            |elif reportbody.massprobability > 99:\r\n                {set notables to cat(notables, [\"an unusually high solar mass\"])}\r\n            |elif reportbody.massprobability > 90:\r\n                {set notables to cat(notables, [\"higher than average solar mass\"])}\r\n            }\r\n        }\r\n\r\n        {if reportbody.radiusprobability:\r\n            {if reportbody.radiusprobability < 0.01:\r\n                {set notables to cat(notables, [cat(\"an incredibly low solar radius of \", Humanise(reportbody.solarradius))])}\r\n            |elif reportbody.radiusprobability < 0.1:\r\n                {set notables to cat(notables, [cat(\"an extremely low solar radius of \", Humanise(reportbody.solarradius))])}\r\n            |elif reportbody.radiusprobability < 1:\r\n                {set notables to cat(notables, [\"an unusually low solar radius\"])}\r\n            |elif reportbody.radiusprobability <1 0:\r\n                {set notables to cat(notables, [\"lower than average solar radius\"])}\r\n            |elif reportbody.radiusprobability > 99.99:\r\n                {set notables to cat(notables, [cat(\"an extremely high solar radius of \", Humanise(reportbody.solarradius))])}\r\n            |elif reportbody.radiusprobability > 99.9:\r\n                {set notables to cat(notables, [cat(\"an incredibly high solar radius of \", Humanise(reportbody.solarradius))])}\r\n            |elif reportbody.radiusprobability > 99:\r\n                {set notables to cat(notables, [\"an unusually high solar radius\"])}\r\n            |elif reportbody.radiusprobability > 90:\r\n                {set notables to cat(notables, [\"higher than average solar radius\"])}\r\n            }\r\n        }\r\n\r\n        {if reportbody.tempprobability:\r\n            {if reportbody.tempprobability < 0.01:\r\n                {set notables to cat(notables, [cat(\"an incredibly low surface temperature of \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n            |elif reportbody.tempprobability < 0.1:\r\n                {set notables to cat(notables, [cat(\"an extremely low surface temperature of \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n            |elif reportbody.tempprobability < 1:\r\n                {set notables to cat(notables, [\"an unusually low surface temperature\"])}\r\n            |elif reportbody.tempprobability < 10:\r\n                {set notables to cat(notables, [\"lower than average surface temperature\"])}\r\n            |elif reportbody.tempprobability > 99.99:\r\n                {set notables to cat(notables, [cat(\"an extremely high surface temperature of \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n            |elif reportbody.tempprobability > 99.9:\r\n                {set notables to cat(notables, [cat(\"an incredibly high surface temperature of \", Humanise(reportbody.temperature), \" kelvin\")])}\r\n            |elif reportbody.tempprobability > 99:\r\n                {set notables to cat(notables, [\"an unusually high surface temperature\"])}\r\n            |elif reportbody.tempprobability > 90:\r\n                {set notables to cat(notables, [\"higher than average surface temperature\"])}\r\n            }\r\n        }\r\n\r\n        {if len(notables) = 0:\r\n            {OneOf(\"\", \"This is a typical example of this class of star.\", \"There is nothing particularly notable about this star.\", \"It is an average example for such a star.\")}\r\n        |else:\r\n            {OneOf('Compared to other stars in its class', 'In comparison to other {reportbody.stellarclass}-class stars', 'Relative to other {reportbody.stellarclass}-class stars')}, this star is\r\n            {if len(notables) = 1:\r\n                notable for having {notables[0]}.\r\n            |elif len(notables) = 2:\r\n                {OneOf('interesting', 'unusual')}, with {notables[0]} and {notables[1]}.\r\n            |elif len(notables) = 3:\r\n                {OneOf('exceptional', 'remarkable')}, with {notables[0]}, {notables[1]} and {notables[2]}.\r\n            }\r\n        }\r\n    }\r\n\r\n    {if reportScanValue = 1: {F(\"Report last scan value\")} }\r\n\r\n    {if reportHabZone = 1 && event.mainstar: {F(\"Star habitable zone\")} }\r\n}\r\n",
      "default": false,
      "name": "Star report",
      "description": "Function to report on the details of the contextual body"
    },
    "Star scanned": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'star')}\r\n{SetState('eddi_context_last_action', 'scan')}\r\n{SetState('eddi_context_star_system', system.name)}\r\n{SetState('eddi_context_star_star', event.name)}\r\n{SetState('eddi_context_last_scan_estimated_value', event.estimatedvalue)}\r\n\r\n\r\n{if state.lastscanbody != event.name:\r\n\r\n    {if event.estimatedvalue:\r\n        {SetState(\"eddi_context_system_value\", state.eddi_context_system_value + event.estimatedvalue)}\r\n        {SetState(\"eddi_context_session_scan_value\", state.eddi_context_session_scan_value + event.estimatedvalue)}\r\n    }\r\n\r\n    {if event.stellarclass = \"SuperMassiveBlackHole\":\r\n        {set class to \"Supermassive black hole\"}\r\n    |elif event.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n        {set class to \"A-\"}\r\n    |elif event.stellarclass = \"F_WhiteSuperGiant\":\r\n        {set class to \"F-\"}\r\n    |elif event.stellarclass = \"M_RedSuperGiant\":\r\n        {set class to \"M-\"}\r\n    |elif event.stellarclass = \"M_RedGiant\":\r\n        {set class to \"M-\"}\r\n    |elif event.stellarclass = \"K_OrangeGiant\":\r\n        {set class to \"K-\"}\r\n    |elif event.stellarclass = \"RoguePlanet\":\r\n        {set class to \"Rogue planet-\"}\r\n    |elif event.stellarclass = \"Nebula\":\r\n        {set class to \"Nebula-\"}\r\n    |elif event.stellarclass = \"StellarRemnantNebula\":\r\n        {set class to \"Nebula remnant-\"}\r\n    |else:\r\n        {set class to join(split(Spacialise(event.stellarclass), \" \"), \"-\")}\r\n    }\r\n\r\n    {Pause(1000)}\r\n\r\n    Scan of {class}class star {OneOf(\"complete\", \"completed\")}.\r\n\r\n    {if ship.Role.edname = \"Exploration\" || ship.Role.edname = \"Multipurpose\":\r\n        {F(\"Star report\")}\r\n    }\r\n    {SetState('lastscanbody', event.name)}\r\n}\r\n",
      "default": false,
      "name": "Star scanned",
      "description": "Triggered when you complete a scan of a stellar body"
    },
    "Station no fire zone entered": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Station no fire zone entered",
      "description": "Triggered when your ship enters a station's no fire zone"
    },
    "Station no fire zone exited": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Station no fire zone exited",
      "description": "Triggered when your ship exits a station's no fire zone"
    },
    "Station report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "Nada de interessante aqui.",
      "default": true,
      "name": "Station report",
      "description": "Function to report on the details of the current station"
    },
    "Swapout check": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Function to find a given module in outfitting}\r\n{set outfitting(module) to:\r\n    {for outfittingmodule in station.outfitting:\r\n        {if outfittingmodule.EDName = module.EDName:\r\n            {return outfittingmodule}\r\n        }\r\n    }\r\n}\r\n\r\n{_ Function to report if a module is cheaper in outfitting that on the ship}\r\n{set reportIfCheaper(shipmodule) to:\r\n    {_ Only consider if this has no modifications}\r\n    {if !shipmodule.modified:\r\n        {set outfittingmodule to outfitting(shipmodule)}\r\n        {if outfittingmodule:\r\n            {if outfittingmodule.price < shipmodule.price:\r\n                {set saving to shipmodule.price - outfittingmodule.price}\r\n                {_ Only bother if it's a relatively good saving}\r\n                {if saving / cmdr.credits > 0.001:\r\n                    Você pode economizar {Humanise(saving)} créditos trocando seu {shipmodule.name} aqui.\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n{reportIfCheaper(ship.powerplant)}\r\n{reportIfCheaper(ship.thrusters)}\r\n{reportIfCheaper(ship.frameshiftdrive)}\r\n{reportIfCheaper(ship.lifesupport)}\r\n{reportIfCheaper(ship.powerdistributor)}\r\n{reportIfCheaper(ship.sensors)}\r\n{for hardpoint in ship.hardpoints:\r\n    {if hardpoint.module:\r\n        {reportIfCheaper(hardpoint.module)}\r\n    }\r\n}\r\n{for compartment in ship.compartments:\r\n    {if compartment.module:\r\n        {reportIfCheaper(compartment.module)}\r\n    }\r\n}\r\n",
      "default": true,
      "name": "Swapout check",
      "description": "Check to see if any fitted modules are available more cheaply here"
    },
    "Synthesised": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{token(event.synthesis, \" \", 0)} synthesis complete.",
      "default": false,
      "name": "Synthesised",
      "description": "Triggered when you synthesise something from materials"
    },
    "System distance report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    Não estou certo sobre qual sistema você está se referindo.\r\n|else:\r\n    A distância até {P(reportsystem.name)} é de {Humanise(Distance(reportsystem.x, reportsystem.y, reportsystem.z, system.x, system.y, system.z))} anos luz.\r\n}",
      "default": true,
      "name": "System distance report",
      "description": "Function to report on the distance to the contextual system"
    },
    "System faction changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "System faction changed",
      "description": "Triggered when there is a change in the controlling faction of a watched system"
    },
    "System report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportbody.name = \"\":\r\n    I'm not sure which system you are asking about.\r\n|else:\r\n    {join(split(reportsystem.name, \".\"), \" \")} is\r\n\r\n    {if reportsystem.population && reportsystem.population > 0:\r\n        {if reportsystem.allegiance = \"Federation\":\r\n            a Federation\r\n        |elif reportsystem.allegiance = \"Empire\":\r\n            an Empire\r\n        |else:\r\n            an independent\r\n        }\r\n        {if reportsystem.government:\r\n            {reportsystem.government}\r\n        |else:\r\n          system\r\n        }\r\n        {OneOf(\"of\", \"with a population of\", \"home to\", \"supporting\")} {Humanise(reportsystem.population)} {OneOf(\"people\", \"souls\")}\r\n        {if reportsystem.power:\r\n            , {OneOf(\"aligned to\", \"allied with\", \"controlled by\")} {P(reportsystem.power)}\r\n        }.\r\n\r\n        {if reportsystem.faction:\r\n          {reportsystem.faction} is the {OneOf(\"controlling\", \"local\", \"immediate\")} {OneOf(\"power\", \"faction\")}.\r\n        }\r\n\r\n        {if len(reportsystem.stations) = 0:\r\n          There are no stations present\r\n        |else:\r\n            {if len(reportsystem.orbitalstations) = 0:\r\n                {if len(reportsystem.planetarystations) = 1:\r\n                    There is {OneOf(\"a single\", \"a lone\", \"just one\", \"one\")} planetary station\r\n                |else:\r\n                    There are {len(reportsystem.planetarystations)} planetary stations\r\n                }\r\n            |elif len(reportsystem.orbitalstations) = 1:\r\n                There is {OneOf(\"a single\", \"a lone\", \"just one\", \"one\")} orbital station\r\n                {if len(reportsystem.planetarystations) = 1:\r\n                    and {OneOf(\"a lone\", \"a single\", \"one\")} planetary station\r\n                |elif len(reportsystem.planetarystations) > 1:\r\n                    and {len(reportsystem.planetarystations)} planetary stations\r\n                }\r\n            |else:\r\n                There are {len(reportsystem.orbitalstations)} orbital stations\r\n                {if len(reportsystem.planetarystations) = 1:\r\n                    and {OneOf(\"a lone\", \"a single\", \"one\")} planetary station\r\n                |elif len(reportsystem.planetarystations) > 1:\r\n                    and {len(reportsystem.planetarystations)} planetary stations\r\n                }\r\n            }\r\n        }\r\n        in this system\r\n    |else:\r\n       unpopulated\r\n   }.\r\n}",
      "default": false,
      "name": "System report",
      "description": "Function to report on the details of the contextual star system"
    },
    "System scan complete": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "System scan complete",
      "description": "Triggered after having identified all bodies in the system"
    },
    "System state changed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'system')}\r\n{SetState('eddi_context_last_action', 'change_state')}\r\n{SetState('eddi_context_system', event.system)}\r\n{SetState('eddi_context_system_system', event.system)}\r\n\r\n{_ Set up our system name}\r\n{if event.system = homesystem.name:\r\n  {set system to OneOf('{P(event.system)}',\r\n                       'your home system')}\r\n|elif event.system = system.name:\r\n  {set system to OneOf('{P{event.system)}',\r\n                       'this system')}\r\n|else:\r\n  {set system to OneOf('system {P(event.system)}'\r\n                       '{P(event.system)}'))}\r\n}\r\n\r\n{set system to join(split(system, \".\"), \" \")}\r\n\r\n{if event.newstate != 'None':\r\n  {_ System has entered a new state}\r\n  {OneOf('Local transmissions report that', 'Information: ', 'Transmission intercepted.  Contents state that ')}\r\n  {if event.newstate = 'Boom':\r\n    {OneOf('{system} is experiencing a commercial boom',\r\n           '{system} is entering a period of heightened commercial success')}\r\n  |elif event.newstate = 'Bust':\r\n    {system} is experiencing economic hardship\r\n  |elif event.newstate = 'Civil Unrest':\r\n    {OneOf('{system} is experiencing civil unrest',\r\n           'there is unrest in the {system} system')}\r\n  |elif event.newstate = 'Civil War':\r\n    {OneOf('{system} is at war with another faction in the same system',\r\n           'civil war has broken out in {system}',\r\n           '{system} has fallen in to civil war',\r\n           'hostilities have broken out in {system}')}\r\n  |elif event.newstate = 'Election':\r\n    {system} is undergoing elections\r\n  |elif event.newstate = 'Expansion':\r\n    {OneOf(\"a faction in {system}'s is attempting to expand in to a neighbouring system\",\r\n           \"a faction in {system}'s is preparing to expand in to a neighbouring system\")}\r\n  |elif event.newstate = 'Famine':\r\n    {system} is suffering from famine\r\n  |elif event.newstate = 'Investment':\r\n    {system}'s controlling faction are investing heavily in their local infrastructure\r\n  |elif event.newstate = 'Lockdown':\r\n    {system} has heightened security due to a lockdown by the controlling faction\r\n  |elif event.newstate = 'Outbreak':\r\n    {system} is suffering from an outbreak of contagious disease\r\n  |elif event.newstate = 'Retreat':\r\n    {system}'s controlling faction is retreating from a neighbouring system\r\n  |elif event.newstate = 'War':\r\n    {system} is now at war with a neighbouring system\r\n  |else:\r\n    {OneOf('{system} has entered {event.state}',\r\n           '{system} is now in a state of {event.state}')}\r\n  }.\r\n}\r\n\r\n",
      "default": false,
      "name": "System state changed",
      "description": "Triggered when there is a change in the state of a watched system"
    },
    "System state report": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Fetch from context }\r\n{set reportsystem to SystemDetails(state.eddi_context_system_system)}\r\n\r\n{if !reportsystem.name || reportsystem.name = \"\":\r\n    I'm not sure which system you are asking about.\r\n|elif reportsystem.state && reportsystem.state != 'None':\r\n    {OneOf(\"This system\", \"{reportsystem.name}\")} is\r\n    {if reportsystem.state = \"Boom\":\r\n        undergoing a boom; there may be good trade profits to be made here\r\n    |elif reportsystem.state = \"Bust\":\r\n        financially bust\r\n    |elif reportsystem.state = \"Civil Unrest\":\r\n        experiencing civil unrest; caution is advised\r\n    |elif reportsystem.state = \"Civil War\":\r\n        {OneOf(\"fighting a\",\"in\")} civil war; caution is advised\r\n    |elif reportsystem.state = \"Election\":\r\n        electing new leaders\r\n    |elif reportsystem.state = \"Expansion\":\r\n        {OneOf(\"gearing up\",\"preparing\")} to expand {Occasionally(2,\"in\")}to another system\r\n    |elif reportsystem.state = \"Famine\":\r\n        in a state of famine; caution is advised\r\n    |elif reportsystem.state = \"Investment\":\r\n        investing in its infrastructure\r\n    |elif reportsystem.state = \"Lockdown\":\r\n        in lockdown; caution is advised\r\n    |elif reportsystem.state = \"None\" || reportsystem.state = null:\r\n        {OneOf(\"not in any particular\",\"in a neutral\")} state {OneOf(\"at the current time\",\"currently\",\"at this time\")}\r\n    |elif reportsystem.state = \"Outbreak\":\r\n        attempting to contain an outbreak of disease; caution is advised\r\n    |elif reportsystem.state = \"Retreat\":\r\n        in retreat\r\n    |elif reportsystem.state = \"War\":\r\n        at war; caution is advised\r\n    }.\r\n}\r\n",
      "default": false,
      "name": "System state report",
      "description": "Report on the current state of the contextual system"
    },
    "TargetType": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Get real target name}\r\n{_ to use this function, set a variable to shiptype in the calling event}\r\n\r\n{if shiptype = \"Cobra Mk. III\":\r\n   {set shiptype to \"Cobra Mark 3\"}\r\n\r\n|elif shiptype = \"Cobra Mk. IV\":\r\n   {set shiptype to \"Cobra Mark 4\"} {_ this works}\r\n\r\n|elif shiptype = \"Krait Mk. II\":\r\n   {set shiptype to \"Krait Mark 2\"}\r\n\r\n|elif shiptype = \"Viper Mk. III\":\r\n   {set shiptype to \"Viper Mark 3\"}\r\n\r\n|elif shiptype = \"Viper Mk. IV\":\r\n   {set shiptype to \"Viper Mark 4\"} {_ this works}\r\n\r\n|elif shiptype = \"$ShipName_Military_Alliance;\":\r\n   {set shiptype to \"the Alliance Defence Force\"}\r\n\r\n|elif shiptype = \"$ShipName_Military_Empire;\":\r\n   {set shiptype to \"the Imperial Navy\"}\r\n\r\n|elif shiptype = \"$ShipName_Military_Federation;\":\r\n   {set shiptype to \"the Federal Navy\"}\r\n\r\n|elif shiptype = \"$ShipName_Military_Independent;\":\r\n   {set shiptype to \"the System Defence Force\"}\r\n\r\n}\r\n",
      "default": false,
      "name": "TargetType",
      "description": "Get real target name"
    },
    "Technology broker": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Technology broker",
      "description": "Triggered when using the Technology Broker to unlock new purchasable technology"
    },
    "TextWisdom": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ TextWisdom}\r\n{_ Random wisdom of the day}\r\n{_ Choose a random option until all are used, then reset}\r\n{_ From an idea put to me by Brigetiol1. Thanks!}\r\n\r\nDaily wisdom, on radio {ShipName()}:\r\n\r\n{Pause(300)}\r\n\r\n{_ check Wisdom string is long, else run string setup (just in case it hasn't already been setup)}\r\n{if len(state.wisdomstring) < 10:\r\n\r\n    {set wisdomstring to [\"The best way to find yourself is to lose yourself in the service of others\",\r\n         \"You must be the change you wish to see in the world\",\r\n         \"Live as if you were to die tomorrow. Learn as if you were to live forever\",\r\n         \"First they ignore you, then they laugh at you, then they fight you, then you win\",\r\n         \"The weak can never forgive. Forgiveness is the attribute of the strong\",\r\n         \"Happiness is when what you think, what you say, and what you do are in harmony\",\r\n         \"In prayer it is better to have a heart without words than words without a heart\",\r\n         \"Truth stands, even if there be no public support. It is self-sustained\",\r\n         \"Satisfaction lies in the effort, not in the attainment, full effort is full victory\",\r\n         \"Truth never damages a cause that is just\",\r\n         \"Fear has its use but cowardice has none\",\r\n         \"Nobody can hurt me without my permission\",\r\n         \"My life is my message\",\r\n         \"Train yourself to let go of everything you fear to lose\",\r\n         \"Insanity: doing the same thing over and over again and expecting different results\",\r\n         \"The difference between stupidity and genius is that genius has its limits\",\r\n         \"Learn from yesterday, live for today, hope for tomorrow\",\r\n         \"A person who never made a mistake never tried anything new\",\r\n         \"If you can't explain it simply, you don't understand it well enough\",\r\n         \"It is no use walking anywhere to preach unless our walking is our preaching\",\r\n         \"The mystery of life isn't a problem to solve, but a reality to experience\",\r\n         \"The mind commands the body and it obeys. The mind orders itself and meets resistance\",\r\n         \"Try looking into that place where you dare not look! You'll find me there, staring out at you\",\r\n         \"Fear is the mind-killer\",\r\n         \"Don't Panic\",\r\n         \"The willow submits to the wind and prospers until one day it is many willows - a wall against the wind\",\r\n         \"You can't make anything idiot proof because idiots are so ingenious\",\r\n         \"Well, the past is gone, I know that. The future, isn't here yet, whatever it's going to be. So, all there is, is, is this. The present. That's it\",\r\n         \"See first, think later, then test. But always see first. Otherwise, you will only see what you were expecting\",\r\n         \"Much can be learned in play, that will afterwards be of use when the circumstances demand it\",\r\n         \"I'm for truth, no matter who tells it. I'm for justice, no matter who it's for or against\",\r\n         \"A well-developed sense of humor is the pole that adds balance to your step as you walk the tightrope of life\",\r\n         \"Knowledge which is divorced from justice, may be called cunning rather than wisdom\"]\r\n    }\r\n    {SetState('wisdomstring', join(wisdomstring, \"+=\"))}\r\n}\r\n\r\n{set textstring to state.wisdomstring}\r\n\r\n{_ create array from the string, using += as the split marker}\r\n{set textarray to split(textstring, \"+=\")}\r\n\r\n{_ create array of unused quotes}\r\n{set temparray to []}\r\n{for check in textarray:\r\n   {set index to len(check)-5}\r\n   {set chk to slice(check, index, 5)}\r\n   {if chk != \" used\":\r\n       {set temparray to cat(temparray, [check])}\r\n   }\r\n}\r\n\r\n{_ if unused array is empty then rebuild and reset all items}\r\n{if len(temparray) = 0:\r\n   {set temparray to []}\r\n   {for check in textarray:\r\n      {set index to len(check)-5}\r\n      {set chk to slice(check, 0, index)}\r\n      {set temparray to cat(temparray, [chk])}\r\n   }\r\n   {set textstring to join(temparray, \"+=\")}\r\n   {set textarray to split(textstring, \"+=\")}\r\n}\r\n\r\n{_ get a random unused item and say it}\r\n{set random to rand(len(temparray))}\r\n{set used to temparray[random]}\r\n{used}\r\n\r\n{_ find position of used item in text array}\r\n{set position to find(textarray, used)}\r\n\r\n{_ mark item as used}\r\n{set useditem to cat(used, \" used\")}\r\n\r\n{_ rebuild text array with marked item}\r\n{set temparray to []}\r\n{set cur to 0}\r\n{while cur < len(textarray):\r\n  {if cur = position:\r\n     {set temparray to cat(temparray, [useditem])}\r\n  |else:\r\n     {set temparray to cat(temparray, [textarray[cur]])}\r\n  }\r\n  {set cur to cur + 1}\r\n}\r\n\r\n{_ rebuild text string ready for next use}\r\n{SetState('wisdomstring', join(temparray, \"+=\"))}\r\n",
      "default": false,
      "name": "TextWisdom",
      "description": "Random wisdom of the day"
    },
    "Timer": {
      "enabled": true,
      "priority": 3,
      "responder": false,
      "script": "{_ Reports time between executions of this script. _}\r\n{_ Currently set to report time spent in a system _}\r\n{_ when called from FSD Engaged event. _}\r\n\r\n{_ Get and format timer }\r\n{set rawtime to abs(SecondsSince(state.timer))}\r\n{set timer to split(format(rawtime, \"dl:dd:HH:mm:ss\"), \":\")}\r\n\r\n{set days to cast(timer[0], \"n\") - 1}\r\n{set hours to cast(timer[1], \"n\")}\r\n{set minutes to cast(timer[2], \"n\")}\r\n{set seconds to cast(timer[3], \"n\")}\r\n\r\n{set timer_array to []}\r\n\r\n{if days > 0:\r\n    {set time to cat(days, \" day\")}\r\n    {if days > 1:{set time to cat(time, \"s\")}}\r\n    {set timer_array to cat(timer_array, [time])}\r\n}\r\n\r\n{if hours > 0:\r\n    {set time to cat(hours, \" hour\")}\r\n    {if hours > 1:{set time to cat(time, \"s\")}}\r\n    {set timer_array to cat(timer_array, [time])}\r\n}\r\n\r\n{if minutes > 0:\r\n    {set time to cat(minutes, \" minute\")}\r\n    {if minutes > 1:{set time to cat(time, \"s\")}}\r\n    {set timer_array to cat(timer_array, [time])}\r\n}\r\n\r\n{if seconds > 0:\r\n    {set time to cat(seconds, \" second\")}\r\n    {if seconds > 1:{set time to cat(time, \"s\")}}\r\n    {set timer_array to cat(timer_array, [time])}\r\n}\r\n\r\nYou spent {List(timer_array)} in this system.\r\n\r\n{SetState('timer', SecondsSince(0))}\r\n",
      "default": false,
      "name": "Timer",
      "description": "Reports time between executions of this script"
    },
    "Touchdown": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{set body to BodyDetails(state.eddi_context_body_name, state.eddi_context_system_name)}\r\n\r\n{F(\"Body Name Tidy\")}\r\n\r\n{if state.loading = false:\r\n    {if event.playercontrolled = true:\r\n        Touchdown {if body: on {body} }.\r\n        {OneOf(\"Drives\",\"Engines\",\"Thrusters\")} {OneOf(\"Offline\",\"Disengaged\",\"Powered Down\")}.\r\n    |else:\r\n        {ShipName()} has touched down\r\n        {if body: on {body} }.\r\n    }\r\n    {Pause(2000)}\r\n|else:\r\n    {SetState('loading', false)}\r\n}\r\n\r\n{if type(event.latitude) != \"void\" && type(event.longitude) != \"void\" && event.playercontrolled:\r\n    {Occasionally(2,\"Current\")}\r\n    {Occasionally(2,\"Planitary\")}\r\n    {Occasionally(2,\"Location\")}\r\n\r\n    coordinates {Occasionally(2,\"are\")}\r\n    {round(event.longitude,4)} degrees longitude,\r\n    {round(event.latitude,4)} degrees latitude.\r\n}\r\n",
      "default": false,
      "name": "Touchdown",
      "description": "Triggered when your ship touches down on a planet's surface"
    },
    "Trade data purchased": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'tradedata')}\r\n{SetState('eddi_context_last_action', 'buy')}\r\n{SetState('eddi_context_tradedata_name', event.system)}\r\n\r\n{OneOf(\"Dados de comércio comprados para {P(event.system)}\",\r\n            \"Dados de comércio de {P(event.system)} disponíveis agora\",\r\n            \"Recebemos dados de comércio de {P(event.system)} dos serviços da estação\",\r\n            \"Recibo de dados de comércio de {P(event.system)} confirmado\")}.",
      "default": true,
      "name": "Trade data purchased",
      "description": "Triggered when you purchase trade data"
    },
    "Trade promotion": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "You have been recognised for your trading ability {F(\"Honorific\")}.\r\n\r\nYou {OneOf(\"are now at\",\"have achieved\",\"have attained\")} the rank of {cmdr.traderating.name}.\r\n",
      "default": false,
      "name": "Trade promotion",
      "description": "Triggered when your trade rank increases"
    },
    "Trade voucher redeemed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ Context }\r\n{SetState('eddi_context_last_subject', 'trade_voucher')}\r\n{SetState('eddi_context_last_action', 'redeem')}\r\n{SetState('eddi_context_trade_voucher_amount', event.amount)}\r\n\r\nTrade vouchers for {Humanise(event.amount)} credits redeemed\r\n{Occasionally(2, \"\r\n    by\r\n    {set cur to 0}\r\n    {set length to len(event.rewards) - 1}\r\n    {while cur < len(event.rewards):\r\n        {P(event.rewards[cur].faction)}\r\n        {set cur to cur + 1}\r\n        {if cur = length: and\r\n        |elif cur < length:,\r\n        }\r\n    }\r\n\")}.\r\n\r\n{if event.brokerpercentage:\r\n  {Pause(1000)}\r\n  The Broker has taken {event.brokerpercentage} credits.\r\n}\r\n",
      "default": false,
      "name": "Trade voucher redeemed",
      "description": "Triggered when you redeem a trade voucher"
    },
    "Under attack": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": null,
      "default": true,
      "name": "Under attack",
      "description": "Triggered when under fire (same time as the Under Attack voice message)"
    },
    "Undocked": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{SetState('eddi_context_docked',\"no\")}\r\n{SetState('eddi_context_mission_accepted', \"no\")}\r\n\r\n{set station to token(StationDetails(event.station).model,\" \",1)}\r\n\r\n{if station = \"Outpost\":\r\n   {Pause(2750)}\r\n   {OneOf(\"Full control re-established\", \"Docking clamps free\", \"Disengaged from local networks\")}\r\n}\r\n\r\n{set limpetcheck to F(\"Limpet check\")}\r\n{set contactscheck to F(\"FinesBounties_ContactsCheck\")}\r\n\r\n{if limpetcheck || contactscheck:\r\n    {Pause(400)}\r\n    {limpetcheck}\r\n    {contactscheck}\r\n}\r\n\r\n{if state.eddi_context_mission_route_useauto = \"no\":\r\n    {_ Report first system in route if not using auto Galaxy Map plotter _}\r\n    {if len(state.missionsroute) > 0 && state.missionsroute != \"Not set\":\r\n        {set route to split(state.missionsroute, \"_\")}\r\n        {Occasionally(2, \"Auto route\")} {OneOf(\"suggested\", \"recommended\")} first\r\n        {OneOf(\"destination\", \"stop\")} is the\r\n        {route[0]} system.\r\n    }\r\n}",
      "default": false,
      "name": "Undocked",
      "description": "Triggered when your ship undocks from a station or outpost"
    },
    "VA initialized": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{_ VAStartup}\r\n{_ Sets some variables for use in VA, if VA started after E:D}\r\n\r\n{SetState('eddi_context_system_system', system.name)}\r\n{SetState('eddi_context_body_name', body.name)}\r\n{SetState('eddi_context_station_name', station.name)}\r\n\r\n{_ Set up Mission Route from saved data _}\r\n{set missionsdata to split(state.missionsdata, \"+=\")}\r\n{SetState('missionsrouteuseeddi', missionsdata[0])}\r\n{SetState('missionsroutetype', missionsdata[1])}\r\n{SetState('missionsdestination', missionsdata[2])}\r\n{SetState('missionsroutedistance', missionsdata[3])}\r\n{SetState('missionsroute', missionsdata[4])}\r\n\r\n{if missionsCount > 0 && state.missionsdestination != system.name:\r\n    {SetState('to_system', state.missionsdestination)}\r\n    {SetState('from_system', system.name)}\r\n\r\n    {if missionsCount > 1: {OneOf(\"Primary\", \"First\", \"Initial\")} }\r\n    {Occasionally(2,\"Mission\")} destination {state.to_system},\r\n    {Occasionally(2, \"{OneOf('has been', 'is')}\")} {OneOf(\"locked\", \"set\")}.\r\n    {F(\"Mission Route Get Distance\")}\r\n    {if state.distance > 0:\r\n        Distance {Occasionally(2,\"to {OneOf('system','target','{state.to_system}')}\")}\r\n        is {state.distance)} light years.\r\n        {SetState('eddi_context_mission_destination_locked', \"no\")}\r\n    }\r\n}\r\n",
      "default": false,
      "name": "VA initialized",
      "description": "Triggered when the VoiceAttack plugin is initialized"
    },
    "Vehicle destroyed": {
      "enabled": true,
      "priority": 3,
      "responder": true,
      "script": "{Pause(2000)}\r\n{set LINK to:{OneOf(\"Link neural\", \"Link\", \"Conecsão\")}}\r\n{LINK}\r\n{OneOf(\" terminad\", \" desativad\")}{if LINK = \"Conecsão\":a |else:o}",
      "default": true,
      "name": "Vehicle destroyed",
      "description": "Triggered when your vehicle is destroyed"
    }
  }
}